{"ast":null,"code":"/**!\n * MixItUp v3.3.2\n * A high-performance, dependency-free library for animated filtering, sorting and more\n * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0\n *\n * @copyright Copyright 2014-2024 KunkaLabs Limited.\n * @author    KunkaLabs Limited.\n * @link      https://github.com/patrickkunka/mixitup\n * @license   Apache-2.0\n */\n\n(function (window) {\n  'use strict';\n\n  var mixitup = null,\n    h = null;\n  (function () {\n    var VENDORS = ['webkit', 'moz', 'o', 'ms'],\n      canary = window.document.createElement('div'),\n      i = -1;\n\n    // window.requestAnimationFrame\n\n    for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {\n      window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];\n    }\n\n    // Element.nextElementSibling\n\n    if (typeof canary.nextElementSibling === 'undefined') {\n      Object.defineProperty(window.Element.prototype, 'nextElementSibling', {\n        get: function () {\n          var el = this.nextSibling;\n          while (el) {\n            if (el.nodeType === 1) {\n              return el;\n            }\n            el = el.nextSibling;\n          }\n          return null;\n        }\n      });\n    }\n\n    // Element.matches\n\n    (function (ElementPrototype) {\n      ElementPrototype.matches = ElementPrototype.matches || ElementPrototype.machesSelector || ElementPrototype.mozMatchesSelector || ElementPrototype.msMatchesSelector || ElementPrototype.oMatchesSelector || ElementPrototype.webkitMatchesSelector || function (selector) {\n        return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;\n      };\n    })(window.Element.prototype);\n\n    // Object.keys\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n    if (!Object.keys) {\n      Object.keys = function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n          hasDontEnumBug = false,\n          dontEnums = [],\n          dontEnumsLength = -1;\n        hasDontEnumBug = !{\n          toString: null\n        }.propertyIsEnumerable('toString');\n        dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];\n        dontEnumsLength = dontEnums.length;\n        return function (obj) {\n          var result = [],\n            prop = '',\n            i = -1;\n          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n            throw new TypeError('Object.keys called on non-object');\n          }\n          for (prop in obj) {\n            if (hasOwnProperty.call(obj, prop)) {\n              result.push(prop);\n            }\n          }\n          if (hasDontEnumBug) {\n            for (i = 0; i < dontEnumsLength; i++) {\n              if (hasOwnProperty.call(obj, dontEnums[i])) {\n                result.push(dontEnums[i]);\n              }\n            }\n          }\n          return result;\n        };\n      }();\n    }\n\n    // Array.isArray\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n    if (!Array.isArray) {\n      Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n    }\n\n    // Object.create\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n    if (typeof Object.create !== 'function') {\n      Object.create = function (undefined) {\n        var Temp = function () {};\n        return function (prototype, propertiesObject) {\n          if (prototype !== Object(prototype) && prototype !== null) {\n            throw TypeError('Argument must be an object, or null');\n          }\n          Temp.prototype = prototype || {};\n          var result = new Temp();\n          Temp.prototype = null;\n          if (propertiesObject !== undefined) {\n            Object.defineProperties(result, propertiesObject);\n          }\n          if (prototype === null) {\n            /* jshint ignore:start */\n            result.__proto__ = null;\n            /* jshint ignore:end */\n          }\n          return result;\n        };\n      }();\n    }\n\n    // String.prototyoe.trim\n\n    if (!String.prototype.trim) {\n      String.prototype.trim = function () {\n        return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n      };\n    }\n\n    // Array.prototype.indexOf\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function (searchElement) {\n        var n, k, t, len;\n        if (this === null) {\n          throw new TypeError();\n        }\n        t = Object(this);\n        len = t.length >>> 0;\n        if (len === 0) {\n          return -1;\n        }\n        n = 0;\n        if (arguments.length > 1) {\n          n = Number(arguments[1]);\n          if (n !== n) {\n            n = 0;\n          } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));\n          }\n        }\n        if (n >= len) {\n          return -1;\n        }\n        for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {\n          if (k in t && t[k] === searchElement) {\n            return k;\n          }\n        }\n        return -1;\n      };\n    }\n\n    // Function.prototype.bind\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function (oThis) {\n        var aArgs, self, FNOP, fBound;\n        if (typeof this !== 'function') {\n          throw new TypeError();\n        }\n        aArgs = Array.prototype.slice.call(arguments, 1);\n        self = this;\n        FNOP = function () {};\n        fBound = function () {\n          return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n        if (this.prototype) {\n          FNOP.prototype = this.prototype;\n        }\n        fBound.prototype = new FNOP();\n        return fBound;\n      };\n    }\n\n    // Element.prototype.dispatchEvent\n\n    if (!window.Element.prototype.dispatchEvent) {\n      window.Element.prototype.dispatchEvent = function (event) {\n        try {\n          return this.fireEvent('on' + event.type, event);\n        } catch (err) {}\n      };\n    }\n  })();\n\n  /**\n   * The `mixitup()` \"factory\" function creates and returns individual instances\n   * of MixItUp, known as \"mixers\", on which API methods can be called.\n   *\n   * When loading MixItUp via a script tag, the factory function is accessed\n   * via the global variable `mixitup`. When using a module loading\n   * system (e.g. ES2015, CommonJS, RequireJS), the factory function is\n   * exported into your module when you require the MixItUp library.\n   *\n   * @example\n   * mixitup(container [,config] [,foreignDoc])\n   *\n   * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>\n   * var containerEl = document.querySelector('.container');\n   *\n   * var mixer = mixitup(containerEl);\n   *\n   * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>\n   * var mixer = mixitup('.container');\n   *\n   * @example <caption>Example 3: Passing a configuration object</caption>\n   * var mixer = mixitup(containerEl, {\n   *     animation: {\n   *         effects: 'fade scale(0.5)'\n   *     }\n   * });\n   *\n   * @example <caption>Example 4: Passing an iframe reference</caption>\n   * var mixer = mixitup(containerEl, config, foreignDocument);\n   *\n   * @global\n   * @namespace\n   * @public\n   * @kind        function\n   * @since       3.0.0\n   * @param       {(Element|string)}  container\n   *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.\n   * @param       {object}            [config]\n   *      An optional \"configuration object\" used to customize the behavior of the MixItUp instance.\n   * @param       {object}            [foreignDoc]\n   *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.\n   * @return      {mixitup.Mixer}\n   *      A \"mixer\" object holding the MixItUp instance.\n   */\n\n  mixitup = function (container, config, foreignDoc) {\n    var el = null,\n      returnCollection = false,\n      instance = null,\n      facade = null,\n      doc = null,\n      output = null,\n      instances = [],\n      id = '',\n      elements = [],\n      i = -1;\n    doc = foreignDoc || window.document;\n    if (returnCollection = arguments[3]) {\n      // A non-documented 4th paramater enabling control of multiple instances\n\n      returnCollection = typeof returnCollection === 'boolean';\n    }\n    if (typeof container === 'string') {\n      elements = doc.querySelectorAll(container);\n    } else if (container && typeof container === 'object' && h.isElement(container, doc)) {\n      elements = [container];\n    } else if (container && typeof container === 'object' && container.length) {\n      // Although not documented, the container may also be an array-like list of\n      // elements such as a NodeList or jQuery collection, is returnCollection is true\n\n      elements = container;\n    } else {\n      throw new Error(mixitup.messages.errorFactoryInvalidContainer());\n    }\n    if (elements.length < 1) {\n      throw new Error(mixitup.messages.errorFactoryContainerNotFound());\n    }\n    for (i = 0; el = elements[i]; i++) {\n      if (i > 0 && !returnCollection) break;\n      if (!el.id) {\n        id = 'MixItUp' + h.randomHex();\n        el.id = id;\n      } else {\n        id = el.id;\n      }\n      if (mixitup.instances[id] instanceof mixitup.Mixer) {\n        instance = mixitup.instances[id];\n        if (!config || config && config.debug && config.debug.showWarnings !== false) {\n          console.warn(mixitup.messages.warningFactoryPreexistingInstance());\n        }\n      } else {\n        instance = new mixitup.Mixer();\n        instance.attach(el, doc, id, config);\n        mixitup.instances[id] = instance;\n      }\n      facade = new mixitup.Facade(instance);\n      if (config && config.debug && config.debug.enable) {\n        instances.push(instance);\n      } else {\n        instances.push(facade);\n      }\n    }\n    if (returnCollection) {\n      output = new mixitup.Collection(instances);\n    } else {\n      // Return the first instance regardless\n\n      output = instances[0];\n    }\n    return output;\n  };\n\n  /**\n   * The `.use()` static method is used to extend the functionality of mixitup with compatible\n   * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.\n   *\n   * You need only call the `.use()` function once per project, per extension, as module loaders\n   * will cache a single reference to MixItUp inclusive of all changes made.\n   *\n   * @example\n   * mixitup.use(extension)\n   *\n   * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>\n   *\n   * import mixitup from 'mixitup';\n   * import mixitupPagination from 'mixitup-pagination';\n   *\n   * mixitup.use(mixitupPagination);\n   *\n   * // All mixers created by the factory function in all modules will now\n   * // have pagination functionality\n   *\n   * var mixer = mixitup('.container');\n   *\n   * @public\n   * @name     use\n   * @memberof mixitup\n   * @kind     function\n   * @static\n   * @since    3.0.0\n   * @param    {*}  extension   A reference to the extension or library to be used.\n   * @return   {void}\n   */\n\n  mixitup.use = function (extension) {\n    mixitup.Base.prototype.callActions.call(mixitup, 'beforeUse', arguments);\n\n    // Call the extension's factory function, passing\n    // the mixitup factory as a paramater\n\n    if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {\n      // Mixitup extension\n\n      if (typeof mixitup.extensions[extension.NAME] === 'undefined') {\n        extension(mixitup);\n        mixitup.extensions[extension.NAME] = extension;\n      }\n    } else if (extension.fn && extension.fn.jquery) {\n      // jQuery\n\n      mixitup.libraries.$ = extension;\n    }\n    mixitup.Base.prototype.callActions.call(mixitup, 'afterUse', arguments);\n  };\n  mixitup.instances = {};\n  mixitup.extensions = {};\n  mixitup.libraries = {};\n\n  /**\n   * @private\n   */\n\n  h = {\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        cls\n     * @return  {boolean}\n     */\n\n    hasClass: function (el, cls) {\n      return !!el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        cls\n     * @return  {void}\n     */\n\n    addClass: function (el, cls) {\n      if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        cls\n     * @return  {void}\n     */\n\n    removeClass: function (el, cls) {\n      if (this.hasClass(el, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        el.className = el.className.replace(reg, ' ').trim();\n      }\n    },\n    /**\n     * Merges the properties of the source object onto the\n     * target object. Alters the target object.\n     *\n     * @private\n     * @param   {object}    destination\n     * @param   {object}    source\n     * @param   {boolean}   [deep=false]\n     * @param   {boolean}   [handleErrors=false]\n     * @return  {void}\n     */\n\n    extend: function (destination, source, deep, handleErrors) {\n      var sourceKeys = [],\n        key = '',\n        i = -1;\n      deep = deep || false;\n      handleErrors = handleErrors || false;\n      try {\n        if (Array.isArray(source)) {\n          for (i = 0; i < source.length; i++) {\n            sourceKeys.push(i);\n          }\n        } else if (source) {\n          sourceKeys = Object.keys(source);\n        }\n        for (i = 0; i < sourceKeys.length; i++) {\n          key = sourceKeys[i];\n          if (!deep || typeof source[key] !== 'object' || this.isElement(source[key])) {\n            // All non-object properties, or all properties if shallow extend\n\n            destination[key] = source[key];\n          } else if (Array.isArray(source[key])) {\n            // Arrays\n\n            if (!destination[key]) {\n              destination[key] = [];\n            }\n            this.extend(destination[key], source[key], deep, handleErrors);\n          } else {\n            // Objects\n\n            if (!destination[key]) {\n              destination[key] = {};\n            }\n            this.extend(destination[key], source[key], deep, handleErrors);\n          }\n        }\n      } catch (err) {\n        if (handleErrors) {\n          this.handleExtendError(err, destination);\n        } else {\n          throw err;\n        }\n      }\n      return destination;\n    },\n    /**\n     * @private\n     * @param   {Error}  err\n     * @param   {object} destination\n     * @return  {void}\n     */\n\n    handleExtendError: function (err, destination) {\n      var re = /property \"?(\\w*)\"?[,:] object/i,\n        matches = null,\n        erroneous = '',\n        message = '',\n        suggestion = '',\n        probableMatch = '',\n        key = '',\n        mostMatchingChars = -1,\n        i = -1;\n      if (err instanceof TypeError && (matches = re.exec(err.message))) {\n        erroneous = matches[1];\n        for (key in destination) {\n          i = 0;\n          while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {\n            i++;\n          }\n          if (i > mostMatchingChars) {\n            mostMatchingChars = i;\n            probableMatch = key;\n          }\n        }\n        if (mostMatchingChars > 1) {\n          suggestion = mixitup.messages.errorConfigInvalidPropertySuggestion({\n            probableMatch: probableMatch\n          });\n        }\n        message = mixitup.messages.errorConfigInvalidProperty({\n          erroneous: erroneous,\n          suggestion: suggestion\n        });\n        throw new TypeError(message);\n      }\n      throw err;\n    },\n    /**\n     * @private\n     * @param   {string} str\n     * @return  {function}\n     */\n\n    template: function (str) {\n      var re = /\\${([\\w]*)}/g,\n        dynamics = {},\n        matches = null;\n      while (matches = re.exec(str)) {\n        dynamics[matches[1]] = new RegExp('\\\\${' + matches[1] + '}', 'g');\n      }\n      return function (data) {\n        var key = '',\n          output = str;\n        data = data || {};\n        for (key in dynamics) {\n          output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');\n        }\n        return output;\n      };\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        type\n     * @param   {function}      fn\n     * @param   {boolean}       useCapture\n     * @return  {void}\n     */\n\n    on: function (el, type, fn, useCapture) {\n      if (!el) return;\n      if (el.addEventListener) {\n        el.addEventListener(type, fn, useCapture);\n      } else if (el.attachEvent) {\n        el['e' + type + fn] = fn;\n        el[type + fn] = function () {\n          el['e' + type + fn](window.event);\n        };\n        el.attachEvent('on' + type, el[type + fn]);\n      }\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        type\n     * @param   {function}      fn\n     * @return  {void}\n     */\n\n    off: function (el, type, fn) {\n      if (!el) return;\n      if (el.removeEventListener) {\n        el.removeEventListener(type, fn, false);\n      } else if (el.detachEvent) {\n        el.detachEvent('on' + type, el[type + fn]);\n        el[type + fn] = null;\n      }\n    },\n    /**\n     * @private\n     * @param   {string}      eventType\n     * @param   {object}      detail\n     * @param   {Document}    [doc]\n     * @return  {CustomEvent}\n     */\n\n    getCustomEvent: function (eventType, detail, doc) {\n      var event = null;\n      doc = doc || window.document;\n      if (typeof window.CustomEvent === 'function') {\n        event = new window.CustomEvent(eventType, {\n          detail: detail,\n          bubbles: true,\n          cancelable: true\n        });\n      } else if (typeof doc.createEvent === 'function') {\n        event = doc.createEvent('CustomEvent');\n        event.initCustomEvent(eventType, true, true, detail);\n      } else {\n        event = doc.createEventObject(), event.type = eventType;\n        event.returnValue = false;\n        event.cancelBubble = false;\n        event.detail = detail;\n      }\n      return event;\n    },\n    /**\n     * @private\n     * @param   {Event} e\n     * @return  {Event}\n     */\n\n    getOriginalEvent: function (e) {\n      if (e.touches && e.touches.length) {\n        return e.touches[0];\n      } else if (e.changedTouches && e.changedTouches.length) {\n        return e.changedTouches[0];\n      } else {\n        return e;\n      }\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        selector\n     * @return  {Number}\n     */\n\n    index: function (el, selector) {\n      var i = 0;\n      while ((el = el.previousElementSibling) !== null) {\n        if (!selector || el.matches(selector)) {\n          ++i;\n        }\n      }\n      return i;\n    },\n    /**\n     * Converts a dash or snake-case string to camel case.\n     *\n     * @private\n     * @param   {string}    str\n     * @param   {boolean}   [isPascal]\n     * @return  {string}\n     */\n\n    camelCase: function (str) {\n      return str.toLowerCase().replace(/([_-][a-z])/g, function ($1) {\n        return $1.toUpperCase().replace(/[_-]/, '');\n      });\n    },\n    /**\n     * Converts a dash or snake-case string to pascal case.\n     *\n     * @private\n     * @param   {string}    str\n     * @param   {boolean}   [isPascal]\n     * @return  {string}\n     */\n\n    pascalCase: function (str) {\n      return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);\n    },\n    /**\n     * Converts a camel or pascal-case string to dash case.\n     *\n     * @private\n     * @param   {string}    str\n     * @return  {string}\n     */\n\n    dashCase: function (str) {\n      return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}       el\n     * @param   {HTMLHtmlElement}   [doc]\n     * @return  {boolean}\n     */\n\n    isElement: function (el, doc) {\n      doc = doc || window.document;\n      if (window.HTMLElement && el instanceof window.HTMLElement) {\n        return true;\n      } else if (doc.defaultView && doc.defaultView.HTMLElement && el instanceof doc.defaultView.HTMLElement) {\n        return true;\n      } else {\n        return el !== null && el.nodeType === 1 && typeof el.nodeName === 'string';\n      }\n    },\n    /**\n     * @private\n     * @param   {string}            htmlString\n     * @param   {HTMLHtmlElement}   [doc]\n     * @return  {DocumentFragment}\n     */\n\n    createElement: function (htmlString, doc) {\n      var frag = null,\n        temp = null;\n      doc = doc || window.document;\n      frag = doc.createDocumentFragment();\n      temp = doc.createElement('div');\n      temp.innerHTML = htmlString.trim();\n      while (temp.firstChild) {\n        frag.appendChild(temp.firstChild);\n      }\n      return frag;\n    },\n    /**\n     * @private\n     * @param   {Node} node\n     * @return  {void}\n     */\n\n    removeWhitespace: function (node) {\n      var deleting;\n      while (node && node.nodeName === '#text') {\n        deleting = node;\n        node = node.previousSibling;\n        deleting.parentElement && deleting.parentElement.removeChild(deleting);\n      }\n    },\n    /**\n     * @private\n     * @param   {Array<*>}  a\n     * @param   {Array<*>}  b\n     * @return  {boolean}\n     */\n\n    isEqualArray: function (a, b) {\n      var i = a.length;\n      if (i !== b.length) return false;\n      while (i--) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    },\n    /**\n     * @private\n     * @param   {object}  a\n     * @param   {object}  b\n     * @return  {boolean}\n     */\n\n    deepEquals: function (a, b) {\n      var key;\n      if (typeof a === 'object' && a && typeof b === 'object' && b) {\n        if (Object.keys(a).length !== Object.keys(b).length) return false;\n        for (key in a) {\n          if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;\n        }\n      } else if (a !== b) {\n        return false;\n      }\n      return true;\n    },\n    /**\n     * @private\n     * @param   {Array<*>}  oldArray\n     * @return  {Array<*>}\n     */\n\n    arrayShuffle: function (oldArray) {\n      var newArray = oldArray.slice(),\n        len = newArray.length,\n        i = len,\n        p = -1,\n        t = [];\n      while (i--) {\n        p = ~~(Math.random() * len);\n        t = newArray[i];\n        newArray[i] = newArray[p];\n        newArray[p] = t;\n      }\n      return newArray;\n    },\n    /**\n     * @private\n     * @param   {object}    list\n     */\n\n    arrayFromList: function (list) {\n      var output, i;\n      try {\n        return Array.prototype.slice.call(list);\n      } catch (err) {\n        output = [];\n        for (i = 0; i < list.length; i++) {\n          output.push(list[i]);\n        }\n        return output;\n      }\n    },\n    /**\n     * @private\n     * @param   {function}  func\n     * @param   {Number}    wait\n     * @param   {boolean}   immediate\n     * @return  {function}\n     */\n\n    debounce: function (func, wait, immediate) {\n      var timeout;\n      return function () {\n        var self = this,\n          args = arguments,\n          callNow = immediate && !timeout,\n          later = null;\n        later = function () {\n          timeout = null;\n          if (!immediate) {\n            func.apply(self, args);\n          }\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(self, args);\n      };\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   element\n     * @return  {object}\n     */\n\n    position: function (element) {\n      var xPosition = 0,\n        yPosition = 0,\n        offsetParent = element;\n      while (element) {\n        xPosition -= element.scrollLeft;\n        yPosition -= element.scrollTop;\n        if (element === offsetParent) {\n          xPosition += element.offsetLeft;\n          yPosition += element.offsetTop;\n          offsetParent = element.offsetParent;\n        }\n        element = element.parentElement;\n      }\n      return {\n        x: xPosition,\n        y: yPosition\n      };\n    },\n    /**\n     * @private\n     * @param   {object}    node1\n     * @param   {object}    node2\n     * @return  {Number}\n     */\n\n    getHypotenuse: function (node1, node2) {\n      var distanceX = node1.x - node2.x,\n        distanceY = node1.y - node2.y;\n      distanceX = distanceX < 0 ? distanceX * -1 : distanceX, distanceY = distanceY < 0 ? distanceY * -1 : distanceY;\n      return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\n    },\n    /**\n     * Calcuates the area of intersection between two rectangles and expresses it as\n     * a ratio in comparison to the area of the first rectangle.\n     *\n     * @private\n     * @param   {Rect}  box1\n     * @param   {Rect}  box2\n     * @return  {number}\n     */\n\n    getIntersectionRatio: function (box1, box2) {\n      var controlArea = box1.width * box1.height,\n        intersectionX = -1,\n        intersectionY = -1,\n        intersectionArea = -1,\n        ratio = -1;\n      intersectionX = Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));\n      intersectionY = Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));\n      intersectionArea = intersectionY * intersectionX;\n      ratio = intersectionArea / controlArea;\n      return ratio;\n    },\n    /**\n     * @private\n     * @param   {object}            el\n     * @param   {string}            selector\n     * @param   {boolean}           [includeSelf]\n     * @param   {HTMLHtmlElement}   [doc]\n     * @return  {Element|null}\n     */\n\n    closestParent: function (el, selector, includeSelf, doc) {\n      var parent = el.parentNode;\n      doc = doc || window.document;\n      if (includeSelf && el.matches(selector)) {\n        return el;\n      }\n      while (parent && parent != doc.body) {\n        if (parent.matches && parent.matches(selector)) {\n          return parent;\n        } else if (parent.parentNode) {\n          parent = parent.parentNode;\n        } else {\n          return null;\n        }\n      }\n      return null;\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}       el\n     * @param   {string}            selector\n     * @param   {HTMLHtmlElement}   [doc]\n     * @return  {NodeList}\n     */\n\n    children: function (el, selector, doc) {\n      var children = [],\n        tempId = '';\n      doc = doc || window.doc;\n      if (el) {\n        if (!el.id) {\n          tempId = 'Temp' + this.randomHexKey();\n          el.id = tempId;\n        }\n        children = doc.querySelectorAll('#' + el.id + ' > ' + selector);\n        if (tempId) {\n          el.removeAttribute('id');\n        }\n      }\n      return children;\n    },\n    /**\n     * Creates a clone of a provided array, with any empty strings removed.\n     *\n     * @private\n     * @param   {Array<*>} originalArray\n     * @return  {Array<*>}\n     */\n\n    clean: function (originalArray) {\n      var cleanArray = [],\n        i = -1;\n      for (i = 0; i < originalArray.length; i++) {\n        if (originalArray[i] !== '') {\n          cleanArray.push(originalArray[i]);\n        }\n      }\n      return cleanArray;\n    },\n    /**\n     * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.\n     *\n     * @private\n     * @param  {object} libraries\n     * @return {h.Deferred}\n     */\n\n    defer: function (libraries) {\n      var deferred = null,\n        promiseWrapper = null,\n        $ = null;\n      promiseWrapper = new this.Deferred();\n      if (mixitup.features.has.promises) {\n        // ES6 native promise or polyfill\n\n        promiseWrapper.promise = new Promise(function (resolve, reject) {\n          promiseWrapper.resolve = resolve;\n          promiseWrapper.reject = reject;\n        });\n      } else if (($ = window.jQuery || libraries.$) && typeof $.Deferred === 'function') {\n        // jQuery\n\n        deferred = $.Deferred();\n        promiseWrapper.promise = deferred.promise();\n        promiseWrapper.resolve = deferred.resolve;\n        promiseWrapper.reject = deferred.reject;\n      } else if (window.console) {\n        // No implementation\n\n        console.warn(mixitup.messages.warningNoPromiseImplementation());\n      }\n      return promiseWrapper;\n    },\n    /**\n     * @private\n     * @param   {Array<Promise>}    tasks\n     * @param   {object}            libraries\n     * @return  {Promise<Array>}\n     */\n\n    all: function (tasks, libraries) {\n      var $ = null;\n      if (mixitup.features.has.promises) {\n        return Promise.all(tasks);\n      } else if (($ = window.jQuery || libraries.$) && typeof $.when === 'function') {\n        return $.when.apply($, tasks).done(function () {\n          // jQuery when returns spread arguments rather than an array or resolutions\n\n          return arguments;\n        });\n      }\n\n      // No implementation\n\n      if (window.console) {\n        console.warn(mixitup.messages.warningNoPromiseImplementation());\n      }\n      return [];\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @param   {string}        property\n     * @param   {Array<string>} vendors\n     * @return  {string}\n     */\n\n    getPrefix: function (el, property, vendors) {\n      var i = -1,\n        prefix = '';\n      if (h.dashCase(property) in el.style) return '';\n      for (i = 0; prefix = vendors[i]; i++) {\n        if (prefix + property in el.style) {\n          return prefix.toLowerCase();\n        }\n      }\n      return 'unsupported';\n    },\n    /**\n     * @private\n     * @return  {string}\n     */\n\n    randomHex: function () {\n      return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();\n    },\n    /**\n     * @private\n     * @param   {HTMLDocument}  [doc]\n     * @return  {object}\n     */\n\n    getDocumentState: function (doc) {\n      doc = typeof doc.body === 'object' ? doc : window.document;\n      return {\n        scrollTop: window.pageYOffset,\n        scrollLeft: window.pageXOffset,\n        docHeight: doc.documentElement.scrollHeight,\n        docWidth: doc.documentElement.scrollWidth,\n        viewportHeight: doc.documentElement.clientHeight,\n        viewportWidth: doc.documentElement.clientWidth\n      };\n    },\n    /**\n     * @private\n     * @param   {object}    obj\n     * @param   {function}  fn\n     * @return  {function}\n     */\n\n    bind: function (obj, fn) {\n      return function () {\n        return fn.apply(obj, arguments);\n      };\n    },\n    /**\n     * @private\n     * @param   {HTMLElement}   el\n     * @return  {boolean}\n     */\n\n    isVisible: function (el) {\n      var styles = null;\n      if (el.offsetParent) return true;\n      styles = window.getComputedStyle(el);\n      if (styles.position === 'fixed' && styles.visibility !== 'hidden' && styles.opacity !== '0') {\n        // Fixed elements report no offsetParent,\n        // but may still be invisible\n\n        return true;\n      }\n      return false;\n    },\n    /**\n     * @private\n     * @param   {object}    obj\n     */\n\n    seal: function (obj) {\n      if (typeof Object.seal === 'function') {\n        Object.seal(obj);\n      }\n    },\n    /**\n     * @private\n     * @param   {object}    obj\n     */\n\n    freeze: function (obj) {\n      if (typeof Object.freeze === 'function') {\n        Object.freeze(obj);\n      }\n    },\n    /**\n     * @private\n     * @param   {string}    control\n     * @param   {string}    specimen\n     * @return  {boolean}\n     */\n\n    compareVersions: function (control, specimen) {\n      var controlParts = control.split('.'),\n        specimenParts = specimen.split('.'),\n        controlPart = -1,\n        specimenPart = -1,\n        i = -1;\n      for (i = 0; i < controlParts.length; i++) {\n        controlPart = parseInt(controlParts[i].replace(/[^\\d.]/g, ''));\n        specimenPart = parseInt(specimenParts[i].replace(/[^\\d.]/g, '') || 0);\n        if (specimenPart < controlPart) {\n          return false;\n        } else if (specimenPart > controlPart) {\n          return true;\n        }\n      }\n      return true;\n    },\n    /**\n     * @private\n     * @constructor\n     */\n\n    Deferred: function () {\n      this.promise = null;\n      this.resolve = null;\n      this.reject = null;\n      this.id = h.randomHex();\n    },\n    /**\n     * @private\n     * @param   {object}  obj\n     * @return  {boolean}\n     */\n\n    isEmptyObject: function (obj) {\n      var key = '';\n      if (typeof Object.keys === 'function') {\n        return Object.keys(obj).length === 0;\n      }\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * @param   {mixitup.Config.ClassNames}   classNames\n     * @param   {string}                      elementName\n     * @param   {string}                      [modifier]\n     * @return  {string}\n     */\n\n    getClassname: function (classNames, elementName, modifier) {\n      var classname = '';\n      classname += classNames.block;\n      if (classname.length) {\n        classname += classNames.delineatorElement;\n      }\n      classname += classNames['element' + this.pascalCase(elementName)];\n      if (!modifier) return classname;\n      if (classname.length) {\n        classname += classNames.delineatorModifier;\n      }\n      classname += modifier;\n      return classname;\n    },\n    /**\n     * Returns the value of a property on a given object via its string key.\n     *\n     * @param   {object}    obj\n     * @param   {string}    stringKey\n     * @return  {*} value\n     */\n\n    getProperty: function (obj, stringKey) {\n      var parts = stringKey.split('.'),\n        returnCurrent = null,\n        current = '',\n        i = 0;\n      if (!stringKey) {\n        return obj;\n      }\n      returnCurrent = function (obj) {\n        if (!obj) {\n          return null;\n        } else {\n          return obj[current];\n        }\n      };\n      while (i < parts.length) {\n        current = parts[i];\n        obj = returnCurrent(obj);\n        i++;\n      }\n      if (typeof obj !== 'undefined') {\n        return obj;\n      } else {\n        return null;\n      }\n    }\n  };\n  mixitup.h = h;\n\n  /**\n   * The Base class adds instance methods to all other extensible MixItUp classes,\n   * enabling the calling of any registered hooks.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Base = function () {};\n  mixitup.Base.prototype = {\n    constructor: mixitup.Base,\n    /**\n     * Calls any registered hooks for the provided action.\n     *\n     * @memberof    mixitup.Base\n     * @private\n     * @instance\n     * @since       2.0.0\n     * @param       {string}    actionName\n     * @param       {Array<*>}  args\n     * @return      {void}\n     */\n\n    callActions: function (actionName, args) {\n      var self = this,\n        hooks = self.constructor.actions[actionName],\n        extensionName = '';\n      if (!hooks || h.isEmptyObject(hooks)) return;\n      for (extensionName in hooks) {\n        hooks[extensionName].apply(self, args);\n      }\n    },\n    /**\n     * Calls any registered hooks for the provided filter.\n     *\n     * @memberof    mixitup.Base\n     * @private\n     * @instance\n     * @since       2.0.0\n     * @param       {string}    filterName\n     * @param       {*}         input\n     * @param       {Array<*>}  args\n     * @return      {*}\n     */\n\n    callFilters: function (filterName, input, args) {\n      var self = this,\n        hooks = self.constructor.filters[filterName],\n        output = input,\n        extensionName = '';\n      if (!hooks || h.isEmptyObject(hooks)) return output;\n      args = args || [];\n      for (extensionName in hooks) {\n        args = h.arrayFromList(args);\n        args.unshift(output);\n        output = hooks[extensionName].apply(self, args);\n      }\n      return output;\n    }\n  };\n\n  /**\n   * The BaseStatic class holds a set of static methods which are then added to all other\n   * extensible MixItUp classes as a means of integrating extensions via the addition of new\n   * methods and/or actions and hooks.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.BaseStatic = function () {\n    this.actions = {};\n    this.filters = {};\n\n    /**\n     * Performs a shallow extend on the class's prototype, adding one or more new members to\n     * the class in a single operation.\n     *\n     * @memberof    mixitup.BaseStatic\n     * @public\n     * @static\n     * @since       2.1.0\n     * @param       {object} extension\n     * @return      {void}\n     */\n\n    this.extend = function (extension) {\n      h.extend(this.prototype, extension);\n    };\n\n    /**\n     * Registers a function to be called on the action hook of the provided name.\n     *\n     * @memberof    mixitup.BaseStatic\n     * @public\n     * @static\n     * @since       2.1.0\n     * @param       {string}    hookName\n     * @param       {string}    extensionName\n     * @param       {function}  func\n     * @return      {void}\n     */\n\n    this.registerAction = function (hookName, extensionName, func) {\n      (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;\n    };\n\n    /**\n     * Registers a function to be called on the filter of the provided name.\n     *\n     * @memberof    mixitup.BaseStatic\n     * @public\n     * @static\n     * @since       2.1.0\n     * @param       {string}    hookName\n     * @param       {string}    extensionName\n     * @param       {function}  func\n     * @return      {void}\n     */\n\n    this.registerFilter = function (hookName, extensionName, func) {\n      (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;\n    };\n  };\n\n  /**\n   * The `mixitup.Features` class performs all feature and CSS prefix detection\n   * neccessary for MixItUp to function correctly, as well as storing various\n   * string and array constants. All feature decection is on evaluation of the\n   * library and stored in a singleton instance for use by other internal classes.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Features = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.boxSizingPrefix = '';\n    this.transformPrefix = '';\n    this.transitionPrefix = '';\n    this.boxSizingPrefix = '';\n    this.transformProp = '';\n    this.transformRule = '';\n    this.transitionProp = '';\n    this.perspectiveProp = '';\n    this.perspectiveOriginProp = '';\n    this.has = new mixitup.Has();\n    this.canary = null;\n    this.BOX_SIZING_PROP = 'boxSizing';\n    this.TRANSITION_PROP = 'transition';\n    this.TRANSFORM_PROP = 'transform';\n    this.PERSPECTIVE_PROP = 'perspective';\n    this.PERSPECTIVE_ORIGIN_PROP = 'perspectiveOrigin';\n    this.VENDORS = ['Webkit', 'moz', 'O', 'ms'];\n    this.TWEENABLE = ['opacity', 'width', 'height', 'marginRight', 'marginBottom', 'x', 'y', 'scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'];\n    this.callActions('afterConstruct');\n  };\n  mixitup.BaseStatic.call(mixitup.Features);\n  mixitup.Features.prototype = Object.create(mixitup.Base.prototype);\n  h.extend(mixitup.Features.prototype, /** @lends mixitup.Features */\n  {\n    constructor: mixitup.Features,\n    /**\n     * @private\n     * @return  {void}\n     */\n\n    init: function () {\n      var self = this;\n      self.callActions('beforeInit', arguments);\n      self.canary = document.createElement('div');\n      self.setPrefixes();\n      self.runTests();\n      self.callActions('beforeInit', arguments);\n    },\n    /**\n     * @private\n     * @return  {void}\n     */\n\n    runTests: function () {\n      var self = this;\n      self.callActions('beforeRunTests', arguments);\n      self.has.promises = typeof window.Promise === 'function';\n      self.has.transitions = self.transitionPrefix !== 'unsupported';\n      self.callActions('afterRunTests', arguments);\n      h.freeze(self.has);\n    },\n    /**\n     * @private\n     * @return  {void}\n     */\n\n    setPrefixes: function () {\n      var self = this;\n      self.callActions('beforeSetPrefixes', arguments);\n      self.transitionPrefix = h.getPrefix(self.canary, 'Transition', self.VENDORS);\n      self.transformPrefix = h.getPrefix(self.canary, 'Transform', self.VENDORS);\n      self.boxSizingPrefix = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);\n      self.boxSizingProp = self.boxSizingPrefix ? self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;\n      self.transitionProp = self.transitionPrefix ? self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;\n      self.transformProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;\n      self.transformRule = self.transformPrefix ? '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;\n      self.perspectiveProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;\n      self.perspectiveOriginProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) : self.PERSPECTIVE_ORIGIN_PROP;\n      self.callActions('afterSetPrefixes', arguments);\n    }\n  });\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Has = function () {\n    this.transitions = false;\n    this.promises = false;\n    h.seal(this);\n  };\n\n  // Assign a singleton instance to `mixitup.features` and initialise:\n\n  mixitup.features = new mixitup.Features();\n  mixitup.features.init();\n\n  /**\n   * A group of properties defining the mixer's animation and effects settings.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        animation\n   * @namespace\n   * @public\n   * @since       2.0.0\n   */\n\n  mixitup.ConfigAnimation = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A boolean dictating whether or not animation should be enabled for the MixItUp instance.\n     * If `false`, all operations will occur instantly and syncronously, although callback\n     * functions and any returned promises will still be fulfilled.\n     *\n     * @example <caption>Example: Create a mixer with all animations disabled</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         enable: false\n     *     }\n     * });\n     *\n     * @name        enable\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.enable = true;\n\n    /**\n     * A string of one or more space-separated properties to which transitions will be\n     * applied for all filtering animations.\n     *\n     * Properties can be listed any order or combination, although they will be applied in a specific\n     * predefined order to produce consistent results.\n     *\n     * To learn more about available effects, experiment by providing different animation configurations to any of our [demos](https://patrickunka.github.io/mixitup/demos).\n     *\n     * @example <caption>Example: Apply \"fade\" and \"translateZ\" effects to all animations</caption>\n     * // As targets are filtered in and out, they will fade between\n     * // opacity 1 and 0 and transform between translateZ(-100px) and\n     * // translateZ(0).\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade translateZ(-100px)'\n     *     }\n     * });\n     *\n     * @name        effects\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     'fade scale'\n     */\n\n    this.effects = 'fade scale';\n\n    /**\n     * A string of one or more space-seperated effects to be applied only to filter-in\n     * animations, overriding `config.animation.effects` if set.\n     *\n     * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effectsIn: 'fade translateY(-100%)'\n     *     }\n     * });\n     *\n     * @name        effectsIn\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.effectsIn = '';\n\n    /**\n     * A string of one or more space-seperated effects to be applied only to filter-out\n     * animations, overriding `config.animation.effects` if set.\n     *\n     * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effectsOut: 'fade translateY(-100%)'\n     *     }\n     * });\n     *\n     * @name        effectsOut\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.effectsOut = '';\n\n    /**\n     * An integer dictating the duration of all MixItUp animations in milliseconds, not\n     * including any additional delay apllied via the `'stagger'` effect.\n     *\n     * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         duration: 200\n     *     }\n     * });\n     *\n     * @name        duration\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {number}\n     * @default     600\n     */\n\n    this.duration = 600;\n\n    /**\n     * A valid CSS3 transition-timing function or shorthand. For a full list of accepted\n     * values, visit <a href=\"http://easings.net\" target=\"_blank\">easings.net</a>.\n     *\n     * @example <caption>Example 1: Apply \"ease-in-out\" easing to all animations</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         easing: 'ease-in-out'\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Apply a custom \"cubic-bezier\" easing function to all animations</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'\n     *     }\n     * });\n     *\n     * @name        easing\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     'ease'\n     */\n\n    this.easing = 'ease';\n\n    /**\n     * A boolean dictating whether or not to apply perspective to the MixItUp container\n     * during animations. By default, perspective is always applied and creates the\n     * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,\n     * and `rotateY`.\n     *\n     * You may wish to disable this and define your own perspective settings via CSS.\n     *\n     * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         applyPerspective: false\n     *     }\n     * });\n     *\n     * @name        applyPerspective\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {bolean}\n     * @default     true\n     */\n\n    this.applyPerspective = true;\n\n    /**\n     * The perspective distance value to be applied to the container during animations,\n     * affecting any 3D-transform-based effects.\n     *\n     * @example <caption>Example: Set a perspective distance of 2000px</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'rotateY(-25deg)',\n     *         perspectiveDistance: '2000px'\n     *     }\n     * });\n     *\n     * @name        perspectiveDistance\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     '3000px'\n     */\n\n    this.perspectiveDistance = '3000px';\n\n    /**\n     * The perspective-origin value to be applied to the container during animations,\n     * affecting any 3D-transform-based effects.\n     *\n     * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'transateZ(-200px)',\n     *         perspectiveOrigin: '100% 0'\n     *     }\n     * });\n     *\n     * @name        perspectiveOrigin\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {string}\n     * @default     '50% 50%'\n     */\n\n    this.perspectiveOrigin = '50% 50%';\n\n    /**\n     * A boolean dictating whether or not to enable the queuing of operations.\n     *\n     * If `true` (default), and a control is clicked or an API call is made while another\n     * operation is progress, the operation will go into the queue and will be automatically exectuted\n     * when the previous operaitons is finished.\n     *\n     * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`\n     * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.\n     *\n     * @example <caption>Example: Disable queuing</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         queue: false\n     *     }\n     * });\n     *\n     * @name        queue\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.queue = true;\n\n    /**\n     * An integer dictacting the maximum number of operations allowed in the queue at\n     * any time, when queuing is enabled.\n     *\n     * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         queueLimit: 5\n     *     }\n     * });\n     *\n     * @name        queueLimit\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {number}\n     * @default     3\n     */\n\n    this.queueLimit = 3;\n\n    /**\n     * A boolean dictating whether or not to transition the height and width of the\n     * container as elements are filtered in and out. If disabled, the container height\n     * will change abruptly.\n     *\n     * It may be desirable to disable this on mobile devices as the CSS `height` and\n     * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.\n     *\n     * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         animateResizeContainer: false\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         animateResizeContainer: myFeatureTests.isMobile ? false : true\n     *     }\n     * });\n     *\n     * @name        animateResizeContainer\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.animateResizeContainer = true;\n\n    /**\n     * A boolean dictating whether or not to transition the height and width of target\n     * elements as they change throughout the course of an animation.\n     *\n     * This is often a must for flex-box grid layouts where the size of target elements may change\n     * depending on final their position in relation to their siblings, or for `.changeLayout()`\n     * operations where the size of targets change between layouts.\n     *\n     * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated\n     * properties which may adversely affect performance on slower devices, and is therefore\n     * disabled by default.\n     *\n     * @example <caption>Example: Enable the transitioning of target widths and heights</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         animateResizeTargets: true\n     *     }\n     * });\n     *\n     * @name        animateResizeTargets\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.animateResizeTargets = false;\n\n    /**\n     * A custom function used to manipulate the order in which the stagger delay is\n     * incremented when using the ‘stagger’ effect.\n     *\n     * When using the 'stagger' effect, the delay applied to each target element is incremented\n     * based on its index. You may create a custom function to manipulate the order in which the\n     * delay is incremented and create engaging non-linear stagger effects.\n     *\n     * The function receives the index of the target element as a parameter, and must\n     * return an integer which serves as the multiplier for the stagger delay.\n     *\n     * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade stagger(100ms)',\n     *         staggerSequence: function(i) {\n     *             return i % 3;\n     *         }\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade stagger(100ms)',\n     *         staggerSequence: function(i) {\n     *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));\n     *         }\n     *     }\n     * });\n     *\n     * @name        staggerSequence\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.staggerSequence = null;\n\n    /**\n     * A boolean dictating whether or not to reverse the direction of `translate`\n     * and `rotate` transforms for elements being filtered out.\n     *\n     * It can be used to create carousel-like animations where elements enter and exit\n     * from opposite directions. If enabled, the effect `translateX(-100%)` for elements\n     * being filtered in would become `translateX(100%)` for targets being filtered out.\n     *\n     * This functionality can also be achieved by providing seperate effects\n     * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.\n     *\n     * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>\n     * // Elements being filtered in will be translated from '100%' to '0' while\n     * // elements being filtered out will be translated from 0 to '-100%'\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade translateX(100%)',\n     *         reverseOut: true,\n     *         nudge: false // Disable nudging to create a carousel-like effect\n     *     }\n     * });\n     *\n     * @name        reverseOut\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.reverseOut = false;\n\n    /**\n     * A boolean dictating whether or not to \"nudge\" the animation path of targets\n     * when they are being filtered in and out simulatenously.\n     *\n     * This has been the default behavior of MixItUp since version 1, but it\n     * may be desirable to disable this effect when filtering directly from\n     * one exclusive set of targets to a different exclusive set of targets,\n     * to create a carousel-like effect, or a generally more subtle animation.\n     *\n     * @example <caption>Example: Disable the \"nudging\" of targets being filtered in and out simulatenously</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         nudge: false\n     *     }\n     * });\n     *\n     * @name        nudge\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.nudge = true;\n\n    /**\n     * A boolean dictating whether or not to clamp the height of the container while MixItUp's\n     * geometry tests are carried out before an operation.\n     *\n     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n     * height of the container might affect its vertical positioning in the viewport\n     * (e.g. a vertically-centered container), this should be turned off to ensure accurate\n     * test results and a smooth animation.\n     *\n     * @example <caption>Example: Disable container height-clamping</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         clampHeight: false\n     *     }\n     * });\n     *\n     * @name        clampHeight\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.clampHeight = true;\n\n    /**\n     * A boolean dictating whether or not to clamp the width of the container while MixItUp's\n     * geometry tests are carried out before an operation.\n     *\n     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n     * width of the container might affect its horitzontal positioning in the viewport\n     * (e.g. a horizontall-centered container), this should be turned off to ensure accurate\n     * test results and a smooth animation.\n     *\n     * @example <caption>Example: Disable container width-clamping</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         clampWidth: false\n     *     }\n     * });\n     *\n     * @name        clampWidth\n     * @memberof    mixitup.Config.animation\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.clampWidth = true;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigAnimation);\n  mixitup.ConfigAnimation.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigAnimation.prototype.constructor = mixitup.ConfigAnimation;\n\n  /**\n   * A group of properties relating to the behavior of the Mixer.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        behavior\n   * @namespace\n   * @public\n   * @since       3.1.12\n   */\n\n  mixitup.ConfigBehavior = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A boolean dictating whether to allow \"live\" sorting of the mixer.\n     *\n     * Because of the expensive nature of sorting, MixItUp makes use of several\n     * internal optimizations to skip redundant sorting operations, such as when\n     * the newly requested sort command is the same as the active one. The caveat\n     * to this optimization is that \"live\" edits to the value of a target's sorting\n     * attribute will be ignored when requesting a re-sort by the same attribute.\n     *\n     * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort\n     * regardless of whether or not the sorting attribute and order have changed.\n     *\n     * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     behavior: {\n     *         liveSort: true\n     *     },\n     *     load: {\n     *         sort: 'edited:desc'\n     *     }\n     * });\n     *\n     * var target = containerEl.children[3];\n     *\n     * console.log(target.getAttribute('data-edited')); // '2015-04-24'\n     *\n     * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date\n     *\n     * mixer.sort('edited:desc')\n     *     .then(function(state) {\n     *         // The target is now at the top of the list\n     *\n     *         console.log(state.targets[0] === target); // true\n     *     });\n     *\n     * @name        liveSort\n     * @memberof    mixitup.Config.behavior\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.liveSort = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigBehavior);\n  mixitup.ConfigBehavior.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigBehavior.prototype.constructor = mixitup.ConfigBehavior;\n\n  /**\n   * A group of optional callback functions to be invoked at various\n   * points within the lifecycle of a mixer operation.\n   *\n   * Each function is analogous to an event of the same name triggered from the\n   * container element, and is invoked immediately after it.\n   *\n   * All callback functions receive the current `state` object as their first\n   * argument, as well as other more specific arguments described below.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        callbacks\n   * @namespace\n   * @public\n   * @since       2.0.0\n   */\n\n  mixitup.ConfigCallbacks = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A callback function invoked immediately after any MixItUp operation is requested\n     * and before animations have begun.\n     *\n     * A second `futureState` argument is passed to the function which represents the final\n     * state of the mixer once the requested operation has completed.\n     *\n     * @example <caption>Example: Adding an `onMixStart` callback function</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixStart: function(state, futureState) {\n     *              console.log('Starting operation...');\n     *         }\n     *     }\n     * });\n     *\n     * @name        onMixStart\n     * @memberof    mixitup.Config.callbacks\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.onMixStart = null;\n\n    /**\n     * A callback function invoked when a MixItUp operation is requested while another\n     * operation is in progress, and the animation queue is full, or queueing\n     * is disabled.\n     *\n     * @example <caption>Example: Adding an `onMixBusy` callback function</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixBusy: function(state) {\n     *              console.log('Mixer busy');\n     *         }\n     *     }\n     * });\n     *\n     * @name        onMixBusy\n     * @memberof    mixitup.Config.callbacks\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.onMixBusy = null;\n\n    /**\n     * A callback function invoked after any MixItUp operation has completed, and the\n     * state has been updated.\n     *\n     * @example <caption>Example: Adding an `onMixEnd` callback function</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixEnd: function(state) {\n     *              console.log('Operation complete');\n     *         }\n     *     }\n     * });\n     *\n     * @name        onMixEnd\n     * @memberof    mixitup.Config.callbacks\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.onMixEnd = null;\n\n    /**\n     * A callback function invoked whenever an operation \"fails\", i.e. no targets\n     * could be found matching the requested filter.\n     *\n     * @example <caption>Example: Adding an `onMixFail` callback function</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixFail: function(state) {\n     *              console.log('No items could be found matching the requested filter');\n     *         }\n     *     }\n     * });\n     *\n     * @name        onMixFail\n     * @memberof    mixitup.Config.callbacks\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.onMixFail = null;\n\n    /**\n     * A callback function invoked whenever a MixItUp control is clicked, and before its\n     * respective operation is requested.\n     *\n     * The clicked element is assigned to the `this` keyword within the function. The original\n     * click event is passed to the function as the second argument, which can be useful if\n     * using `<a>` tags as controls where the default behavior needs to be prevented.\n     *\n     * Returning `false` from the callback will prevent the control click from triggering\n     * an operation.\n     *\n     * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixClick: function(state, originalEvent) {\n     *              console.log('The control \"' + this.innerText + '\" was clicked');\n     *         }\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixClick: function(state, originalEvent) {\n     *              // Prevent original click event from bubbling up:\n     *              originalEvent.stopPropagation();\n     *\n     *              // Prevent default behavior of clicked element:\n     *              originalEvent.preventDefault();\n     *         }\n     *     }\n     * });\n     *\n     * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>\n     * var mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixClick: function(state, originalEvent) {\n     *              // Perform some conditional check:\n     *\n     *              if (myApp.isLoading) {\n     *                  // By returning false, we can prevent the control click from triggering an operation.\n     *\n     *                  return false;\n     *              }\n     *         }\n     *     }\n     * });\n     *\n     * @name        onMixClick\n     * @memberof    mixitup.Config.callbacks\n     * @instance\n     * @type        {function}\n     * @default     null\n     */\n\n    this.onMixClick = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigCallbacks);\n  mixitup.ConfigCallbacks.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigCallbacks.prototype.constructor = mixitup.ConfigCallbacks;\n\n  /**\n   * A group of properties relating to clickable control elements.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        controls\n   * @namespace\n   * @public\n   * @since       2.0.0\n   */\n\n  mixitup.ConfigControls = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A boolean dictating whether or not controls should be enabled for the mixer instance.\n     *\n     * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with\n     * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.\n     *\n     * If `false`, no click handlers will be bound, and all functionality must therefore be performed\n     * via the mixer's API methods.\n     *\n     * If you do not intend to use the default controls, setting this property to `false` will\n     * marginally improve the startup time of your mixer instance, and will also prevent any other active\n     * mixer instances in the DOM which are bound to controls from controlling the instance.\n     *\n     * @example <caption>Example: Disabling controls</caption>\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         enable: false\n     *     }\n     * });\n     *\n     * // With the default controls disabled, we can only control\n     * // the mixer via its API methods, e.g.:\n     *\n     * mixer.filter('.cat-1');\n     *\n     * @name        enable\n     * @memberof    mixitup.Config.controls\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.enable = true;\n\n    /**\n     * A boolean dictating whether or not to use event delegation when binding click events\n     * to the default controls.\n     *\n     * If `false` (default behavior), each control button in the DOM will be found and\n     * individually bound when a mixer is instantiated, with their corresponding actions\n     * cached for performance.\n     *\n     * If `true`, a single click handler will be applied to the `window` (or container element - see\n     * `config.controls.scope`), and any click events triggered by elements with `data-filter`,\n     * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.\n     *\n     * If you require a user interface where control buttons may be added, removed, or changed during the\n     * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable\n     * performance deficit when using live controls, as the value of each control button must be read\n     * from the DOM in real time once the click event has propagated.\n     *\n     * @example <caption>Example: Setting live controls</caption>\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         live: true\n     *     }\n     * });\n     *\n     * // Control buttons can now be added, remove and changed without breaking\n     * // the mixer's UI\n     *\n     * @name        live\n     * @memberof    mixitup.Config.controls\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.live = false;\n\n    /**\n     * A string dictating the \"scope\" to use when binding or querying the default controls. The available\n     * values are `'global'` or `'local'`.\n     *\n     * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons\n     * to bind, or delegate click events from (see `config.controls.live`).\n     *\n     * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.\n     * This may be desireable if you require multiple active mixer instances within the same document, with\n     * controls that would otherwise intefere with each other if scoped globally.\n     *\n     * Conversely, if you wish to control multiple instances with a single UI, you would create one\n     * set of controls and keep the controls scope of each mixer set to `global`.\n     *\n     * @example <caption>Example: Setting 'local' scoped controls</caption>\n     * var mixerOne = mixitup(containerOne, {\n     *     controls: {\n     *         scope: 'local'\n     *     }\n     * });\n     *\n     * var mixerTwo = mixitup(containerTwo, {\n     *     controls: {\n     *         scope: 'local'\n     *     }\n     * });\n     *\n     * // Both mixers can now exist within the same document with\n     * // isolated controls placed within their container elements.\n     *\n     * @name        scope\n     * @memberof    mixitup.Config.controls\n     * @instance\n     * @type        {string}\n     * @default     'global'\n     */\n\n    this.scope = 'global'; // enum: ['local' ,'global']\n\n    /**\n     * A string dictating the type of logic to apply when concatenating the filter selectors of\n     * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).\n     *\n     * If set to `'or'` (default behavior), selectors will be concatenated together as\n     * a comma-seperated list. For example:\n     *\n     * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)\n     *\n     * If set to `'and'`, selectors will be directly concatenated together. For example:\n     *\n     * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)\n     *\n     * @example <caption>Example: Setting \"and\" toggle logic</caption>\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         toggleLogic: 'and'\n     *     }\n     * });\n     *\n     * @name        toggleLogic\n     * @memberof    mixitup.Config.controls\n     * @instance\n     * @type        {string}\n     * @default     'or'\n     */\n\n    this.toggleLogic = 'or'; // enum: ['or', 'and']\n\n    /**\n     * A string dictating the filter behavior when all toggles are inactive.\n     *\n     * When set to `'all'` (default behavior), *all* targets will be shown by default\n     * when no toggles are active, or at the moment all active toggles are toggled off.\n     *\n     * When set to `'none'`, no targets will be shown by default when no toggles are\n     * active, or at the moment all active toggles are toggled off.\n     *\n     * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         toggleDefault: 'all'\n     *     }\n     * });\n     *\n     * mixer.toggleOn('.cat-2')\n     *     .then(function() {\n     *         // Deactivate all active toggles\n     *\n     *         return mixer.toggleOff('.cat-2')\n     *     })\n     *     .then(function(state) {\n     *          console.log(state.activeFilter.selector); // 'all'\n     *          console.log(state.totalShow); // 12\n     *     });\n     *\n     * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         toggleDefault: 'none'\n     *     }\n     * });\n     *\n     * mixer.toggleOn('.cat-2')\n     *     .then(function() {\n     *         // Deactivate all active toggles\n     *\n     *         return mixer.toggleOff('.cat-2')\n     *     })\n     *     .then(function(state) {\n     *          console.log(state.activeFilter.selector); // 'none'\n     *          console.log(state.totalShow); // 0\n     *     });\n     *\n     * @name        toggleDefault\n     * @memberof    mixitup.Config.controls\n     * @instance\n     * @type        {string}\n     * @default     'all'\n     */\n\n    this.toggleDefault = 'all'; // enum: ['all', 'none']\n\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigControls);\n  mixitup.ConfigControls.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigControls.prototype.constructor = mixitup.ConfigControls;\n\n  /**\n   * A group of properties defining the output and structure of class names programmatically\n   * added to controls and containers to reflect the state of the mixer.\n   *\n   * Most commonly, class names are added to controls by MixItUp to indicate that\n   * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.\n   *\n   * Using a \"BEM\" like structure, each classname is broken into the three parts:\n   * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier\n   * name (e.g. `'active'`) reflecting the state of the element.\n   *\n   * By default, each part of the classname is concatenated together using single hyphens as\n   * delineators, but this can be easily customised to match the naming convention and style of\n   * your project.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        classNames\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigClassNames = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * The \"block\" portion, or top-level namespace added to the start of any class names created by MixItUp.\n     *\n     * @example <caption>Example 1: changing the `config.classNames.block` value</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: 'portfolio'\n     *     }\n     * });\n     *\n     * // Active control output: \"portfolio-control-active\"\n     *\n     * @example <caption>Example 2: Removing `config.classNames.block`</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: ''\n     *     }\n     * });\n     *\n     * // Active control output: \"control-active\"\n     *\n     * @name        block\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'mixitup'\n     */\n\n    this.block = 'mixitup';\n\n    /**\n     * The \"element\" portion of the class name added to container.\n     *\n     * @name        elementContainer\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'container'\n     */\n\n    this.elementContainer = 'container';\n\n    /**\n     * The \"element\" portion of the class name added to filter controls.\n     *\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n     *\n     * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         elementFilter: 'filter'\n     *     }\n     * });\n     *\n     * // Active filter output: \"mixitup-filter-active\"\n     *\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: 'portfolio',\n     *         elementFilter: 'filter'\n     *     }\n     * });\n     *\n     * // Active filter output: \"portfolio-filter-active\"\n     *\n     * @name        elementFilter\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'control'\n     */\n\n    this.elementFilter = 'control';\n\n    /**\n     * The \"element\" portion of the class name added to sort controls.\n     *\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n     *\n     * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         elementSort: 'sort'\n     *     }\n     * });\n     *\n     * // Active sort output: \"mixitup-sort-active\"\n     *\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: 'portfolio',\n     *         elementSort: 'sort'\n     *     }\n     * });\n     *\n     * // Active sort output: \"portfolio-sort-active\"\n     *\n     * @name        elementSort\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'control'\n     */\n\n    this.elementSort = 'control';\n\n    /**\n     * The \"element\" portion of the class name added to multimix controls.\n     *\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n     *\n     * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         elementMultimix: 'multimix'\n     *     }\n     * });\n     *\n     * // Active multimix output: \"mixitup-multimix-active\"\n     *\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: 'portfolio',\n     *         elementSort: 'multimix'\n     *     }\n     * });\n     *\n     * // Active multimix output: \"portfolio-multimix-active\"\n     *\n     * @name        elementMultimix\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'control'\n     */\n\n    this.elementMultimix = 'control';\n\n    /**\n     * The \"element\" portion of the class name added to toggle controls.\n     *\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n     *\n     * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         elementToggle: 'toggle'\n     *     }\n     * });\n     *\n     * // Active toggle output: \"mixitup-toggle-active\"\n     *\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         block: 'portfolio',\n     *         elementToggle: 'toggle'\n     *     }\n     * });\n     *\n     * // Active toggle output: \"portfolio-toggle-active\"\n     *\n     * @name        elementToggle\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'control'\n     */\n\n    this.elementToggle = 'control';\n\n    /**\n     * The \"modifier\" portion of the class name added to active controls.\n     * @name        modifierActive\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'active'\n     */\n\n    this.modifierActive = 'active';\n\n    /**\n     * The \"modifier\" portion of the class name added to disabled controls.\n     *\n     * @name        modifierDisabled\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'disabled'\n     */\n\n    this.modifierDisabled = 'disabled';\n\n    /**\n     * The \"modifier\" portion of the class name added to the container when in a \"failed\" state.\n     *\n     * @name        modifierFailed\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     'failed'\n     */\n\n    this.modifierFailed = 'failed';\n\n    /**\n     * The delineator used between the \"block\" and \"element\" portions of any class name added by MixItUp.\n     *\n     * If the block portion is ommited by setting it to an empty string, no delineator will be added.\n     *\n     * @example <caption>Example: changing the delineator to match BEM convention</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         delineatorElement: '__'\n     *     }\n     * });\n     *\n     * // example active control output: \"mixitup__control-active\"\n     *\n     * @name        delineatorElement\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     '-'\n     */\n\n    this.delineatorElement = '-';\n\n    /**\n     * The delineator used between the \"element\" and \"modifier\" portions of any class name added by MixItUp.\n     *\n     * If the element portion is ommited by setting it to an empty string, no delineator will be added.\n     *\n     * @example <caption>Example: changing both delineators to match BEM convention</caption>\n     * var mixer = mixitup(containerEl, {\n     *     classNames: {\n     *         delineatorElement: '__'\n     *         delineatorModifier: '--'\n     *     }\n     * });\n     *\n     * // Active control output: \"mixitup__control--active\"\n     *\n     * @name        delineatorModifier\n     * @memberof    mixitup.Config.classNames\n     * @instance\n     * @type        {string}\n     * @default     '-'\n     */\n\n    this.delineatorModifier = '-';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigClassNames);\n  mixitup.ConfigClassNames.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigClassNames.prototype.constructor = mixitup.ConfigClassNames;\n\n  /**\n   * A group of properties relating to MixItUp's dataset API.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        data\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigData = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A string specifying the name of the key containing your data model's unique\n     * identifier (UID). To use the dataset API, a UID key must be specified and\n     * be present and unique on all objects in the dataset you provide to MixItUp.\n     *\n     * For example, if your dataset is made up of MongoDB documents, the UID\n     * key would be `'id'` or `'_id'`.\n     *\n     * @example <caption>Example: Setting the UID to `'id'`</caption>\n     * var mixer = mixitup(containerEl, {\n     *     data: {\n     *         uidKey: 'id'\n     *     }\n     * });\n     *\n     * @name        uidKey\n     * @memberof    mixitup.Config.data\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.uidKey = '';\n\n    /**\n     * A boolean dictating whether or not MixItUp should \"dirty check\" each object in\n     * your dataset for changes whenever `.dataset()` is called, and re-render any targets\n     * for which a change is found.\n     *\n     * Depending on the complexity of your data model, dirty checking can be expensive\n     * and is therefore disabled by default.\n     *\n     * NB: For changes to be detected, a new immutable instance of the edited model must be\n     * provided to mixitup, rather than manipulating properties on the existing instance.\n     * If your changes are a result of a DB write and read, you will most likely be calling\n     * `.dataset()` with a clean set of objects each time, so this will not be an issue.\n     *\n     * @example <caption>Example: Enabling dirty checking</caption>\n     *\n     * var myDataset = [\n     *     {\n     *         id: 0,\n     *         title: \"Blog Post Title 0\"\n     *         ...\n     *     },\n     *     {\n     *         id: 1,\n     *         title: \"Blog Post Title 1\"\n     *         ...\n     *     }\n     * ];\n     *\n     * // Instantiate a mixer with a pre-loaded dataset, and a target renderer\n     * // function defined\n     *\n     * var mixer = mixitup(containerEl, {\n     *     data: {\n     *         uidKey: 'id',\n     *         dirtyCheck: true\n     *     },\n     *     load: {\n     *         dataset: myDataset\n     *     },\n     *     render: {\n     *         target: function() { ... }\n     *     }\n     * });\n     *\n     * // For illustration, we will clone and edit the second object in the dataset.\n     * // NB: this would typically be done server-side in response to a DB update,\n     * and then re-queried via an API.\n     *\n     * myDataset[1] = Object.assign({}, myDataset[1]);\n     *\n     * myDataset[1].title = 'Blog Post Title 11';\n     *\n     * mixer.dataset(myDataset)\n     *    .then(function() {\n     *        // the target with ID \"1\", will be re-rendered reflecting its new title\n     *    });\n     *\n     * @name        dirtyCheck\n     * @memberof    mixitup.Config.data\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.dirtyCheck = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigData);\n  mixitup.ConfigData.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigData.prototype.constructor = mixitup.ConfigData;\n\n  /**\n   * A group of properties allowing the toggling of various debug features.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        debug\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigDebug = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A boolean dictating whether or not the mixer instance returned by the\n     * `mixitup()` factory function should expose private properties and methods.\n     *\n     * By default, mixer instances only expose their public API, but enabling\n     * debug mode will give you access to various mixer internals which may aid\n     * in debugging, or the authoring of extensions.\n     *\n     * @example <caption>Example: Enabling debug mode</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     debug: {\n     *         enable: true\n     *     }\n     * });\n     *\n     * // Private properties and methods will now be visible on the mixer instance:\n     *\n     * console.log(mixer);\n     *\n     * @name        enable\n     * @memberof    mixitup.Config.debug\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.enable = false;\n\n    /**\n     * A boolean dictating whether or not warnings should be shown when various\n     * common gotchas occur.\n     *\n     * Warnings are intended to provide insights during development when something\n     * occurs that is not a fatal, but may indicate an issue with your integration,\n     * and are therefore turned on by default. However, you may wish to disable\n     * them in production.\n     *\n     * @example <caption>Example 1: Disabling warnings</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     debug: {\n     *         showWarnings: false\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Disabling warnings based on environment</caption>\n     *\n     * var showWarnings = myAppConfig.environment === 'development' ? true : false;\n     *\n     * var mixer = mixitup(containerEl, {\n     *     debug: {\n     *         showWarnings: showWarnings\n     *     }\n     * });\n     *\n     * @name        showWarnings\n     * @memberof    mixitup.Config.debug\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.showWarnings = true;\n\n    /**\n     * Used for server-side testing only.\n     *\n     * @private\n     * @name        fauxAsync\n     * @memberof    mixitup.Config.debug\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.fauxAsync = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigDebug);\n  mixitup.ConfigDebug.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigDebug.prototype.constructor = mixitup.ConfigDebug;\n\n  /**\n   * A group of properties relating to the layout of the container.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        layout\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigLayout = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A boolean dictating whether or not mixitup should query all descendants\n     * of the container for targets, or only immediate children.\n     *\n     * By default, mixitup will query all descendants matching the\n     * `selectors.target` selector when indexing targets upon instantiation.\n     * This allows for targets to be nested inside a sub-container which is\n     * useful when ring-fencing targets from locally scoped controls in your\n     * markup (see `controls.scope`).\n     *\n     * However, if you are building a more complex UI requiring the nesting\n     * of mixers within mixers, you will most likely want to limit targets to\n     * immediate children of the container by setting this property to `false`.\n     *\n     * @example <caption>Example: Restricting targets to immediate children</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     layout: {\n     *         allowNestedTargets: false\n     *     }\n     * });\n     *\n     * @name        allowNestedTargets\n     * @memberof    mixitup.Config.layout\n     * @instance\n     * @type        {boolean}\n     * @default     true\n     */\n\n    this.allowNestedTargets = true;\n\n    /**\n     * A string specifying an optional class name to apply to the container when in\n     * its default state.\n     *\n     * By changing this class name or adding a class name to the container via the\n     * `.changeLayout()` API method, the CSS layout of the container can be changed,\n     * and MixItUp will attemp to gracefully animate the container and its targets\n     * between states.\n     *\n     * @example <caption>Example 1: Specifying a container class name</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     layout: {\n     *         containerClassName: 'grid'\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     layout: {\n     *         containerClassName: 'grid'\n     *     }\n     * });\n     *\n     * mixer.changeLayout('list')\n     *     .then(function(state) {\n     *          console.log(state.activeContainerClass); // \"list\"\n     *     });\n     *\n     * @name        containerClassName\n     * @memberof    mixitup.Config.layout\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.containerClassName = '';\n\n    /**\n     * A reference to a non-target sibling element after which to insert targets\n     * when there are no targets in the container.\n     *\n     * @example <caption>Example: Setting a `siblingBefore` reference element</caption>\n     *\n     * var addButton = containerEl.querySelector('button');\n     *\n     * var mixer = mixitup(containerEl, {\n     *     layout: {\n     *         siblingBefore: addButton\n     *     }\n     * });\n     *\n     * @name        siblingBefore\n     * @memberof    mixitup.Config.layout\n     * @instance\n     * @type        {HTMLElement}\n     * @default     null\n     */\n\n    this.siblingBefore = null;\n\n    /**\n     * A reference to a non-target sibling element before which to insert targets\n     * when there are no targets in the container.\n     *\n     * @example <caption>Example: Setting an `siblingAfter` reference element</caption>\n     *\n     * var gap = containerEl.querySelector('.gap');\n     *\n     * var mixer = mixitup(containerEl, {\n     *     layout: {\n     *         siblingAfter: gap\n     *     }\n     * });\n     *\n     * @name        siblingAfter\n     * @memberof    mixitup.Config.layout\n     * @instance\n     * @type        {HTMLElement}\n     * @default     null\n     */\n\n    this.siblingAfter = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigLayout);\n  mixitup.ConfigLayout.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigLayout.prototype.constructor = mixitup.ConfigLayout;\n\n  /**\n   * A group of properties defining the initial state of the mixer on load (instantiation).\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        load\n   * @namespace\n   * @public\n   * @since       2.0.0\n   */\n\n  mixitup.ConfigLoad = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A string defining any filtering to be statically applied to the mixer on load.\n     * As per the `.filter()` API, this can be any valid selector string, or the\n     * values `'all'` or `'none'`.\n     *\n     * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>\n     *\n     * // The mixer will show only those targets matching '.category-a' on load.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     load: {\n     *         filter: '.category-a'\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Hiding all targets on load</caption>\n     *\n     * // The mixer will show hide all targets on load.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     load: {\n     *         filter: 'none'\n     *     }\n     * });\n     *\n     * @name        filter\n     * @memberof    mixitup.Config.load\n     * @instance\n     * @type        {string}\n     * @default     'all'\n     */\n\n    this.filter = 'all';\n\n    /**\n     * A string defining any sorting to be statically applied to the mixer on load.\n     * As per the `.sort()` API, this should be a valid \"sort string\" made up of\n     * an attribute to sort by (or `'default'`) followed by an optional sorting\n     * order, or the value `'random'`;\n     *\n     * @example <caption>Example: Defining sorting to be applied on load</caption>\n     *\n     * // The mixer will sort the container by the value of the `data-published-date`\n     * // attribute, in descending order.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     load: {\n     *         sort: 'published-date:desc'\n     *     }\n     * });\n     *\n     * @name        sort\n     * @memberof    mixitup.Config.load\n     * @instance\n     * @type        {string}\n     * @default     'default:asc'\n     */\n\n    this.sort = 'default:asc';\n\n    /**\n     * An array of objects representing the underlying data of any pre-rendered targets,\n     * when using the `.dataset()` API.\n     *\n     * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.\n     *\n     * @example <caption>Example: Defining the initial underyling dataset</caption>\n     *\n     * var myDataset = [\n     *     {\n     *         id: 0,\n     *         title: \"Blog Post Title 0\",\n     *         ...\n     *     },\n     *     {\n     *         id: 1,\n     *         title: \"Blog Post Title 1\",\n     *         ...\n     *     }\n     * ];\n     *\n     * var mixer = mixitup(containerEl, {\n     *     data: {\n     *         uidKey: 'id'\n     *     },\n     *     load: {\n     *         dataset: myDataset\n     *     }\n     * });\n     *\n     * @name        dataset\n     * @memberof    mixitup.Config.load\n     * @instance\n     * @type        {Array.<object>}\n     * @default     null\n     */\n\n    this.dataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigLoad);\n  mixitup.ConfigLoad.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigLoad.prototype.constructor = mixitup.ConfigLoad;\n\n  /**\n   * A group of properties defining the selectors used to query elements within a mixitup container.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        selectors\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigSelectors = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A selector string used to query and index target elements within the container.\n     *\n     * By default, the class selector `'.mix'` is used, but this can be changed to an\n     * attribute or element selector to match the style of your project.\n     *\n     * @example <caption>Example 1: Changing the target selector</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     selectors: {\n     *         target: '.portfolio-item'\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Using an attribute selector as a target selector</caption>\n     *\n     * // The mixer will search for any children with the attribute `data-ref=\"mix\"`\n     *\n     * var mixer = mixitup(containerEl, {\n     *     selectors: {\n     *         target: '[data-ref=\"mix\"]'\n     *     }\n     * });\n     *\n     * @name        target\n     * @memberof    mixitup.Config.selectors\n     * @instance\n     * @type        {string}\n     * @default     '.mix'\n     */\n\n    this.target = '.mix';\n\n    /**\n     * A optional selector string used to add further specificity to the querying of control elements,\n     * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).\n     *\n     * This can be used if other elements in your document must contain the above attributes\n     * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding\n     * an additional `control` selector of your choice allows MixItUp to restrict event handling\n     * to only those elements matching the defined selector.\n     *\n     * @name        control\n     * @memberof    mixitup.Config.selectors\n     * @instance\n     * @type        {string}\n     * @default     ''\n     *\n     * @example <caption>Example 1: Adding a `selectors.control` selector</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     selectors: {\n     *         control: '.mixitup-control'\n     *     }\n     * });\n     *\n     * // Will not be handled:\n     * // <button data-filter=\".category-a\"></button>\n     *\n     * // Will be handled:\n     * // <button class=\"mixitup-control\" data-filter=\".category-a\"></button>\n     */\n\n    this.control = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigSelectors);\n  mixitup.ConfigSelectors.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigSelectors.prototype.constructor = mixitup.ConfigSelectors;\n\n  /**\n   * A group of optional render functions for creating and updating elements.\n   *\n   * All render functions receive a data object, and should return a valid HTML string.\n   *\n   * @constructor\n   * @memberof    mixitup.Config\n   * @name        render\n   * @namespace\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigRender = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A function returning an HTML string representing a target element, or a reference to a\n     * single DOM element.\n     *\n     * The function is invoked as part of the `.dataset()` API, whenever a new item is added\n     * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).\n     *\n     * The function receives the relevant dataset item as its first parameter.\n     *\n     * @example <caption>Example 1: Using string concatenation</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     render: {\n     *         target: function(item) {\n     *             return (\n     *                 '&lt;div class=\"mix\"&gt;' +\n     *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +\n     *                 '&lt;/div&gt;'\n     *             );\n     *         }\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Using an ES2015 template literal</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     render: {\n     *         target: function(item) {\n     *             return (\n     *                 `&lt;div class=\"mix\"&gt;\n     *                     &lt;h2&gt;${item.title}&lt;/h2&gt;\n     *                  &lt;/div&gt;`\n     *             );\n     *         }\n     *     }\n     * });\n     *\n     * @example <caption>Example 3: Using a Handlebars template</caption>\n     *\n     * var targetTemplate = Handlebars.compile('&lt;div class=\"mix\"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');\n     *\n     * var mixer = mixitup(containerEl, {\n     *     render: {\n     *         target: targetTemplate\n     *     }\n     * });\n     *\n     * @example <caption>Example 4: Returning a DOM element</caption>\n     *\n     * var mixer = mixitup(containerEl, {\n     *     render: {\n     *         target: function(item) {\n     *              // Create a single element using your framework's built-in renderer\n     *\n     *              var el = ...\n     *\n     *              return el;\n     *         }\n     *     }\n     * });\n     *\n     * @name        target\n     * @memberof    mixitup.Config.render\n     * @instance\n     * @type        {function}\n     * @default     'null'\n     */\n\n    this.target = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigRender);\n  mixitup.ConfigRender.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigRender.prototype.constructor = mixitup.ConfigRender;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.ConfigTemplates = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ConfigTemplates);\n  mixitup.ConfigTemplates.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ConfigTemplates.prototype.constructor = mixitup.ConfigTemplates;\n\n  /**\n   * `mixitup.Config` is an interface used for customising the functionality of a\n   * mixer instance. It is organised into several semantically distinct sub-objects,\n   * each one pertaining to a particular aspect of MixItUp functionality.\n   *\n   * An object literal containing any or all of the available properies,\n   * known as the \"configuration object\", can be passed as the second parameter to\n   * the `mixitup` factory function when creating a mixer instance to customise its\n   * functionality as needed.\n   *\n   * If no configuration object is passed, the mixer instance will take on the default\n   * configuration values detailed below.\n   *\n   * @example <caption>Example 1: Creating and passing the configuration object</caption>\n   * // Create a configuration object with desired values\n   *\n   * var config = {\n   *     animation: {\n   *         enable: false\n   *     },\n   *     selectors: {\n   *         target: '.item'\n   *     }\n   * };\n   *\n   * // Pass the configuration object to the mixitup factory function\n   *\n   * var mixer = mixitup(containerEl, config);\n   *\n   * @example <caption>Example 2: Passing the configuration object inline</caption>\n   * // Typically, the configuration object is passed inline for brevity.\n   *\n   * var mixer = mixitup(containerEl, {\n   *     controls: {\n   *         live: true,\n   *         toggleLogic: 'and'\n   *     }\n   * });\n   *\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @namespace\n   * @public\n   * @since       2.0.0\n   */\n\n  mixitup.Config = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.animation = new mixitup.ConfigAnimation();\n    this.behavior = new mixitup.ConfigBehavior();\n    this.callbacks = new mixitup.ConfigCallbacks();\n    this.controls = new mixitup.ConfigControls();\n    this.classNames = new mixitup.ConfigClassNames();\n    this.data = new mixitup.ConfigData();\n    this.debug = new mixitup.ConfigDebug();\n    this.layout = new mixitup.ConfigLayout();\n    this.load = new mixitup.ConfigLoad();\n    this.selectors = new mixitup.ConfigSelectors();\n    this.render = new mixitup.ConfigRender();\n    this.templates = new mixitup.ConfigTemplates();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Config);\n  mixitup.Config.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.Config.prototype.constructor = mixitup.Config;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.MixerDom = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.document = null;\n    this.body = null;\n    this.container = null;\n    this.parent = null;\n    this.targets = [];\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.MixerDom);\n  mixitup.MixerDom.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.MixerDom.prototype.constructor = mixitup.MixerDom;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.UiClassNames = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.base = '';\n    this.active = '';\n    this.disabled = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.UiClassNames);\n  mixitup.UiClassNames.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.UiClassNames.prototype.constructor = mixitup.UiClassNames;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.dataset()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandDataset = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.dataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandDataset);\n  mixitup.CommandDataset.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandDataset.prototype.constructor = mixitup.CommandDataset;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.multimix()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandMultimix = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.filter = null;\n    this.sort = null;\n    this.insert = null;\n    this.remove = null;\n    this.changeLayout = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandMultimix);\n  mixitup.CommandMultimix.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandMultimix.prototype.constructor = mixitup.CommandMultimix;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.filter()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandFilter = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.selector = '';\n    this.collection = null;\n    this.action = 'show'; // enum: ['show', 'hide']\n\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandFilter);\n  mixitup.CommandFilter.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandFilter.prototype.constructor = mixitup.CommandFilter;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.sort()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandSort = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.sortString = '';\n    this.attribute = '';\n    this.order = 'asc';\n    this.collection = null;\n    this.next = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandSort);\n  mixitup.CommandSort.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandSort.prototype.constructor = mixitup.CommandSort;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.insert()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandInsert = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.index = 0;\n    this.collection = [];\n    this.position = 'before'; // enum: ['before', 'after']\n    this.sibling = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandInsert);\n  mixitup.CommandInsert.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandInsert.prototype.constructor = mixitup.CommandInsert;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.remove()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandRemove = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.targets = [];\n    this.collection = [];\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandRemove);\n  mixitup.CommandRemove.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandRemove.prototype.constructor = mixitup.CommandRemove;\n\n  /**\n   * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.\n   *\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.CommandChangeLayout = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.containerClassName = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.CommandChangeLayout);\n  mixitup.CommandChangeLayout.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.CommandChangeLayout.prototype.constructor = mixitup.CommandChangeLayout;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   * @param       {string}        type\n   * @param       {string}        selector\n   * @param       {boolean}       [live]\n   * @param       {string}        [parent]\n   *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.\n   */\n\n  mixitup.ControlDefinition = function (type, selector, live, parent) {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.type = type;\n    this.selector = selector;\n    this.live = live || false;\n    this.parent = parent || '';\n    this.callActions('afterConstruct');\n    h.freeze(this);\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.ControlDefinition);\n  mixitup.ControlDefinition.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.ControlDefinition.prototype.constructor = mixitup.ControlDefinition;\n  mixitup.controlDefinitions = [];\n  mixitup.controlDefinitions.push(new mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));\n  mixitup.controlDefinitions.push(new mixitup.ControlDefinition('filter', '[data-filter]'));\n  mixitup.controlDefinitions.push(new mixitup.ControlDefinition('sort', '[data-sort]'));\n  mixitup.controlDefinitions.push(new mixitup.ControlDefinition('toggle', '[data-toggle]'));\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Control = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.el = null;\n    this.selector = '';\n    this.bound = [];\n    this.pending = -1;\n    this.type = '';\n    this.status = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']\n    this.filter = '';\n    this.sort = '';\n    this.canDisable = false;\n    this.handler = null;\n    this.classNames = new mixitup.UiClassNames();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Control);\n  mixitup.Control.prototype = Object.create(mixitup.Base.prototype);\n  h.extend(mixitup.Control.prototype, /** @lends mixitup.Control */\n  {\n    constructor: mixitup.Control,\n    /**\n     * @private\n     * @param {HTMLElement} el\n     * @param {string}      type\n     * @param {string}      selector\n     */\n\n    init: function (el, type, selector) {\n      var self = this;\n      this.callActions('beforeInit', arguments);\n      self.el = el;\n      self.type = type;\n      self.selector = selector;\n      if (self.selector) {\n        self.status = 'live';\n      } else {\n        self.canDisable = typeof self.el.disable === 'boolean';\n        switch (self.type) {\n          case 'filter':\n            self.filter = self.el.getAttribute('data-filter');\n            break;\n          case 'toggle':\n            self.filter = self.el.getAttribute('data-toggle');\n            break;\n          case 'sort':\n            self.sort = self.el.getAttribute('data-sort');\n            break;\n          case 'multimix':\n            self.filter = self.el.getAttribute('data-filter');\n            self.sort = self.el.getAttribute('data-sort');\n            break;\n        }\n      }\n      self.bindClick();\n      mixitup.controls.push(self);\n      this.callActions('afterInit', arguments);\n    },\n    /**\n     * @private\n     * @param  {mixitup.Mixer} mixer\n     * @return {boolean}\n     */\n\n    isBound: function (mixer) {\n      var self = this,\n        isBound = false;\n      this.callActions('beforeIsBound', arguments);\n      isBound = self.bound.indexOf(mixer) > -1;\n      return self.callFilters('afterIsBound', isBound, arguments);\n    },\n    /**\n     * @private\n     * @param  {mixitup.Mixer} mixer\n     * @return {void}\n     */\n\n    addBinding: function (mixer) {\n      var self = this;\n      this.callActions('beforeAddBinding', arguments);\n      if (!self.isBound()) {\n        self.bound.push(mixer);\n      }\n      this.callActions('afterAddBinding', arguments);\n    },\n    /**\n     * @private\n     * @param  {mixitup.Mixer} mixer\n     * @return {void}\n     */\n\n    removeBinding: function (mixer) {\n      var self = this,\n        removeIndex = -1;\n      this.callActions('beforeRemoveBinding', arguments);\n      if ((removeIndex = self.bound.indexOf(mixer)) > -1) {\n        self.bound.splice(removeIndex, 1);\n      }\n      if (self.bound.length < 1) {\n        // No bindings exist, unbind event click handlers\n\n        self.unbindClick();\n\n        // Remove from `mixitup.controls` list\n\n        removeIndex = mixitup.controls.indexOf(self);\n        mixitup.controls.splice(removeIndex, 1);\n        if (self.status === 'active') {\n          self.renderStatus(self.el, 'inactive');\n        }\n      }\n      this.callActions('afterRemoveBinding', arguments);\n    },\n    /**\n     * @private\n     * @return {void}\n     */\n\n    bindClick: function () {\n      var self = this;\n      this.callActions('beforeBindClick', arguments);\n      self.handler = function (e) {\n        self.handleClick(e);\n      };\n      h.on(self.el, 'click', self.handler);\n      this.callActions('afterBindClick', arguments);\n    },\n    /**\n     * @private\n     * @return {void}\n     */\n\n    unbindClick: function () {\n      var self = this;\n      this.callActions('beforeUnbindClick', arguments);\n      h.off(self.el, 'click', self.handler);\n      self.handler = null;\n      this.callActions('afterUnbindClick', arguments);\n    },\n    /**\n     * @private\n     * @param   {MouseEvent} e\n     * @return  {void}\n     */\n\n    handleClick: function (e) {\n      var self = this,\n        button = null,\n        mixer = null,\n        isActive = false,\n        returnValue = void 0,\n        command = {},\n        clone = null,\n        commands = [],\n        i = -1;\n      this.callActions('beforeHandleClick', arguments);\n      this.pending = 0;\n      mixer = self.bound[0];\n      if (!self.selector) {\n        button = self.el;\n      } else {\n        button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);\n      }\n      if (!button) {\n        self.callActions('afterHandleClick', arguments);\n        return;\n      }\n      switch (self.type) {\n        case 'filter':\n          command.filter = self.filter || button.getAttribute('data-filter');\n          break;\n        case 'sort':\n          command.sort = self.sort || button.getAttribute('data-sort');\n          break;\n        case 'multimix':\n          command.filter = self.filter || button.getAttribute('data-filter');\n          command.sort = self.sort || button.getAttribute('data-sort');\n          break;\n        case 'toggle':\n          command.filter = self.filter || button.getAttribute('data-toggle');\n          if (self.status === 'live') {\n            isActive = h.hasClass(button, self.classNames.active);\n          } else {\n            isActive = self.status === 'active';\n          }\n          break;\n      }\n      for (i = 0; i < self.bound.length; i++) {\n        // Create a clone of the command for each bound mixer instance\n\n        clone = new mixitup.CommandMultimix();\n        h.extend(clone, command);\n        commands.push(clone);\n      }\n      commands = self.callFilters('commandsHandleClick', commands, arguments);\n      self.pending = self.bound.length;\n      for (i = 0; mixer = self.bound[i]; i++) {\n        command = commands[i];\n        if (!command) {\n          // An extension may set a command null to indicate that the click should not be handled\n\n          continue;\n        }\n        if (!mixer.lastClicked) {\n          mixer.lastClicked = button;\n        }\n        mixitup.events.fire('mixClick', mixer.dom.container, {\n          state: mixer.state,\n          instance: mixer,\n          originalEvent: e,\n          control: mixer.lastClicked\n        }, mixer.dom.document);\n        if (typeof mixer.config.callbacks.onMixClick === 'function') {\n          returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);\n          if (returnValue === false) {\n            // User has returned `false` from the callback, so do not handle click\n\n            continue;\n          }\n        }\n        if (self.type === 'toggle') {\n          isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);\n        } else {\n          mixer.multimix(command);\n        }\n      }\n      this.callActions('afterHandleClick', arguments);\n    },\n    /**\n     * @param   {object}          command\n     * @param   {Array<string>}   toggleArray\n     * @return  {void}\n     */\n\n    update: function (command, toggleArray) {\n      var self = this,\n        actions = new mixitup.CommandMultimix();\n      self.callActions('beforeUpdate', arguments);\n      self.pending--;\n      self.pending = Math.max(0, self.pending);\n      if (self.pending > 0) return;\n      if (self.status === 'live') {\n        // Live control (status unknown)\n\n        self.updateLive(command, toggleArray);\n      } else {\n        // Static control\n\n        actions.sort = self.sort;\n        actions.filter = self.filter;\n        self.callFilters('actionsUpdate', actions, arguments);\n        self.parseStatusChange(self.el, command, actions, toggleArray);\n      }\n      self.callActions('afterUpdate', arguments);\n    },\n    /**\n     * @param   {mixitup.CommandMultimix} command\n     * @param   {Array<string>}           toggleArray\n     * @return  {void}\n     */\n\n    updateLive: function (command, toggleArray) {\n      var self = this,\n        controlButtons = null,\n        actions = null,\n        button = null,\n        i = -1;\n      self.callActions('beforeUpdateLive', arguments);\n      if (!self.el) return;\n      controlButtons = self.el.querySelectorAll(self.selector);\n      for (i = 0; button = controlButtons[i]; i++) {\n        actions = new mixitup.CommandMultimix();\n        switch (self.type) {\n          case 'filter':\n            actions.filter = button.getAttribute('data-filter');\n            break;\n          case 'sort':\n            actions.sort = button.getAttribute('data-sort');\n            break;\n          case 'multimix':\n            actions.filter = button.getAttribute('data-filter');\n            actions.sort = button.getAttribute('data-sort');\n            break;\n          case 'toggle':\n            actions.filter = button.getAttribute('data-toggle');\n            break;\n        }\n        actions = self.callFilters('actionsUpdateLive', actions, arguments);\n        self.parseStatusChange(button, command, actions, toggleArray);\n      }\n      self.callActions('afterUpdateLive', arguments);\n    },\n    /**\n     * @param   {HTMLElement}             button\n     * @param   {mixitup.CommandMultimix} command\n     * @param   {mixitup.CommandMultimix} actions\n     * @param   {Array<string>}           toggleArray\n     * @return  {void}\n     */\n\n    parseStatusChange: function (button, command, actions, toggleArray) {\n      var self = this,\n        alias = '',\n        toggle = '',\n        i = -1;\n      self.callActions('beforeParseStatusChange', arguments);\n      switch (self.type) {\n        case 'filter':\n          if (command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n          break;\n        case 'multimix':\n          if (command.sort === actions.sort && command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n          break;\n        case 'sort':\n          if (command.sort.match(/:asc/g)) {\n            alias = command.sort.replace(/:asc/g, '');\n          }\n          if (command.sort === actions.sort || alias === actions.sort) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n          break;\n        case 'toggle':\n          if (toggleArray.length < 1) self.renderStatus(button, 'inactive');\n          if (command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          }\n          for (i = 0; i < toggleArray.length; i++) {\n            toggle = toggleArray[i];\n            if (toggle === actions.filter) {\n              // Button matches one active toggle\n\n              self.renderStatus(button, 'active');\n              break;\n            }\n            self.renderStatus(button, 'inactive');\n          }\n          break;\n      }\n      self.callActions('afterParseStatusChange', arguments);\n    },\n    /**\n     * @param   {HTMLElement}   button\n     * @param   {string}        status\n     * @return  {void}\n     */\n\n    renderStatus: function (button, status) {\n      var self = this;\n      self.callActions('beforeRenderStatus', arguments);\n      switch (status) {\n        case 'active':\n          h.addClass(button, self.classNames.active);\n          h.removeClass(button, self.classNames.disabled);\n          if (self.canDisable) self.el.disabled = false;\n          break;\n        case 'inactive':\n          h.removeClass(button, self.classNames.active);\n          h.removeClass(button, self.classNames.disabled);\n          if (self.canDisable) self.el.disabled = false;\n          break;\n        case 'disabled':\n          if (self.canDisable) self.el.disabled = true;\n          h.addClass(button, self.classNames.disabled);\n          h.removeClass(button, self.classNames.active);\n          break;\n      }\n      if (self.status !== 'live') {\n        // Update the control's status propery if not live\n\n        self.status = status;\n      }\n      self.callActions('afterRenderStatus', arguments);\n    }\n  });\n  mixitup.controls = [];\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.StyleData = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.x = 0;\n    this.y = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n    this.left = 0;\n    this.width = 0;\n    this.height = 0;\n    this.marginRight = 0;\n    this.marginBottom = 0;\n    this.opacity = 0;\n    this.scale = new mixitup.TransformData();\n    this.translateX = new mixitup.TransformData();\n    this.translateY = new mixitup.TransformData();\n    this.translateZ = new mixitup.TransformData();\n    this.rotateX = new mixitup.TransformData();\n    this.rotateY = new mixitup.TransformData();\n    this.rotateZ = new mixitup.TransformData();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.StyleData);\n  mixitup.StyleData.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.StyleData.prototype.constructor = mixitup.StyleData;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.TransformData = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.value = 0;\n    this.unit = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.TransformData);\n  mixitup.TransformData.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.TransformData.prototype.constructor = mixitup.TransformData;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.TransformDefaults = function () {\n    mixitup.StyleData.apply(this);\n    this.callActions('beforeConstruct');\n    this.scale.value = 0.01;\n    this.scale.unit = '';\n    this.translateX.value = 20;\n    this.translateX.unit = 'px';\n    this.translateY.value = 20;\n    this.translateY.unit = 'px';\n    this.translateZ.value = 20;\n    this.translateZ.unit = 'px';\n    this.rotateX.value = 90;\n    this.rotateX.unit = 'deg';\n    this.rotateY.value = 90;\n    this.rotateY.unit = 'deg';\n    this.rotateX.value = 90;\n    this.rotateX.unit = 'deg';\n    this.rotateZ.value = 180;\n    this.rotateZ.unit = 'deg';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.TransformDefaults);\n  mixitup.TransformDefaults.prototype = Object.create(mixitup.StyleData.prototype);\n  mixitup.TransformDefaults.prototype.constructor = mixitup.TransformDefaults;\n\n  /**\n   * @private\n   * @static\n   * @since   3.0.0\n   * @type    {mixitup.TransformDefaults}\n   */\n\n  mixitup.transformDefaults = new mixitup.TransformDefaults();\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.EventDetail = function () {\n    this.state = null;\n    this.futureState = null;\n    this.instance = null;\n    this.originalEvent = null;\n  };\n\n  /**\n   * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various\n   * points within the lifecycle of a mixer operation.\n   *\n   * Each event is analogous to the callback function of the same name defined in\n   * the `callbacks` configuration object, and is triggered immediately before it.\n   *\n   * Events are always triggered from the container element on which MixItUp is instantiated\n   * upon.\n   *\n   * As with any event, registered event handlers receive the event object as a parameter\n   * which includes a `detail` property containting references to the current `state`,\n   * the `mixer` instance, and other event-specific properties described below.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.Events = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * A custom event triggered immediately after any MixItUp operation is requested\n     * and before animations have begun.\n     *\n     * The `mixStart` event also exposes a `futureState` property via the\n     * `event.detail` object, which represents the final state of the mixer once\n     * the requested operation has completed.\n     *\n     * @name        mixStart\n     * @memberof    mixitup.Events\n     * @static\n     * @type        {CustomEvent}\n     */\n\n    this.mixStart = null;\n\n    /**\n     * A custom event triggered when a MixItUp operation is requested while another\n     * operation is in progress, and the animation queue is full, or queueing\n     * is disabled.\n     *\n     * @name        mixBusy\n     * @memberof    mixitup.Events\n     * @static\n     * @type        {CustomEvent}\n     */\n\n    this.mixBusy = null;\n\n    /**\n     * A custom event triggered after any MixItUp operation has completed, and the\n     * state has been updated.\n     *\n     * @name        mixEnd\n     * @memberof    mixitup.Events\n     * @static\n     * @type        {CustomEvent}\n     */\n\n    this.mixEnd = null;\n\n    /**\n     * A custom event triggered whenever a filter operation \"fails\", i.e. no targets\n     * could be found matching the requested filter.\n     *\n     * @name        mixFail\n     * @memberof    mixitup.Events\n     * @static\n     * @type        {CustomEvent}\n     */\n\n    this.mixFail = null;\n\n    /**\n     * A custom event triggered whenever a MixItUp control is clicked, and before its\n     * respective operation is requested.\n     *\n     * This event also exposes an `originalEvent` property via the `event.detail`\n     * object, which holds a reference to the original click event.\n     *\n     * @name        mixClick\n     * @memberof    mixitup.Events\n     * @static\n     * @type        {CustomEvent}\n     */\n\n    this.mixClick = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Events);\n  mixitup.Events.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.Events.prototype.constructor = mixitup.Events;\n\n  /**\n   * @private\n   * @param   {string}      eventType\n   * @param   {Element}     el\n   * @param   {object}      detail\n   * @param   {Document}    [doc]\n   */\n\n  mixitup.Events.prototype.fire = function (eventType, el, detail, doc) {\n    var self = this,\n      event = null,\n      eventDetail = new mixitup.EventDetail();\n    self.callActions('beforeFire', arguments);\n    if (typeof self[eventType] === 'undefined') {\n      throw new Error('Event type \"' + eventType + '\" not found.');\n    }\n    eventDetail.state = new mixitup.State();\n    h.extend(eventDetail.state, detail.state);\n    if (detail.futureState) {\n      eventDetail.futureState = new mixitup.State();\n      h.extend(eventDetail.futureState, detail.futureState);\n    }\n    eventDetail.instance = detail.instance;\n    if (detail.originalEvent) {\n      eventDetail.originalEvent = detail.originalEvent;\n    }\n    event = h.getCustomEvent(eventType, eventDetail, doc);\n    self.callFilters('eventFire', event, arguments);\n    el.dispatchEvent(event);\n  };\n\n  // Asign a singleton instance to `mixitup.events`:\n\n  mixitup.events = new mixitup.Events();\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.QueueItem = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.args = [];\n    this.instruction = null;\n    this.triggerElement = null;\n    this.deferred = null;\n    this.isToggling = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.QueueItem);\n  mixitup.QueueItem.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.QueueItem.prototype.constructor = mixitup.QueueItem;\n\n  /**\n   * The `mixitup.Mixer` class is used to hold discreet, user-configured\n   * instances of MixItUp on a provided container element.\n   *\n   * Mixer instances are returned whenever the `mixitup()` factory function is called,\n   * which expose a range of methods enabling API-based filtering, sorting,\n   * insertion, removal and more.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.Mixer = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.config = new mixitup.Config();\n    this.id = '';\n    this.isBusy = false;\n    this.isToggling = false;\n    this.incPadding = true;\n    this.controls = [];\n    this.targets = [];\n    this.origOrder = [];\n    this.cache = {};\n    this.toggleArray = [];\n    this.targetsMoved = 0;\n    this.targetsImmovable = 0;\n    this.targetsBound = 0;\n    this.targetsDone = 0;\n    this.staggerDuration = 0;\n    this.effectsIn = null;\n    this.effectsOut = null;\n    this.transformIn = [];\n    this.transformOut = [];\n    this.queue = [];\n    this.state = null;\n    this.lastOperation = null;\n    this.lastClicked = null;\n    this.userCallback = null;\n    this.userDeferred = null;\n    this.dom = new mixitup.MixerDom();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Mixer);\n  mixitup.Mixer.prototype = Object.create(mixitup.Base.prototype);\n  h.extend(mixitup.Mixer.prototype, /** @lends mixitup.Mixer */\n  {\n    constructor: mixitup.Mixer,\n    /**\n     * @private\n     * @instance\n     * @since 3.0.0\n     * @param {HTMLElement} container\n     * @param {HTMLElement} document\n     * @param {string}      id\n     * @param {object}      [config]\n     */\n\n    attach: function (container, document, id, config) {\n      var self = this,\n        target = null,\n        i = -1;\n      self.callActions('beforeAttach', arguments);\n      self.id = id;\n      if (config) {\n        h.extend(self.config, config, true, true);\n      }\n      self.sanitizeConfig();\n      self.cacheDom(container, document);\n      if (self.config.layout.containerClassName) {\n        h.addClass(self.dom.container, self.config.layout.containerClassName);\n      }\n      if (!mixitup.features.has.transitions) {\n        self.config.animation.enable = false;\n      }\n      if (typeof window.console === 'undefined') {\n        self.config.debug.showWarnings = false;\n      }\n      if (self.config.data.uidKey) {\n        // If the dataset API is in use, force disable controls\n\n        self.config.controls.enable = false;\n      }\n      self.indexTargets();\n      self.state = self.getInitialState();\n      for (i = 0; target = self.lastOperation.toHide[i]; i++) {\n        target.hide();\n      }\n      if (self.config.controls.enable) {\n        self.initControls();\n        self.buildToggleArray(null, self.state);\n        self.updateControls({\n          filter: self.state.activeFilter,\n          sort: self.state.activeSort\n        });\n      }\n      self.parseEffects();\n      self.callActions('afterAttach', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since 3.0.0\n     * @return {void}\n     */\n\n    sanitizeConfig: function () {\n      var self = this;\n      self.callActions('beforeSanitizeConfig', arguments);\n\n      // Sanitize enum/string config options\n\n      self.config.controls.scope = self.config.controls.scope.toLowerCase().trim();\n      self.config.controls.toggleLogic = self.config.controls.toggleLogic.toLowerCase().trim();\n      self.config.controls.toggleDefault = self.config.controls.toggleDefault.toLowerCase().trim();\n      self.config.animation.effects = self.config.animation.effects.trim();\n      self.callActions('afterSanitizeConfig', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {mixitup.State}\n     */\n\n    getInitialState: function () {\n      var self = this,\n        state = new mixitup.State(),\n        operation = new mixitup.Operation();\n      self.callActions('beforeGetInitialState', arguments);\n\n      // Map initial values into a mock state object in order to construct an operation\n\n      state.activeContainerClassName = self.config.layout.containerClassName;\n      if (self.config.load.dataset) {\n        // Dataset API\n\n        if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {\n          throw new TypeError(mixitup.messages.errorConfigDataUidKeyNotSet());\n        }\n        operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();\n        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n        operation.show = self.targets.slice();\n        state = self.callFilters('stateGetInitialState', state, arguments);\n      } else {\n        // DOM API\n\n        state.activeFilter = self.parseFilterArgs([self.config.load.filter]).command;\n        state.activeSort = self.parseSortArgs([self.config.load.sort]).command;\n        state.totalTargets = self.targets.length;\n        state = self.callFilters('stateGetInitialState', state, arguments);\n        if (state.activeSort.collection || state.activeSort.attribute || state.activeSort.order === 'random' || state.activeSort.order === 'desc') {\n          // Sorting on load\n\n          operation.newSort = state.activeSort;\n          self.sortOperation(operation);\n          self.printSort(false, operation);\n          self.targets = operation.newOrder;\n        } else {\n          operation.startOrder = operation.newOrder = self.targets;\n        }\n        operation.startFilter = operation.newFilter = state.activeFilter;\n        operation.startSort = operation.newSort = state.activeSort;\n        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n        if (operation.newFilter.selector === 'all') {\n          operation.newFilter.selector = self.config.selectors.target;\n        } else if (operation.newFilter.selector === 'none') {\n          operation.newFilter.selector = '';\n        }\n      }\n      operation = self.callFilters('operationGetInitialState', operation, [state]);\n      self.lastOperation = operation;\n      if (operation.newFilter) {\n        self.filterOperation(operation);\n      }\n      state = self.buildState(operation);\n      return state;\n    },\n    /**\n     * Caches references of DOM elements neccessary for the mixer's functionality.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {HTMLElement}       el\n     * @param   {HTMLHtmlElement}   document\n     * @return  {void}\n     */\n\n    cacheDom: function (el, document) {\n      var self = this;\n      self.callActions('beforeCacheDom', arguments);\n      self.dom.document = document;\n      self.dom.body = self.dom.document.querySelector('body');\n      self.dom.container = el;\n      self.dom.parent = el;\n      self.callActions('afterCacheDom', arguments);\n    },\n    /**\n     * Indexes all child elements of the mixer matching the `selectors.target`\n     * selector, instantiating a mixitup.Target for each one.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {void}\n     */\n\n    indexTargets: function () {\n      var self = this,\n        target = null,\n        el = null,\n        dataset = null,\n        i = -1;\n      self.callActions('beforeIndexTargets', arguments);\n      self.dom.targets = self.config.layout.allowNestedTargets ? self.dom.container.querySelectorAll(self.config.selectors.target) : h.children(self.dom.container, self.config.selectors.target, self.dom.document);\n      self.dom.targets = h.arrayFromList(self.dom.targets);\n      self.targets = [];\n      if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {\n        throw new Error(mixitup.messages.errorDatasetPrerenderedMismatch());\n      }\n      if (self.dom.targets.length) {\n        for (i = 0; el = self.dom.targets[i]; i++) {\n          target = new mixitup.Target();\n          target.init(el, self, dataset ? dataset[i] : void 0);\n          target.isInDom = true;\n          self.targets.push(target);\n        }\n        self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ? self.dom.container : self.dom.targets[0].parentElement;\n      }\n      self.origOrder = self.targets;\n      self.callActions('afterIndexTargets', arguments);\n    },\n    initControls: function () {\n      var self = this,\n        definition = '',\n        controlElements = null,\n        el = null,\n        parent = null,\n        delagators = null,\n        control = null,\n        i = -1,\n        j = -1;\n      self.callActions('beforeInitControls', arguments);\n      switch (self.config.controls.scope) {\n        case 'local':\n          parent = self.dom.container;\n          break;\n        case 'global':\n          parent = self.dom.document;\n          break;\n        default:\n          throw new Error(mixitup.messages.errorConfigInvalidControlsScope());\n      }\n      for (i = 0; definition = mixitup.controlDefinitions[i]; i++) {\n        if (self.config.controls.live || definition.live) {\n          if (definition.parent) {\n            delagators = self.dom[definition.parent];\n            if (!delagators || delagators.length < 0) continue;\n            if (typeof delagators.length !== 'number') {\n              delagators = [delagators];\n            }\n          } else {\n            delagators = [parent];\n          }\n          for (j = 0; el = delagators[j]; j++) {\n            control = self.getControl(el, definition.type, definition.selector);\n            self.controls.push(control);\n          }\n        } else {\n          controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);\n          for (j = 0; el = controlElements[j]; j++) {\n            control = self.getControl(el, definition.type, '');\n            if (!control) continue;\n            self.controls.push(control);\n          }\n        }\n      }\n      self.callActions('afterInitControls', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {HTMLElement} el\n     * @param   {string}      type\n     * @param   {string}      selector\n     * @return  {mixitup.Control|null}\n     */\n\n    getControl: function (el, type, selector) {\n      var self = this,\n        control = null,\n        i = -1;\n      self.callActions('beforeGetControl', arguments);\n      if (!selector) {\n        // Static controls only\n\n        for (i = 0; control = mixitup.controls[i]; i++) {\n          if (control.el === el && control.isBound(self)) {\n            // Control already bound to this mixer (as another type).\n\n            // NB: This prevents duplicate controls from being registered where a selector\n            // might collide, eg: \"[data-filter]\" and \"[data-filter][data-sort]\"\n\n            return self.callFilters('controlGetControl', null, arguments);\n          } else if (control.el === el && control.type === type && control.selector === selector) {\n            // Another mixer is already using this control, add this mixer as a binding\n\n            control.addBinding(self);\n            return self.callFilters('controlGetControl', control, arguments);\n          }\n        }\n      }\n\n      // Create new control\n\n      control = new mixitup.Control();\n      control.init(el, type, selector);\n      control.classNames.base = h.getClassname(self.config.classNames, type);\n      control.classNames.active = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);\n      control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled);\n\n      // Add a reference to this mixer as a binding\n\n      control.addBinding(self);\n      return self.callFilters('controlGetControl', control, arguments);\n    },\n    /**\n     * Creates a compound selector by joining the `toggleArray` value as per the\n     * defined toggle logic.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {string}\n     */\n\n    getToggleSelector: function () {\n      var self = this,\n        delineator = self.config.controls.toggleLogic === 'or' ? ', ' : '',\n        toggleSelector = '';\n      self.callActions('beforeGetToggleSelector', arguments);\n      self.toggleArray = h.clean(self.toggleArray);\n      toggleSelector = self.toggleArray.join(delineator);\n      if (toggleSelector === '') {\n        toggleSelector = self.config.controls.toggleDefault;\n      }\n      return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);\n    },\n    /**\n     * Breaks compound selector strings in an array of discreet selectors,\n     * as per the active `controls.toggleLogic` configuration option. Accepts\n     * either a dynamic command object, or a state object.\n     *\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {object}        [command]\n     * @param   {mixitup.State} [state]\n     * @return  {void}\n     */\n\n    buildToggleArray: function (command, state) {\n      var self = this,\n        activeFilterSelector = '';\n      self.callActions('beforeBuildToggleArray', arguments);\n      if (command && command.filter) {\n        activeFilterSelector = command.filter.selector.replace(/\\s/g, '');\n      } else if (state) {\n        activeFilterSelector = state.activeFilter.selector.replace(/\\s/g, '');\n      } else {\n        return;\n      }\n      if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {\n        activeFilterSelector = '';\n      }\n      if (self.config.controls.toggleLogic === 'or') {\n        self.toggleArray = activeFilterSelector.split(',');\n      } else {\n        self.toggleArray = self.splitCompoundSelector(activeFilterSelector);\n      }\n      self.toggleArray = h.clean(self.toggleArray);\n      self.callActions('afterBuildToggleArray', arguments);\n    },\n    /**\n     * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat=\"1\"][data-cat=\"2\"]`)\n     * and breaks into its individual selectors.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string} compoundSelector\n     * @return  {string[]}\n     */\n\n    splitCompoundSelector: function (compoundSelector) {\n      // Break at a `.` or `[`, capturing the delineator\n\n      var partials = compoundSelector.split(/([\\.\\[])/g),\n        toggleArray = [],\n        selector = '',\n        i = -1;\n      if (partials[0] === '') {\n        partials.shift();\n      }\n      for (i = 0; i < partials.length; i++) {\n        if (i % 2 === 0) {\n          selector = '';\n        }\n        selector += partials[i];\n        if (i % 2 !== 0) {\n          toggleArray.push(selector);\n        }\n      }\n      return toggleArray;\n    },\n    /**\n     * Updates controls to their active/inactive state based on the command or\n     * current state of the mixer.\n     *\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {object} command\n     * @return  {void}\n     */\n\n    updateControls: function (command) {\n      var self = this,\n        control = null,\n        output = new mixitup.CommandMultimix(),\n        i = -1;\n      self.callActions('beforeUpdateControls', arguments);\n\n      // Sanitise to defaults\n\n      if (command.filter) {\n        output.filter = command.filter.selector;\n      } else {\n        output.filter = self.state.activeFilter.selector;\n      }\n      if (command.sort) {\n        output.sort = self.buildSortString(command.sort);\n      } else {\n        output.sort = self.buildSortString(self.state.activeSort);\n      }\n      if (output.filter === self.config.selectors.target) {\n        output.filter = 'all';\n      }\n      if (output.filter === '') {\n        output.filter = 'none';\n      }\n      h.freeze(output);\n      for (i = 0; control = self.controls[i]; i++) {\n        control.update(output, self.toggleArray);\n      }\n      self.callActions('afterUpdateControls', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.CommandSort}   command\n     * @return  {string}\n     */\n\n    buildSortString: function (command) {\n      var self = this;\n      var output = '';\n      output += command.sortString;\n      if (command.next) {\n        output += ' ' + self.buildSortString(command.next);\n      }\n      return output;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {object}        command\n     * @param   {Operation}     operation\n     * @return  {Promise.<mixitup.State>}\n     */\n\n    insertTargets: function (command, operation) {\n      var self = this,\n        nextSibling = null,\n        insertionIndex = -1,\n        frag = null,\n        target = null,\n        el = null,\n        i = -1;\n      self.callActions('beforeInsertTargets', arguments);\n      if (typeof command.index === 'undefined') command.index = 0;\n      nextSibling = self.getNextSibling(command.index, command.sibling, command.position);\n      frag = self.dom.document.createDocumentFragment();\n      if (nextSibling) {\n        insertionIndex = h.index(nextSibling, self.config.selectors.target);\n      } else {\n        insertionIndex = self.targets.length;\n      }\n      if (command.collection) {\n        for (i = 0; el = command.collection[i]; i++) {\n          if (self.dom.targets.indexOf(el) > -1) {\n            throw new Error(mixitup.messages.errorInsertPreexistingElement());\n          }\n\n          // Ensure elements are hidden when they are added to the DOM, so they can\n          // be animated in gracefully\n\n          el.style.display = 'none';\n          frag.appendChild(el);\n          frag.appendChild(self.dom.document.createTextNode(' '));\n          if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;\n          target = new mixitup.Target();\n          target.init(el, self);\n          target.isInDom = true;\n          self.targets.splice(insertionIndex, 0, target);\n          insertionIndex++;\n        }\n        self.dom.parent.insertBefore(frag, nextSibling);\n      }\n\n      // Since targets have been added, the original order must be updated\n\n      operation.startOrder = self.origOrder = self.targets;\n      self.callActions('afterInsertTargets', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Number}      [index]\n     * @param   {Element}     [sibling]\n     * @param   {string}      [position]\n     * @return  {Element}\n     */\n\n    getNextSibling: function (index, sibling, position) {\n      var self = this,\n        element = null;\n      index = Math.max(index, 0);\n      if (sibling && position === 'before') {\n        // Explicit sibling\n\n        element = sibling;\n      } else if (sibling && position === 'after') {\n        // Explicit sibling\n\n        element = sibling.nextElementSibling || null;\n      } else if (self.targets.length > 0 && typeof index !== 'undefined') {\n        // Index and targets exist\n\n        element = index < self.targets.length || !self.targets.length ? self.targets[index].dom.el : self.targets[self.targets.length - 1].dom.el.nextElementSibling;\n      } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {\n        // No targets but other siblings\n\n        if (self.config.layout.siblingAfter) {\n          element = self.config.layout.siblingAfter;\n        } else if (self.config.layout.siblingBefore) {\n          element = self.config.layout.siblingBefore.nextElementSibling;\n        } else {\n          self.dom.parent.children[0];\n        }\n      } else {\n        element === null;\n      }\n      return self.callFilters('elementGetNextSibling', element, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    filterOperation: function (operation) {\n      var self = this,\n        testResult = false,\n        index = -1,\n        action = '',\n        target = null,\n        i = -1;\n      self.callActions('beforeFilterOperation', arguments);\n      action = operation.newFilter.action;\n      for (i = 0; target = operation.newOrder[i]; i++) {\n        if (operation.newFilter.collection) {\n          // show via collection\n\n          testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;\n        } else {\n          // show via selector\n\n          if (operation.newFilter.selector === '') {\n            testResult = false;\n          } else {\n            testResult = target.dom.el.matches(operation.newFilter.selector);\n          }\n        }\n        self.evaluateHideShow(testResult, target, action, operation);\n      }\n      if (operation.toRemove.length) {\n        for (i = 0; target = operation.show[i]; i++) {\n          if (operation.toRemove.indexOf(target) > -1) {\n            // If any shown targets should be removed, move them into the toHide array\n\n            operation.show.splice(i, 1);\n            if ((index = operation.toShow.indexOf(target)) > -1) {\n              operation.toShow.splice(index, 1);\n            }\n            operation.toHide.push(target);\n            operation.hide.push(target);\n            i--;\n          }\n        }\n      }\n      operation.matching = operation.show.slice();\n      if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {\n        operation.hasFailed = true;\n      }\n      self.callActions('afterFilterOperation', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {boolean}   testResult\n     * @param   {Element}   target\n     * @param   {string}    action\n     * @param   {Operation} operation\n     * @return  {void}\n     */\n\n    evaluateHideShow: function (testResult, target, action, operation) {\n      var self = this,\n        filteredTestResult = false,\n        args = Array.prototype.slice.call(arguments, 1);\n      filteredTestResult = self.callFilters('testResultEvaluateHideShow', testResult, args);\n      self.callActions('beforeEvaluateHideShow', arguments);\n      if (filteredTestResult === true && action === 'show' || filteredTestResult === false && action === 'hide') {\n        operation.show.push(target);\n        !target.isShown && operation.toShow.push(target);\n      } else {\n        operation.hide.push(target);\n        target.isShown && operation.toHide.push(target);\n      }\n      self.callActions('afterEvaluateHideShow', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    sortOperation: function (operation) {\n      var self = this,\n        newOrder = [],\n        target = null,\n        el = null,\n        i = -1;\n      self.callActions('beforeSortOperation', arguments);\n      operation.startOrder = self.targets;\n      if (operation.newSort.collection) {\n        // Sort by collection\n\n        newOrder = [];\n        for (i = 0; el = operation.newSort.collection[i]; i++) {\n          if (self.dom.targets.indexOf(el) < 0) {\n            throw new Error(mixitup.messages.errorSortNonExistentElement());\n          }\n          target = new mixitup.Target();\n          target.init(el, self);\n          target.isInDom = true;\n          newOrder.push(target);\n        }\n        operation.newOrder = newOrder;\n      } else if (operation.newSort.order === 'random') {\n        // Sort random\n\n        operation.newOrder = h.arrayShuffle(operation.startOrder);\n      } else if (operation.newSort.attribute === '') {\n        // Sort by default\n\n        operation.newOrder = self.origOrder.slice();\n        if (operation.newSort.order === 'desc') {\n          operation.newOrder.reverse();\n        }\n      } else {\n        // Sort by attribute\n\n        operation.newOrder = operation.startOrder.slice();\n        operation.newOrder.sort(function (a, b) {\n          return self.compare(a, b, operation.newSort);\n        });\n      }\n      if (h.isEqualArray(operation.newOrder, operation.startOrder)) {\n        operation.willSort = false;\n      }\n      self.callActions('afterSortOperation', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {mixitup.Target}        a\n     * @param   {mixitup.Target}        b\n     * @param   {mixitup.CommandSort}   command\n     * @return  {Number}\n     */\n\n    compare: function (a, b, command) {\n      var self = this,\n        order = command.order,\n        attrA = self.getAttributeValue(a, command.attribute),\n        attrB = self.getAttributeValue(b, command.attribute);\n      if (isNaN(attrA * 1) || isNaN(attrB * 1)) {\n        attrA = attrA.toLowerCase();\n        attrB = attrB.toLowerCase();\n      } else {\n        attrA = attrA * 1;\n        attrB = attrB * 1;\n      }\n      if (attrA < attrB) {\n        return order === 'asc' ? -1 : 1;\n      }\n      if (attrA > attrB) {\n        return order === 'asc' ? 1 : -1;\n      }\n      if (attrA === attrB && command.next) {\n        return self.compare(a, b, command.next);\n      }\n      return 0;\n    },\n    /**\n     * Reads the values of any data attributes present the provided target element\n     * which match the current sort command.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.Target}    target\n     * @param   {string}            [attribute]\n     * @return  {(String|Number)}\n     */\n\n    getAttributeValue: function (target, attribute) {\n      var self = this,\n        value = '';\n      value = target.dom.el.getAttribute('data-' + attribute);\n      if (value === null) {\n        if (self.config.debug.showWarnings) {\n          // Encourage users to assign values to all targets to avoid erroneous sorting\n          // when types are mixed\n\n          console.warn(mixitup.messages.warningInconsistentSortingAttributes({\n            attribute: 'data-' + attribute\n          }));\n        }\n      }\n\n      // If an attribute is not present, return 0 as a safety value\n\n      return self.callFilters('valueGetAttributeValue', value || 0, arguments);\n    },\n    /**\n     * Inserts elements into the DOM in the appropriate\n     * order using a document fragment for minimal\n     * DOM thrashing\n     *\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {boolean}   isResetting\n     * @param   {Operation} operation\n     * @return  {void}\n     */\n\n    printSort: function (isResetting, operation) {\n      var self = this,\n        startOrder = isResetting ? operation.newOrder : operation.startOrder,\n        newOrder = isResetting ? operation.startOrder : operation.newOrder,\n        nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,\n        frag = window.document.createDocumentFragment(),\n        whitespace = null,\n        target = null,\n        el = null,\n        i = -1;\n      self.callActions('beforePrintSort', arguments);\n\n      // Empty the container\n\n      for (i = 0; target = startOrder[i]; i++) {\n        el = target.dom.el;\n        if (el.style.position === 'absolute') continue;\n        h.removeWhitespace(el.previousSibling);\n        el.parentElement.removeChild(el);\n      }\n      whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;\n      if (whitespace && whitespace.nodeName === '#text') {\n        h.removeWhitespace(whitespace);\n      }\n      for (i = 0; target = newOrder[i]; i++) {\n        // Add targets into a document fragment\n\n        el = target.dom.el;\n        if (h.isElement(frag.lastChild)) {\n          frag.appendChild(window.document.createTextNode(' '));\n        }\n        frag.appendChild(el);\n      }\n\n      // Insert the document fragment into the container\n      // before any other non-target elements\n\n      if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {\n        frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);\n      }\n      if (nextSibling) {\n        frag.appendChild(window.document.createTextNode(' '));\n        self.dom.parent.insertBefore(frag, nextSibling);\n      } else {\n        self.dom.parent.appendChild(frag);\n      }\n      self.callActions('afterPrintSort', arguments);\n    },\n    /**\n     * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string}                sortString\n     * @param   {mixitup.CommandSort}   command\n     * @return  {mixitup.CommandSort}\n     */\n\n    parseSortString: function (sortString, command) {\n      var self = this,\n        rules = sortString.split(' '),\n        current = command,\n        rule = [],\n        i = -1;\n\n      // command.sortString = sortString;\n\n      for (i = 0; i < rules.length; i++) {\n        rule = rules[i].split(':');\n        current.sortString = rules[i];\n        current.attribute = h.dashCase(rule[0]);\n        current.order = rule[1] || 'asc';\n        switch (current.attribute) {\n          case 'default':\n            // treat \"default\" as sorting by no attribute\n\n            current.attribute = '';\n            break;\n          case 'random':\n            // treat \"random\" as an order not an attribute\n\n            current.attribute = '';\n            current.order = 'random';\n            break;\n        }\n        if (!current.attribute || current.order === 'random') break;\n        if (i < rules.length - 1) {\n          // Embed reference to the next command\n\n          current.next = new mixitup.CommandSort();\n          h.freeze(current);\n          current = current.next;\n        }\n      }\n      return self.callFilters('commandsParseSort', command, arguments);\n    },\n    /**\n     * Parses all effects out of the user-defined `animation.effects` string into\n     * their respective properties and units.\n     *\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @return  {void}\n     */\n\n    parseEffects: function () {\n      var self = this,\n        transformName = '',\n        effectsIn = self.config.animation.effectsIn || self.config.animation.effects,\n        effectsOut = self.config.animation.effectsOut || self.config.animation.effects;\n      self.callActions('beforeParseEffects', arguments);\n      self.effectsIn = new mixitup.StyleData();\n      self.effectsOut = new mixitup.StyleData();\n      self.transformIn = [];\n      self.transformOut = [];\n      self.effectsIn.opacity = self.effectsOut.opacity = 1;\n      self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);\n      self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);\n      for (transformName in mixitup.transformDefaults) {\n        if (!(mixitup.transformDefaults[transformName] instanceof mixitup.TransformData)) {\n          continue;\n        }\n        self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);\n        self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);\n      }\n      self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);\n      self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);\n      self.callActions('afterParseEffects', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {string}    effectName\n     * @param   {string}    effectString\n     * @param   {StyleData} effects\n     * @param   {String[]}  transform\n     * @param   {boolean}   [isOut]\n     */\n\n    parseEffect: function (effectName, effectString, effects, transform, isOut) {\n      var self = this,\n        re = /\\(([^)]+)\\)/,\n        propIndex = -1,\n        str = '',\n        match = [],\n        val = '',\n        units = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],\n        unit = '',\n        i = -1;\n      self.callActions('beforeParseEffect', arguments);\n      if (typeof effectString !== 'string') {\n        throw new TypeError(mixitup.messages.errorConfigInvalidAnimationEffects());\n      }\n      if (effectString.indexOf(effectName) < 0) {\n        // The effect is not present in the effects string\n\n        if (effectName === 'stagger') {\n          // Reset stagger to 0\n\n          self.staggerDuration = 0;\n        }\n        return;\n      }\n\n      // The effect is present\n\n      propIndex = effectString.indexOf(effectName + '(');\n      if (propIndex > -1) {\n        // The effect has a user defined value in parentheses\n\n        // Extract from the first parenthesis to the end of string\n\n        str = effectString.substring(propIndex);\n\n        // Match any number of characters between \"(\" and \")\"\n\n        match = re.exec(str);\n        val = match[1];\n      }\n      switch (effectName) {\n        case 'fade':\n          effects.opacity = val ? parseFloat(val) : 0;\n          break;\n        case 'stagger':\n          self.staggerDuration = val ? parseFloat(val) : 100;\n\n          // TODO: Currently stagger must be applied globally, but\n          // if seperate values are specified for in/out, this should\n          // be respected\n\n          break;\n        default:\n          // All other effects are transforms following the same structure\n\n          if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {\n            effects[effectName].value = (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value) * -1;\n          } else {\n            effects[effectName].value = val ? parseFloat(val) : mixitup.transformDefaults[effectName].value;\n          }\n          if (val) {\n            for (i = 0; unit = units[i]; i++) {\n              if (val.indexOf(unit) > -1) {\n                effects[effectName].unit = unit;\n                break;\n              }\n            }\n          } else {\n            effects[effectName].unit = mixitup.transformDefaults[effectName].unit;\n          }\n          transform.push(effectName + '(' + effects[effectName].value + effects[effectName].unit + ')');\n      }\n      self.callActions('afterParseEffect', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {State}\n     */\n\n    buildState: function (operation) {\n      var self = this,\n        state = new mixitup.State(),\n        target = null,\n        i = -1;\n      self.callActions('beforeBuildState', arguments);\n\n      // Map target elements into state arrays.\n      // the real target objects should never be exposed\n\n      for (i = 0; target = self.targets[i]; i++) {\n        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n          state.targets.push(target.dom.el);\n        }\n      }\n      for (i = 0; target = operation.matching[i]; i++) {\n        state.matching.push(target.dom.el);\n      }\n      for (i = 0; target = operation.show[i]; i++) {\n        state.show.push(target.dom.el);\n      }\n      for (i = 0; target = operation.hide[i]; i++) {\n        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n          state.hide.push(target.dom.el);\n        }\n      }\n      state.id = self.id;\n      state.container = self.dom.container;\n      state.activeFilter = operation.newFilter;\n      state.activeSort = operation.newSort;\n      state.activeDataset = operation.newDataset;\n      state.activeContainerClassName = operation.newContainerClassName;\n      state.hasFailed = operation.hasFailed;\n      state.totalTargets = self.targets.length;\n      state.totalShow = operation.show.length;\n      state.totalHide = operation.hide.length;\n      state.totalMatching = operation.matching.length;\n      state.triggerElement = operation.triggerElement;\n      return self.callFilters('stateBuildState', state, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {boolean}   shouldAnimate\n     * @param   {Operation} operation\n     * @return  {void}\n     */\n\n    goMix: function (shouldAnimate, operation) {\n      var self = this,\n        deferred = null;\n      self.callActions('beforeGoMix', arguments);\n\n      // If the animation duration is set to 0ms,\n      // or no effects specified,\n      // or the container is hidden\n      // then abort animation\n\n      if (!self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)) {\n        shouldAnimate = false;\n      }\n      if (!operation.toShow.length && !operation.toHide.length && !operation.willSort && !operation.willChangeLayout) {\n        // If nothing to show or hide, and not sorting or\n        // changing layout\n\n        shouldAnimate = false;\n      }\n      if (!operation.startState.show.length && !operation.show.length) {\n        // If nothing currently shown, nothing to show\n\n        shouldAnimate = false;\n      }\n      mixitup.events.fire('mixStart', self.dom.container, {\n        state: operation.startState,\n        futureState: operation.newState,\n        instance: self\n      }, self.dom.document);\n      if (typeof self.config.callbacks.onMixStart === 'function') {\n        self.config.callbacks.onMixStart.call(self.dom.container, operation.startState, operation.newState, self);\n      }\n      h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n      if (!self.userDeferred) {\n        // Queue empty, no pending operations\n\n        deferred = self.userDeferred = h.defer(mixitup.libraries);\n      } else {\n        // Use existing deferred\n\n        deferred = self.userDeferred;\n      }\n      self.isBusy = true;\n      if (!shouldAnimate || !mixitup.features.has.transitions) {\n        // Abort\n\n        if (self.config.debug.fauxAsync) {\n          setTimeout(function () {\n            self.cleanUp(operation);\n          }, self.config.animation.duration);\n        } else {\n          self.cleanUp(operation);\n        }\n        return self.callFilters('promiseGoMix', deferred.promise, arguments);\n      }\n\n      // If we should animate and the platform supports transitions, go for it\n\n      if (window.pageYOffset !== operation.docState.scrollTop) {\n        window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);\n      }\n      if (self.config.animation.applyPerspective) {\n        self.dom.parent.style[mixitup.features.perspectiveProp] = self.config.animation.perspectiveDistance;\n        self.dom.parent.style[mixitup.features.perspectiveOriginProp] = self.config.animation.perspectiveOrigin;\n      }\n      if (self.config.animation.animateResizeContainer && operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n      }\n      if (self.config.animation.animateResizeContainer && operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n      }\n      if (operation.startHeight === operation.newHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n      }\n      if (operation.startWidth === operation.newWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n      }\n      if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {\n        self.dom.parent.style.overflow = 'hidden';\n      }\n      requestAnimationFrame(function () {\n        self.moveTargets(operation);\n      });\n      return self.callFilters('promiseGoMix', deferred.promise, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    getStartMixData: function (operation) {\n      var self = this,\n        parentStyle = window.getComputedStyle(self.dom.parent),\n        parentRect = self.dom.parent.getBoundingClientRect(),\n        target = null,\n        data = {},\n        i = -1,\n        boxSizing = parentStyle[mixitup.features.boxSizingProp];\n      self.incPadding = boxSizing === 'border-box';\n      self.callActions('beforeGetStartMixData', arguments);\n      for (i = 0; target = operation.show[i]; i++) {\n        data = target.getPosData();\n        operation.showPosData[i] = {\n          startPosData: data\n        };\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        data = target.getPosData();\n        operation.toHidePosData[i] = {\n          startPosData: data\n        };\n      }\n      operation.startX = parentRect.left;\n      operation.startY = parentRect.top;\n      operation.startHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);\n      operation.startWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);\n      self.callActions('afterGetStartMixData', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    setInter: function (operation) {\n      var self = this,\n        target = null,\n        i = -1;\n      self.callActions('beforeSetInter', arguments);\n\n      // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width\n\n      if (self.config.animation.clampHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n        self.dom.parent.style.overflow = 'hidden';\n      }\n      if (self.config.animation.clampWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n        self.dom.parent.style.overflow = 'hidden';\n      }\n      for (i = 0; target = operation.toShow[i]; i++) {\n        target.show();\n      }\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.startContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n      self.callActions('afterSetInter', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    getInterMixData: function (operation) {\n      var self = this,\n        target = null,\n        i = -1;\n      self.callActions('beforeGetInterMixData', arguments);\n      for (i = 0; target = operation.show[i]; i++) {\n        operation.showPosData[i].interPosData = target.getPosData();\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        operation.toHidePosData[i].interPosData = target.getPosData();\n      }\n      self.callActions('afterGetInterMixData', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    setFinal: function (operation) {\n      var self = this,\n        target = null,\n        i = -1;\n      self.callActions('beforeSetFinal', arguments);\n      operation.willSort && self.printSort(false, operation);\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.hide();\n      }\n      self.callActions('afterSetFinal', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    getFinalMixData: function (operation) {\n      var self = this,\n        parentStyle = null,\n        parentRect = null,\n        target = null,\n        i = -1;\n      self.callActions('beforeGetFinalMixData', arguments);\n      for (i = 0; target = operation.show[i]; i++) {\n        operation.showPosData[i].finalPosData = target.getPosData();\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        operation.toHidePosData[i].finalPosData = target.getPosData();\n      }\n\n      // Remove clamping\n\n      if (self.config.animation.clampHeight || self.config.animation.clampWidth) {\n        self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = '';\n      }\n      if (!self.incPadding) {\n        parentStyle = window.getComputedStyle(self.dom.parent);\n      }\n      parentRect = self.dom.parent.getBoundingClientRect();\n      operation.newX = parentRect.left;\n      operation.newY = parentRect.top;\n      operation.newHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);\n      operation.newWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);\n      operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;\n      operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;\n      if (operation.willSort) {\n        self.printSort(true, operation);\n      }\n      for (i = 0; target = operation.toShow[i]; i++) {\n        target.hide();\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.show();\n      }\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.newContainerClassName);\n        h.addClass(self.dom.container, self.config.layout.containerClassName);\n      }\n      self.callActions('afterGetFinalMixData', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since    3.0.0\n     * @param    {Operation}     operation\n     */\n\n    getTweenData: function (operation) {\n      var self = this,\n        target = null,\n        posData = null,\n        effectNames = Object.getOwnPropertyNames(self.effectsIn),\n        effectName = '',\n        effect = null,\n        widthChange = -1,\n        heightChange = -1,\n        i = -1,\n        j = -1;\n      self.callActions('beforeGetTweenData', arguments);\n      for (i = 0; target = operation.show[i]; i++) {\n        posData = operation.showPosData[i];\n        posData.posIn = new mixitup.StyleData();\n        posData.posOut = new mixitup.StyleData();\n        posData.tweenData = new mixitup.StyleData();\n\n        // Process x and y\n\n        if (target.isShown) {\n          posData.posIn.x = posData.startPosData.x - posData.interPosData.x;\n          posData.posIn.y = posData.startPosData.y - posData.interPosData.y;\n        } else {\n          posData.posIn.x = posData.posIn.y = 0;\n        }\n        posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;\n        posData.posOut.y = posData.finalPosData.y - posData.interPosData.y;\n\n        // Process opacity\n\n        posData.posIn.opacity = target.isShown ? 1 : self.effectsIn.opacity;\n        posData.posOut.opacity = 1;\n        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity;\n\n        // Adjust x and y if not nudging\n\n        if (!target.isShown && !self.config.animation.nudge) {\n          posData.posIn.x = posData.posOut.x;\n          posData.posIn.y = posData.posOut.y;\n        }\n        posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n        posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n        // Process width, height, and margins\n\n        if (self.config.animation.animateResizeTargets) {\n          posData.posIn.width = posData.startPosData.width;\n          posData.posIn.height = posData.startPosData.height;\n\n          // \"||\" Prevents width/height change from including 0 width/height if hiding or showing\n\n          widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;\n          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n          heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;\n          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n          posData.posOut.width = posData.finalPosData.width;\n          posData.posOut.height = posData.finalPosData.height;\n          widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;\n          posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;\n          heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;\n          posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;\n          posData.tweenData.width = posData.posOut.width - posData.posIn.width;\n          posData.tweenData.height = posData.posOut.height - posData.posIn.height;\n          posData.tweenData.marginRight = posData.posOut.marginRight - posData.posIn.marginRight;\n          posData.tweenData.marginBottom = posData.posOut.marginBottom - posData.posIn.marginBottom;\n        }\n\n        // Process transforms\n\n        for (j = 0; effectName = effectNames[j]; j++) {\n          effect = self.effectsIn[effectName];\n          if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n          posData.posIn[effectName].value = effect.value;\n          posData.posOut[effectName].value = 0;\n          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;\n          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;\n        }\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        posData = operation.toHidePosData[i];\n        posData.posIn = new mixitup.StyleData();\n        posData.posOut = new mixitup.StyleData();\n        posData.tweenData = new mixitup.StyleData();\n\n        // Process x and y\n\n        posData.posIn.x = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;\n        posData.posIn.y = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;\n        posData.posOut.x = self.config.animation.nudge ? 0 : posData.posIn.x;\n        posData.posOut.y = self.config.animation.nudge ? 0 : posData.posIn.y;\n        posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n        posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n        // Process width, height, and margins\n\n        if (self.config.animation.animateResizeTargets) {\n          posData.posIn.width = posData.startPosData.width;\n          posData.posIn.height = posData.startPosData.height;\n          widthChange = posData.startPosData.width - posData.interPosData.width;\n          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n          heightChange = posData.startPosData.height - posData.interPosData.height;\n          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n        }\n\n        // Process opacity\n\n        posData.posIn.opacity = 1;\n        posData.posOut.opacity = self.effectsOut.opacity;\n        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity;\n\n        // Process transforms\n\n        for (j = 0; effectName = effectNames[j]; j++) {\n          effect = self.effectsOut[effectName];\n          if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n          posData.posIn[effectName].value = 0;\n          posData.posOut[effectName].value = effect.value;\n          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;\n          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;\n        }\n      }\n      self.callActions('afterGetTweenData', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    moveTargets: function (operation) {\n      var self = this,\n        target = null,\n        moveData = null,\n        posData = null,\n        statusChange = '',\n        willTransition = false,\n        staggerIndex = -1,\n        i = -1,\n        checkProgress = self.checkProgress.bind(self);\n      self.callActions('beforeMoveTargets', arguments);\n\n      // TODO: this is an extra loop in addition to the calcs\n      // done in getOperation, could some of this be done there?\n\n      for (i = 0; target = operation.show[i]; i++) {\n        moveData = new mixitup.IMoveData();\n        posData = operation.showPosData[i];\n        statusChange = target.isShown ? 'none' : 'show';\n        willTransition = self.willTransition(statusChange, operation.hasEffect, posData.posIn, posData.posOut);\n        if (willTransition) {\n          // Prevent non-transitioning targets from incrementing the staggerIndex\n\n          staggerIndex++;\n        }\n        target.show();\n        moveData.posIn = posData.posIn;\n        moveData.posOut = posData.posOut;\n        moveData.statusChange = statusChange;\n        moveData.staggerIndex = staggerIndex;\n        moveData.operation = operation;\n        moveData.callback = willTransition ? checkProgress : null;\n        target.move(moveData);\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        posData = operation.toHidePosData[i];\n        moveData = new mixitup.IMoveData();\n        statusChange = 'hide';\n        willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);\n        moveData.posIn = posData.posIn;\n        moveData.posOut = posData.posOut;\n        moveData.statusChange = statusChange;\n        moveData.staggerIndex = i;\n        moveData.operation = operation;\n        moveData.callback = willTransition ? checkProgress : null;\n        target.move(moveData);\n      }\n      if (self.config.animation.animateResizeContainer) {\n        self.dom.parent.style[mixitup.features.transitionProp] = 'height ' + self.config.animation.duration + 'ms ease, ' + 'width ' + self.config.animation.duration + 'ms ease ';\n        requestAnimationFrame(function () {\n          if (operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {\n            self.dom.parent.style.height = operation.newHeight + 'px';\n          }\n          if (operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {\n            self.dom.parent.style.width = operation.newWidth + 'px';\n          }\n        });\n      }\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, self.config.layout.ContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n      self.callActions('afterMoveTargets', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @return  {boolean}\n     */\n\n    hasEffect: function () {\n      var self = this,\n        EFFECTABLES = ['scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'],\n        effectName = '',\n        effect = null,\n        result = false,\n        value = -1,\n        i = -1;\n      if (self.effectsIn.opacity !== 1) {\n        return self.callFilters('resultHasEffect', true, arguments);\n      }\n      for (i = 0; effectName = EFFECTABLES[i]; i++) {\n        effect = self.effectsIn[effectName];\n        value = typeof effect && effect.value !== 'undefined' ? effect.value : effect;\n        if (value !== 0) {\n          result = true;\n          break;\n        }\n      }\n      return self.callFilters('resultHasEffect', result, arguments);\n    },\n    /**\n     * Determines if a target element will transition in\n     * some fasion and therefore requires binding of\n     * transitionEnd\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string}        statusChange\n     * @param   {boolean}       hasEffect\n     * @param   {StyleData}     posIn\n     * @param   {StyleData}     posOut\n     * @return  {boolean}\n     */\n\n    willTransition: function (statusChange, hasEffect, posIn, posOut) {\n      var self = this,\n        result = false;\n      if (!h.isVisible(self.dom.container)) {\n        // If the container is not visible, the transitionEnd\n        // event will not occur and MixItUp will hang\n\n        result = false;\n      } else if (statusChange !== 'none' && hasEffect || posIn.x !== posOut.x || posIn.y !== posOut.y) {\n        // If opacity and/or translate will change\n\n        result = true;\n      } else if (self.config.animation.animateResizeTargets) {\n        // Check if width, height or margins will change\n\n        result = posIn.width !== posOut.width || posIn.height !== posOut.height || posIn.marginRight !== posOut.marginRight || posIn.marginTop !== posOut.marginTop;\n      } else {\n        result = false;\n      }\n      return self.callFilters('resultWillTransition', result, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    checkProgress: function (operation) {\n      var self = this;\n      self.targetsDone++;\n      if (self.targetsBound === self.targetsDone) {\n        self.cleanUp(operation);\n      }\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Operation}     operation\n     * @return  {void}\n     */\n\n    cleanUp: function (operation) {\n      var self = this,\n        target = null,\n        whitespaceBefore = null,\n        whitespaceAfter = null,\n        nextInQueue = null,\n        i = -1;\n      self.callActions('beforeCleanUp', arguments);\n      self.targetsMoved = self.targetsImmovable = self.targetsBound = self.targetsDone = 0;\n      for (i = 0; target = operation.show[i]; i++) {\n        target.cleanUp();\n        target.show();\n      }\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.cleanUp();\n        target.hide();\n      }\n      if (operation.willSort) {\n        self.printSort(false, operation);\n      }\n\n      // Remove any styles applied to the parent container\n\n      self.dom.parent.style[mixitup.features.transitionProp] = self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = self.dom.parent.style[mixitup.features.perspectiveProp] = self.dom.parent.style[mixitup.features.perspectiveOriginProp] = '';\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.startContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n      if (operation.toRemove.length) {\n        for (i = 0; target = self.targets[i]; i++) {\n          if (operation.toRemove.indexOf(target) > -1) {\n            if ((whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' && (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text') {\n              h.removeWhitespace(whitespaceBefore);\n            }\n            if (!operation.willSort) {\n              // NB: Sorting will remove targets as a bi-product of `printSort()`\n\n              self.dom.parent.removeChild(target.dom.el);\n            }\n            self.targets.splice(i, 1);\n            target.isInDom = false;\n            i--;\n          }\n        }\n\n        // Since targets have been removed, the original order must be updated\n\n        self.origOrder = self.targets;\n      }\n      if (operation.willSort) {\n        self.targets = operation.newOrder;\n      }\n      self.state = operation.newState;\n      self.lastOperation = operation;\n      self.dom.targets = self.state.targets;\n\n      // mixEnd\n\n      mixitup.events.fire('mixEnd', self.dom.container, {\n        state: self.state,\n        instance: self\n      }, self.dom.document);\n      if (typeof self.config.callbacks.onMixEnd === 'function') {\n        self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);\n      }\n      if (operation.hasFailed) {\n        // mixFail\n\n        mixitup.events.fire('mixFail', self.dom.container, {\n          state: self.state,\n          instance: self\n        }, self.dom.document);\n        if (typeof self.config.callbacks.onMixFail === 'function') {\n          self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);\n        }\n        h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n      }\n\n      // User-defined callback function\n\n      if (typeof self.userCallback === 'function') {\n        self.userCallback.call(self.dom.container, self.state, self);\n      }\n      if (typeof self.userDeferred.resolve === 'function') {\n        self.userDeferred.resolve(self.state);\n      }\n      self.userCallback = null;\n      self.userDeferred = null;\n      self.lastClicked = null;\n      self.isToggling = false;\n      self.isBusy = false;\n      if (self.queue.length) {\n        self.callActions('beforeReadQueueCleanUp', arguments);\n        nextInQueue = self.queue.shift();\n\n        // Update non-public API properties stored in queue\n\n        self.userDeferred = nextInQueue.deferred;\n        self.isToggling = nextInQueue.isToggling;\n        self.lastClicked = nextInQueue.triggerElement;\n        if (nextInQueue.instruction.command instanceof mixitup.CommandMultimix) {\n          self.multimix.apply(self, nextInQueue.args);\n        } else {\n          self.dataset.apply(self, nextInQueue.args);\n        }\n      }\n      self.callActions('afterCleanUp', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseMultimixArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandMultimix();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        if (typeof arg === 'object') {\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      }\n\n      // Coerce arbitrary command arguments into typed command objects\n\n      if (instruction.command.insert && !(instruction.command.insert instanceof mixitup.CommandInsert)) {\n        instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;\n      }\n      if (instruction.command.remove && !(instruction.command.remove instanceof mixitup.CommandRemove)) {\n        instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;\n      }\n      if (instruction.command.filter && !(instruction.command.filter instanceof mixitup.CommandFilter)) {\n        instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;\n      }\n      if (instruction.command.sort && !(instruction.command.sort instanceof mixitup.CommandSort)) {\n        instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;\n      }\n      if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof mixitup.CommandChangeLayout)) {\n        instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;\n      }\n      instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseFilterArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandFilter();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (typeof arg === 'string') {\n          // Selector\n\n          instruction.command.selector = arg;\n        } else if (arg === null) {\n          instruction.command.collection = [];\n        } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n          // Single element\n\n          instruction.command.collection = [arg];\n        } else if (typeof arg === 'object' && typeof arg.length !== 'undefined') {\n          // Multiple elements in array, NodeList or jQuery collection\n\n          instruction.command.collection = h.arrayFromList(arg);\n        } else if (typeof arg === 'object') {\n          // Filter command\n\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      }\n      if (instruction.command.selector && instruction.command.collection) {\n        throw new Error(mixitup.messages.errorFilterInvalidArguments());\n      }\n      instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n    parseSortArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        sortString = '',\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandSort();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        switch (typeof arg) {\n          case 'string':\n            // Sort string\n\n            sortString = arg;\n            break;\n          case 'object':\n            // Array of element references\n\n            if (arg.length) {\n              instruction.command.collection = h.arrayFromList(arg);\n            }\n            break;\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n      if (sortString) {\n        instruction.command = self.parseSortString(sortString, instruction.command);\n      }\n      instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseInsertArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandInsert();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        if (typeof arg === 'number') {\n          // Insert index\n\n          instruction.command.index = arg;\n        } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {\n          // 'before'/'after'\n\n          instruction.command.position = arg;\n        } else if (typeof arg === 'string') {\n          // Markup\n\n          instruction.command.collection = h.arrayFromList(h.createElement(arg).childNodes);\n        } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n          // Single element\n\n          !instruction.command.collection.length ? instruction.command.collection = [arg] : instruction.command.sibling = arg;\n        } else if (typeof arg === 'object' && arg.length) {\n          // Multiple elements in array or jQuery collection\n\n          !instruction.command.collection.length ? instruction.command.collection = arg : instruction.command.sibling = arg[0];\n        } else if (typeof arg === 'object' && arg.childNodes && arg.childNodes.length) {\n          // Document fragment\n\n          !instruction.command.collection.length ? instruction.command.collection = h.arrayFromList(arg.childNodes) : instruction.command.sibling = arg.childNodes[0];\n        } else if (typeof arg === 'object') {\n          // Insert command\n\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      }\n      if (instruction.command.index && instruction.command.sibling) {\n        throw new Error(mixitup.messages.errorInsertInvalidArguments());\n      }\n      if (!instruction.command.collection.length && self.config.debug.showWarnings) {\n        console.warn(mixitup.messages.warningInsertNoElements());\n      }\n      instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseRemoveArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        target = null,\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandRemove();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        switch (typeof arg) {\n          case 'number':\n            if (self.targets[arg]) {\n              instruction.command.targets[0] = self.targets[arg];\n            }\n            break;\n          case 'string':\n            instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));\n            break;\n          case 'object':\n            if (arg && arg.length) {\n              instruction.command.collection = arg;\n            } else if (h.isElement(arg, self.dom.document)) {\n              instruction.command.collection = [arg];\n            } else {\n              // Remove command\n\n              h.extend(instruction.command, arg);\n            }\n            break;\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n      if (instruction.command.collection.length) {\n        for (i = 0; target = self.targets[i]; i++) {\n          if (instruction.command.collection.indexOf(target.dom.el) > -1) {\n            instruction.command.targets.push(target);\n          }\n        }\n      }\n      if (!instruction.command.targets.length && self.config.debug.showWarnings) {\n        console.warn(mixitup.messages.warningRemoveNoElements());\n      }\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseDatasetArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandDataset();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        switch (typeof arg) {\n          case 'object':\n            if (Array.isArray(arg) || typeof arg.length === 'number') {\n              instruction.command.dataset = arg;\n            } else {\n              // Change layout command\n\n              h.extend(instruction.command, arg);\n            }\n            break;\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Array<*>}  args\n     * @return  {mixitup.UserInstruction}\n     */\n\n    parseChangeLayoutArgs: function (args) {\n      var self = this,\n        instruction = new mixitup.UserInstruction(),\n        arg = null,\n        i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new mixitup.CommandChangeLayout();\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n        switch (typeof arg) {\n          case 'string':\n            instruction.command.containerClassName = arg;\n            break;\n          case 'object':\n            // Change layout command\n\n            h.extend(instruction.command, arg);\n            break;\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n      h.freeze(instruction);\n      return instruction;\n    },\n    /**\n     * @private\n     * @instance\n     * @since       3.0.0\n     * @param       {mixitup.QueueItem}         queueItem\n     * @return      {Promise.<mixitup.State>}\n     */\n\n    queueMix: function (queueItem) {\n      var self = this,\n        deferred = null,\n        toggleSelector = '';\n      self.callActions('beforeQueueMix', arguments);\n      deferred = h.defer(mixitup.libraries);\n      if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {\n        queueItem.deferred = deferred;\n        self.queue.push(queueItem);\n\n        // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.\n\n        if (self.config.controls.enable) {\n          if (self.isToggling) {\n            self.buildToggleArray(queueItem.instruction.command);\n            toggleSelector = self.getToggleSelector();\n            self.updateControls({\n              filter: {\n                selector: toggleSelector\n              }\n            });\n          } else {\n            self.updateControls(queueItem.instruction.command);\n          }\n        }\n      } else {\n        if (self.config.debug.showWarnings) {\n          console.warn(mixitup.messages.warningMultimixInstanceQueueFull());\n        }\n        deferred.resolve(self.state);\n        mixitup.events.fire('mixBusy', self.dom.container, {\n          state: self.state,\n          instance: self\n        }, self.dom.document);\n        if (typeof self.config.callbacks.onMixBusy === 'function') {\n          self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);\n        }\n      }\n      return self.callFilters('promiseQueueMix', deferred.promise, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Array.<object>}    newDataset\n     * @return  {Operation}\n     */\n\n    getDataOperation: function (newDataset) {\n      var self = this,\n        operation = new mixitup.Operation(),\n        startDataset = [];\n      operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);\n      if (self.dom.targets.length && !(startDataset = self.state.activeDataset || []).length) {\n        throw new Error(mixitup.messages.errorDatasetNotSet());\n      }\n      operation.id = h.randomHex();\n      operation.startState = self.state;\n      operation.startDataset = startDataset;\n      operation.newDataset = newDataset.slice();\n      self.diffDatasets(operation);\n      operation.startOrder = self.targets;\n      operation.newOrder = operation.show;\n      if (self.config.animation.enable) {\n        self.getStartMixData(operation);\n        self.setInter(operation);\n        operation.docState = h.getDocumentState(self.dom.document);\n        self.getInterMixData(operation);\n        self.setFinal(operation);\n        self.getFinalMixData(operation);\n        self.parseEffects();\n        operation.hasEffect = self.hasEffect();\n        self.getTweenData(operation);\n      }\n      self.targets = operation.show.slice();\n      operation.newState = self.buildState(operation);\n\n      // NB: Targets to be removed must be included in `self.targets` for removal during clean up,\n      // but are added after state is built so that state is accurate\n\n      Array.prototype.push.apply(self.targets, operation.toRemove);\n      operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);\n      return operation;\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.Operation} operation\n     * @return  {void}\n     */\n\n    diffDatasets: function (operation) {\n      var self = this,\n        persistantStartIds = [],\n        persistantNewIds = [],\n        insertedTargets = [],\n        data = null,\n        target = null,\n        el = null,\n        frag = null,\n        nextEl = null,\n        uids = {},\n        id = '',\n        i = -1;\n      self.callActions('beforeDiffDatasets', arguments);\n      for (i = 0; data = operation.newDataset[i]; i++) {\n        if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n          throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n            uidKey: self.config.data.uidKey\n          }));\n        }\n        if (!uids[id]) {\n          uids[id] = true;\n        } else {\n          throw new Error(mixitup.messages.errorDatasetDuplicateUid({\n            uid: id\n          }));\n        }\n        if ((target = self.cache[id]) instanceof mixitup.Target) {\n          // Already in cache\n\n          if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {\n            // change detected\n\n            el = target.render(data);\n            target.data = data;\n            if (el !== target.dom.el) {\n              // Update target element reference\n\n              if (target.isInDom) {\n                target.unbindEvents();\n                self.dom.parent.replaceChild(el, target.dom.el);\n              }\n              if (!target.isShown) {\n                el.style.display = 'none';\n              }\n              target.dom.el = el;\n              if (target.isInDom) {\n                target.bindEvents();\n              }\n            }\n          }\n          el = target.dom.el;\n        } else {\n          // New target\n\n          target = new mixitup.Target();\n          target.init(null, self, data);\n          target.hide();\n        }\n        if (!target.isInDom) {\n          // Adding to DOM\n\n          if (!frag) {\n            // Open frag\n\n            frag = self.dom.document.createDocumentFragment();\n          }\n          if (frag.lastElementChild) {\n            frag.appendChild(self.dom.document.createTextNode(' '));\n          }\n          frag.appendChild(target.dom.el);\n          target.isInDom = true;\n          target.unbindEvents();\n          target.bindEvents();\n          target.hide();\n          operation.toShow.push(target);\n          insertedTargets.push(target);\n        } else {\n          // Already in DOM\n\n          nextEl = target.dom.el.nextElementSibling;\n          persistantNewIds.push(id);\n          if (frag) {\n            // Close and insert previously opened frag\n\n            if (frag.lastElementChild) {\n              frag.appendChild(self.dom.document.createTextNode(' '));\n            }\n            self.insertDatasetFrag(frag, target.dom.el, insertedTargets);\n            frag = null;\n          }\n        }\n        operation.show.push(target);\n      }\n      if (frag) {\n        // Unclosed frag remaining\n\n        nextEl = nextEl || self.config.layout.siblingAfter;\n        if (nextEl) {\n          frag.appendChild(self.dom.document.createTextNode(' '));\n        }\n        self.insertDatasetFrag(frag, nextEl, insertedTargets);\n      }\n      for (i = 0; data = operation.startDataset[i]; i++) {\n        id = data[self.config.data.uidKey];\n        target = self.cache[id];\n        if (operation.show.indexOf(target) < 0) {\n          // Previously shown but now absent\n\n          operation.hide.push(target);\n          operation.toHide.push(target);\n          operation.toRemove.push(target);\n        } else {\n          persistantStartIds.push(id);\n        }\n      }\n      if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {\n        operation.willSort = true;\n      }\n      self.callActions('afterDiffDatasets', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.1.5\n     * @param   {DocumentFragment}          frag\n     * @param   {(HTMLElement|null)}        nextEl\n     * @param   {Array.<mixitup.Target>}    targets\n     * @return  {void}\n     */\n\n    insertDatasetFrag: function (frag, nextEl, targets) {\n      var self = this;\n      var insertAt = nextEl ? h.arrayFromList(self.dom.parent.children).indexOf(nextEl) : self.targets.length;\n      self.dom.parent.insertBefore(frag, nextEl);\n      while (targets.length) {\n        self.targets.splice(insertAt, 0, targets.shift());\n        insertAt++;\n      }\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.CommandSort} sortCommandA\n     * @param   {mixitup.CommandSort} sortCommandB\n     * @return  {boolean}\n     */\n\n    willSort: function (sortCommandA, sortCommandB) {\n      var self = this,\n        result = false;\n      if (self.config.behavior.liveSort || sortCommandA.order === 'random' || sortCommandA.attribute !== sortCommandB.attribute || sortCommandA.order !== sortCommandB.order || sortCommandA.collection !== sortCommandB.collection || sortCommandA.next === null && sortCommandB.next || sortCommandA.next && sortCommandB.next === null) {\n        result = true;\n      } else if (sortCommandA.next && sortCommandB.next) {\n        result = self.willSort(sortCommandA.next, sortCommandB.next);\n      } else {\n        result = false;\n      }\n      return self.callFilters('resultWillSort', result, arguments);\n    },\n    /**\n     * A shorthand method for `.filter('all')`. Shows all targets in the container.\n     *\n     * @example\n     *\n     * .show()\n     *\n     * @example <caption>Example: Showing all targets</caption>\n     *\n     * mixer.show()\n     *     .then(function(state) {\n     *         console.log(state.totalShow === state.totalTargets); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @return      {Promise.<mixitup.State>}\n     */\n\n    show: function () {\n      var self = this;\n      return self.filter('all');\n    },\n    /**\n     * A shorthand method for `.filter('none')`. Hides all targets in the container.\n     *\n     * @example\n     *\n     * .hide()\n     *\n     * @example <caption>Example: Hiding all targets</caption>\n     *\n     * mixer.hide()\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 0); // true\n     *         console.log(state.totalHide === state.totalTargets); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @return      {Promise.<mixitup.State>}\n     */\n\n    hide: function () {\n      var self = this;\n      return self.filter('none');\n    },\n    /**\n     * Returns a boolean indicating whether or not a MixItUp operation is\n     * currently in progress.\n     *\n     * @example\n     *\n     * .isMixing()\n     *\n     * @example <caption>Example: Checking the status of a mixer</caption>\n     *\n     * mixer.sort('random', function() {\n     *     console.log(mixer.isMixing()) // false\n     * });\n     *\n     * console.log(mixer.isMixing()) // true\n     *\n     * @public\n     * @instance\n     * @since   2.0.0\n     * @return  {boolean}\n     */\n\n    isMixing: function () {\n      var self = this;\n      return self.isBusy;\n    },\n    /**\n     * Filters all targets in the container by a provided selector string, or the values `'all'`\n     * or `'none'`. Only targets matching the selector will be shown.\n     *\n     * @example\n     *\n     * .filter(selector [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Filtering targets by a class selector</caption>\n     *\n     * mixer.filter('.category-a')\n     *     .then(function(state) {\n     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true\n     *     });\n     *\n     * @example <caption>Example 2: Filtering targets by an attribute selector</caption>\n     *\n     * mixer.filter('[data-category~=\"a\"]')\n     *     .then(function(state) {\n     *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~=\"a\"]').length); // true\n     *     });\n     *\n     * @example <caption>Example 3: Filtering targets by a compound selector</caption>\n     *\n     * // Show only those targets with the classes 'category-a' AND 'category-b'\n     *\n     * mixer.filter('.category-a.category-c')\n     *     .then(function(state) {\n     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true\n     *     });\n     *\n     * @example <caption>Example 4: Filtering via an element collection</caption>\n     *\n     * var collection = Array.from(container.querySelectorAll('.mix'));\n     *\n     * console.log(collection.length); // 34\n     *\n     * // Filter the collection manually using Array.prototype.filter\n     *\n     * var filtered = collection.filter(function(target) {\n     *    return parseInt(target.getAttribute('data-price')) > 10;\n     * });\n     *\n     * console.log(filtered.length); // 22\n     *\n     * // Pass the filtered collection to MixItUp\n     *\n     * mixer.filter(filtered)\n     *    .then(function(state) {\n     *        console.log(state.activeFilter.collection.length === 22); // true\n     *    });\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector\n     *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    filter: function () {\n      var self = this,\n        instruction = self.parseFilterArgs(arguments);\n      return self.multimix({\n        filter: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n    /**\n     * Adds an additional selector to the currently active filter selector, concatenating\n     * as per the logic defined in `controls.toggleLogic`.\n     *\n     * @example\n     *\n     * .toggleOn(selector [, animate] [, callback])\n     *\n     * @example <caption>Example: Toggling on a filter selector</caption>\n     *\n     * console.log(mixer.getState().activeFilter.selector); // '.category-a'\n     *\n     * mixer.toggleOn('.category-b')\n     *     .then(function(state) {\n     *         console.log(state.activeFilter.selector); // '.category-a, .category-b'\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {string}    selector\n     *      Any valid CSS selector (i.e. `'.category-a'`)\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    toggleOn: function () {\n      var self = this,\n        instruction = self.parseFilterArgs(arguments),\n        selector = instruction.command.selector,\n        toggleSelector = '';\n      self.isToggling = true;\n      if (self.toggleArray.indexOf(selector) < 0) {\n        self.toggleArray.push(selector);\n      }\n      toggleSelector = self.getToggleSelector();\n      return self.multimix({\n        filter: toggleSelector\n      }, instruction.animate, instruction.callback);\n    },\n    /**\n     * Removes a selector from the active filter selector.\n     *\n     * @example\n     *\n     * .toggleOff(selector [, animate] [, callback])\n     *\n     * @example <caption>Example: Toggling off a filter selector</caption>\n     *\n     * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'\n     *\n     * mixer.toggleOff('.category-b')\n     *     .then(function(state) {\n     *         console.log(state.activeFilter.selector); // '.category-a'\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {string}    selector\n     *      Any valid CSS selector (i.e. `'.category-a'`)\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    toggleOff: function () {\n      var self = this,\n        instruction = self.parseFilterArgs(arguments),\n        selector = instruction.command.selector,\n        selectorIndex = self.toggleArray.indexOf(selector),\n        toggleSelector = '';\n      self.isToggling = true;\n      if (selectorIndex > -1) {\n        self.toggleArray.splice(selectorIndex, 1);\n      }\n      toggleSelector = self.getToggleSelector();\n      return self.multimix({\n        filter: toggleSelector\n      }, instruction.animate, instruction.callback);\n    },\n    /**\n     * Sorts all targets in the container according to a provided sort string.\n     *\n     * @example\n     *\n     * .sort(sortString [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Sorting by the default DOM order</caption>\n     *\n     * // Reverse the default order of the targets\n     *\n     * mixer.sort('default:desc')\n     *     .then(function(state) {\n     *         console.log(state.activeSort.attribute === 'default'); // true\n     *         console.log(state.activeSort.order === 'desc'); // true\n     *     });\n     *\n     * @example <caption>Example 2: Sorting by a custom data-attribute</caption>\n     *\n     * // Sort the targets by the value of a `data-published-date` attribute\n     *\n     * mixer.sort('published-date:asc')\n     *     .then(function(state) {\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\n     *         console.log(state.activeSort.order === 'asc'); // true\n     *     });\n     *\n     * @example <caption>Example 3: Sorting by multiple attributes</caption>\n     *\n     * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`\n     *\n     * mixer.sort('published-date:desc data-title:asc')\n     *     .then(function(state) {\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\n     *         console.log(state.activeSort.order === 'desc'); // true\n     *\n     *         console.log(state.activeSort.next.attribute === 'title'); // true\n     *         console.log(state.activeSort.next.order === 'asc'); // true\n     *     });\n     *\n     * @example <caption>Example 4: Sorting by random</caption>\n     *\n     * mixer.sort('random')\n     *     .then(function(state) {\n     *         console.log(state.activeSort.order === 'random') // true\n     *     });\n     *\n     * @example <caption>Example 5: Sorting via an element collection</caption>\n     *\n     * var collection = Array.from(container.querySelectorAll('.mix'));\n     *\n     * // Swap the position of two elements in the collection:\n     *\n     * var temp = collection[1];\n     *\n     * collection[1] = collection[0];\n     * collection[0] = temp;\n     *\n     * // Pass the sorted collection to MixItUp\n     *\n     * mixer.sort(collection)\n     *     .then(function(state) {\n     *         console.log(state.targets[0] === collection[0]); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {(string|Array.<HTMLElement>)}    sortString\n     *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    sort: function () {\n      var self = this,\n        instruction = self.parseSortArgs(arguments);\n      return self.multimix({\n        sort: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n    /**\n     * Changes the layout of the container by adding, removing or updating a\n     * layout-specific class name. If `animation.animateResizetargets` is\n     * enabled, MixItUp will attempt to gracefully animate the width, height,\n     * and position of targets between layout states.\n     *\n     * @example\n     *\n     * .changeLayout(containerClassName [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Adding a new class name to the container</caption>\n     *\n     * mixer.changeLayout('container-list')\n     *      .then(function(state) {\n     *          console.log(state.activeContainerClass === 'container-list'); // true\n     *      });\n     *\n     * @example <caption>Example 2: Removing a previously added class name from the container</caption>\n     *\n     * mixer.changeLayout('')\n     *      .then(function(state) {\n     *          console.log(state.activeContainerClass === ''); // true\n     *      });\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {string}    containerClassName\n     *      A layout-specific class name to add to the container.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    changeLayout: function () {\n      var self = this,\n        instruction = self.parseChangeLayoutArgs(arguments);\n      return self.multimix({\n        changeLayout: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n    /**\n     * Updates the contents and order of the container to reflect the provided dataset,\n     * if the dataset API is in use.\n     *\n     * The dataset API is designed for use in API-driven JavaScript applications, and\n     * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,\n     * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be\n     * achieved purely via changes to your data model, without the uglyness of having\n     * to interact with or query the DOM directly.\n     *\n     * @example\n     *\n     * .dataset(dataset [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Rendering a dataset</caption>\n     *\n     * var myDataset = [\n     *     {id: 1, ...},\n     *     {id: 2, ...},\n     *     {id: 3, ...}\n     * ];\n     *\n     * mixer.dataset(myDataset)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 3); // true\n     *     });\n     *\n     * @example <caption>Example 2: Sorting a dataset</caption>\n     *\n     * // Create a new dataset in reverse order\n     *\n     * var newDataset = myDataset.slice().reverse();\n     *\n     * mixer.dataset(newDataset)\n     *     .then(function(state) {\n     *         console.log(state.activeDataset[0] === myDataset[2]); // true\n     *     });\n     *\n     * @example <caption>Example 3: Removing an item from the dataset</caption>\n     *\n     * console.log(myDataset.length); // 3\n     *\n     * // Create a new dataset with the last item removed.\n     *\n     * var newDataset = myDataset.slice().pop();\n     *\n     * mixer.dataset(newDataset)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 2); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {Array.<object>}    dataset\n     *      An array of objects, each one representing the underlying data model of a target to be rendered.\n     * @param       {boolean}           [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}          [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    dataset: function () {\n      var self = this,\n        instruction = self.parseDatasetArgs(arguments),\n        operation = null,\n        queueItem = null,\n        animate = false;\n      self.callActions('beforeDataset', arguments);\n      if (!self.isBusy) {\n        if (instruction.callback) self.userCallback = instruction.callback;\n        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;\n        operation = self.getDataOperation(instruction.command.dataset);\n        return self.goMix(animate, operation);\n      } else {\n        queueItem = new mixitup.QueueItem();\n        queueItem.args = arguments;\n        queueItem.instruction = instruction;\n        return self.queueMix(queueItem);\n      }\n    },\n    /**\n     * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`\n     * operations as requested.\n     *\n     * @example\n     *\n     * .multimix(multimixCommand [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>\n     *\n     * mixer.multimix({\n     *     filter: '.category-b',\n     *     sort: 'published-date:desc'\n     * })\n     *     .then(function(state) {\n     *         console.log(state.activeFilter.selector === '.category-b'); // true\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\n     *     });\n     *\n     * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 6\n     *\n     * // NB: When inserting via `multimix()`, an object should be provided as the value\n     * // for the `insert` portion of the command, allowing for a collection of elements\n     * // and an insertion index to be specified.\n     *\n     * mixer.multimix({\n     *     sort: 'published-date:desc', // Sort the container, including any new elements\n     *     insert: {\n     *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5\n     *         index: 5\n     *     },\n     *     remove: existingElementReference // Remove 1 existing element\n     * })\n     *     .then(function(state) {\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\n     *         console.log(state.totalShow === 7); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {object}    multimixCommand\n     *      An object containing one or more things to do\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    multimix: function () {\n      var self = this,\n        operation = null,\n        animate = false,\n        queueItem = null,\n        instruction = self.parseMultimixArgs(arguments);\n      self.callActions('beforeMultimix', arguments);\n      if (!self.isBusy) {\n        operation = self.getOperation(instruction.command);\n        if (self.config.controls.enable) {\n          // Update controls for API calls\n\n          if (instruction.command.filter && !self.isToggling) {\n            // As we are not toggling, reset the toggle array\n            // so new filter overrides existing toggles\n\n            self.toggleArray.length = 0;\n            self.buildToggleArray(operation.command);\n          }\n          if (self.queue.length < 1) {\n            self.updateControls(operation.command);\n          }\n        }\n        if (instruction.callback) self.userCallback = instruction.callback;\n\n        // Always allow the instruction to override the instance setting\n\n        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;\n        self.callFilters('operationMultimix', operation, arguments);\n        return self.goMix(animate, operation);\n      } else {\n        queueItem = new mixitup.QueueItem();\n        queueItem.args = arguments;\n        queueItem.instruction = instruction;\n        queueItem.triggerElement = self.lastClicked;\n        queueItem.isToggling = self.isToggling;\n        return self.queueMix(queueItem);\n      }\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {object}            multimixCommand\n     * @param   {boolean}           [isPreFetch]\n     *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.\n     * @return  {Operation|null}\n     */\n\n    getOperation: function (multimixCommand) {\n      var self = this,\n        sortCommand = multimixCommand.sort,\n        filterCommand = multimixCommand.filter,\n        changeLayoutCommand = multimixCommand.changeLayout,\n        removeCommand = multimixCommand.remove,\n        insertCommand = multimixCommand.insert,\n        operation = new mixitup.Operation();\n      operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);\n      operation.id = h.randomHex();\n      operation.command = multimixCommand;\n      operation.startState = self.state;\n      operation.triggerElement = self.lastClicked;\n      if (self.isBusy) {\n        if (self.config.debug.showWarnings) {\n          console.warn(mixitup.messages.warningGetOperationInstanceBusy());\n        }\n        return null;\n      }\n      if (insertCommand) {\n        self.insertTargets(insertCommand, operation);\n      }\n      if (removeCommand) {\n        operation.toRemove = removeCommand.targets;\n      }\n      operation.startSort = operation.newSort = operation.startState.activeSort;\n      operation.startOrder = operation.newOrder = self.targets;\n      if (sortCommand) {\n        operation.startSort = operation.startState.activeSort;\n        operation.newSort = sortCommand;\n        operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);\n        if (operation.willSort) {\n          self.sortOperation(operation);\n        }\n      }\n      operation.startFilter = operation.startState.activeFilter;\n      if (filterCommand) {\n        operation.newFilter = filterCommand;\n      } else {\n        operation.newFilter = h.extend(new mixitup.CommandFilter(), operation.startFilter);\n      }\n      if (operation.newFilter.selector === 'all') {\n        operation.newFilter.selector = self.config.selectors.target;\n      } else if (operation.newFilter.selector === 'none') {\n        operation.newFilter.selector = '';\n      }\n      self.filterOperation(operation);\n      operation.startContainerClassName = operation.startState.activeContainerClassName;\n      if (changeLayoutCommand) {\n        operation.newContainerClassName = changeLayoutCommand.containerClassName;\n        if (operation.newContainerClassName !== operation.startContainerClassName) {\n          operation.willChangeLayout = true;\n        }\n      } else {\n        operation.newContainerClassName = operation.startContainerClassName;\n      }\n      if (self.config.animation.enable) {\n        // Populate the operation's position data\n\n        self.getStartMixData(operation);\n        self.setInter(operation);\n        operation.docState = h.getDocumentState(self.dom.document);\n        self.getInterMixData(operation);\n        self.setFinal(operation);\n        self.getFinalMixData(operation);\n        self.parseEffects();\n        operation.hasEffect = self.hasEffect();\n        self.getTweenData(operation);\n      }\n      if (operation.willSort) {\n        self.targets = operation.newOrder;\n      }\n      operation.newState = self.buildState(operation);\n      return self.callFilters('operationMappedGetOperation', operation, arguments);\n    },\n    /**\n     * Renders a previously created operation at a specific point in its path, as\n     * determined by a multiplier between 0 and 1.\n     *\n     * @example\n     * .tween(operation, multiplier)\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.Operation}     operation\n     *      An operation object created via the `getOperation` method\n     *\n     * @param   {Float}                 multiplier\n     *      Any number between 0 and 1 representing the percentage complete of the operation\n     * @return  {void}\n     */\n\n    tween: function (operation, multiplier) {\n      var target = null,\n        posData = null,\n        toHideIndex = -1,\n        i = -1;\n      multiplier = Math.min(multiplier, 1);\n      multiplier = Math.max(multiplier, 0);\n      for (i = 0; target = operation.show[i]; i++) {\n        posData = operation.showPosData[i];\n        target.applyTween(posData, multiplier);\n      }\n      for (i = 0; target = operation.hide[i]; i++) {\n        if (target.isShown) {\n          target.hide();\n        }\n        if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {\n          posData = operation.toHidePosData[toHideIndex];\n          if (!target.isShown) {\n            target.show();\n          }\n          target.applyTween(posData, multiplier);\n        }\n      }\n    },\n    /**\n     * Inserts one or more new target elements into the container at a specified\n     * index.\n     *\n     * To be indexed as targets, new elements must match the `selectors.target`\n     * selector (`'.mix'` by default).\n     *\n     * @example\n     *\n     * .insert(newElements [, index] [, animate], [, callback])\n     *\n     * @example <caption>Example 1: Inserting a single element via reference</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 0\n     *\n     * // Create a new element\n     *\n     * var newElement = document.createElement('div');\n     * newElement.classList.add('mix');\n     *\n     * mixer.insert(newElement)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 1); // true\n     *     });\n     *\n     * @example <caption>Example 2: Inserting a single element via HTML string</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 1\n     *\n     * // Create a new element via reference\n     *\n     * var newElementHtml = '&lt;div class=\"mix\"&gt;&lt;/div&gt;';\n     *\n     * // Create and insert the new element at index 1\n     *\n     * mixer.insert(newElementHtml, 1)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 2); // true\n     *         console.log(state.show[1].outerHTML === newElementHtml); // true\n     *     });\n     *\n     * @example <caption>Example 3: Inserting multiple elements via reference</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 2\n     *\n     * // Create an array of new elements to insert.\n     *\n     * var newElement1 = document.createElement('div');\n     * var newElement2 = document.createElement('div');\n     *\n     * newElement1.classList.add('mix');\n     * newElement2.classList.add('mix');\n     *\n     * var newElementsCollection = [newElement1, newElement2];\n     *\n     * // Insert the new elements starting at index 1\n     *\n     * mixer.insert(newElementsCollection, 1)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 4); // true\n     *         console.log(state.show[1] === newElement1); // true\n     *         console.log(state.show[2] === newElement2); // true\n     *     });\n     *\n     * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 4\n     *\n     * var $newElement = $('&lt;div class=\"mix\"&gt;&lt;/div&gt;');\n     *\n     * // Insert the new elements starting at index 3\n     *\n     * mixer.insert($newElement, 3)\n     *     .then(function(state) {\n     *         console.log(state.totalShow === 5); // true\n     *         console.log(state.show[3] === $newElement[0]); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n     * @param       {number}    index=0\n     *      The index at which to insert the new element(s). `0` by default.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    insert: function () {\n      var self = this,\n        args = self.parseInsertArgs(arguments);\n      return self.multimix({\n        insert: args.command\n      }, args.animate, args.callback);\n    },\n    /**\n     * Inserts one or more new elements before a provided reference element.\n     *\n     * @example\n     *\n     * .insertBefore(newElements, referenceElement [, animate] [, callback])\n     *\n     * @example <caption>Example: Inserting a new element before a reference element</caption>\n     *\n     * // An existing reference element is chosen at index 2\n     *\n     * var referenceElement = mixer.getState().show[2];\n     *\n     * // Create a new element\n     *\n     * var newElement = document.createElement('div');\n     * newElement.classList.add('mix');\n     *\n     * mixer.insertBefore(newElement, referenceElement)\n     *     .then(function(state) {\n     *         // The new element is inserted into the container at index 2, before the reference element\n     *\n     *         console.log(state.show[2] === newElement); // true\n     *\n     *         // The reference element is now at index 3\n     *\n     *         console.log(state.show[3] === referenceElement); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n     * @param       {HTMLElement}    referenceElement\n     *      A reference to an existing element in the container to insert new elements before.\n     *@param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    insertBefore: function () {\n      var self = this,\n        args = self.parseInsertArgs(arguments);\n      return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);\n    },\n    /**\n     * Inserts one or more new elements after a provided reference element.\n     *\n     * @example\n     *\n     * .insertAfter(newElements, referenceElement [, animate] [, callback])\n     *\n     * @example <caption>Example: Inserting a new element after a reference element</caption>\n     *\n     * // An existing reference element is chosen at index 2\n     *\n     * var referenceElement = mixer.getState().show[2];\n     *\n     * // Create a new element\n     *\n     * var newElement = document.createElement('div');\n     * newElement.classList.add('mix');\n     *\n     * mixer.insertAfter(newElement, referenceElement)\n     *     .then(function(state) {\n     *         // The new element is inserted into the container at index 3, after the reference element\n     *\n     *         console.log(state.show[3] === newElement); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n     * @param       {HTMLElement}    referenceElement\n     *      A reference to an existing element in the container to insert new elements after.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    insertAfter: function () {\n      var self = this,\n        args = self.parseInsertArgs(arguments);\n      return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);\n    },\n    /**\n     * Inserts one or more new elements into the container before all existing targets.\n     *\n     * @example\n     *\n     * .prepend(newElements [,animate] [,callback])\n     *\n     * @example <caption>Example: Prepending a new element</caption>\n     *\n     * // Create a new element\n     *\n     * var newElement = document.createElement('div');\n     * newElement.classList.add('mix');\n     *\n     * // Insert the element into the container\n     *\n     * mixer.prepend(newElement)\n     *     .then(function(state) {\n     *         console.log(state.show[0] === newElement); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    prepend: function () {\n      var self = this,\n        args = self.parseInsertArgs(arguments);\n      return self.insert(0, args.command.collection, args.animate, args.callback);\n    },\n    /**\n     * Inserts one or more new elements into the container after all existing targets.\n     *\n     * @example\n     *\n     * .append(newElements [,animate] [,callback])\n     *\n     * @example <caption>Example: Appending a new element</caption>\n     *\n     * // Create a new element\n     *\n     * var newElement = document.createElement('div');\n     * newElement.classList.add('mix');\n     *\n     * // Insert the element into the container\n     *\n     * mixer.append(newElement)\n     *     .then(function(state) {\n     *         console.log(state.show[state.show.length - 1] === newElement); // true\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    append: function () {\n      var self = this,\n        args = self.parseInsertArgs(arguments);\n      return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);\n    },\n    /**\n     * Removes one or more existing target elements from the container.\n     *\n     * @example\n     *\n     * .remove(elements [, animate] [, callback])\n     *\n     * @example <caption>Example 1: Removing an element by reference</caption>\n     *\n     * var elementToRemove = containerEl.firstElementChild;\n     *\n     * mixer.remove(elementToRemove)\n     *      .then(function(state) {\n     *          console.log(state.targets.indexOf(elementToRemove) === -1); // true\n     *      });\n     *\n     * @example <caption>Example 2: Removing a collection of elements by reference</caption>\n     *\n     * var elementsToRemove = containerEl.querySelectorAll('.category-a');\n     *\n     * console.log(elementsToRemove.length) // 3\n     *\n     * mixer.remove(elementsToRemove)\n     *      .then(function() {\n     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n     *      });\n     *\n     * @example <caption>Example 3: Removing one or more elements by selector</caption>\n     *\n     * mixer.remove('.category-a')\n     *      .then(function() {\n     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n     *      });\n     *\n     * @example <caption>Example 4: Removing an element by index</caption>\n     *\n     * console.log(mixer.getState.totalShow); // 4\n     *\n     * // Remove the element at index 3\n     *\n     * mixer.remove(3)\n     *      .then(function(state) {\n     *          console.log(state.totalShow); // 3\n     *          console.log(state.show[3]); // undefined\n     *      });\n     *\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements\n     *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.\n     * @param       {boolean}   [animate=true]\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n     * @param       {function}  [callback=null]\n     *      An optional callback function to be invoked after the operation has completed.\n     * @return      {Promise.<mixitup.State>}\n     *      A promise resolving with the current state object.\n     */\n\n    remove: function () {\n      var self = this,\n        args = self.parseRemoveArgs(arguments);\n      return self.multimix({\n        remove: args.command\n      }, args.animate, args.callback);\n    },\n    /**\n     * Retrieves the the value of any property or sub-object within the current\n     * mixitup configuration, or the whole configuration object.\n     *\n     * @example\n     *\n     * .getConfig([stringKey])\n     *\n     * @example <caption>Example 1: retrieve the entire configuration object</caption>\n     *\n     * var config = mixer.getConfig(); // Config { ... }\n     *\n     * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>\n     *\n     * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }\n     *\n     * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>\n     *\n     * var effects = mixer.getConfig('animation.effects'); // 'fade scale'\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @param       {string}    [stringKey]    A \"dot-notation\" string key\n     * @return      {*}\n     */\n\n    getConfig: function (stringKey) {\n      var self = this,\n        value = null;\n      if (!stringKey) {\n        value = self.config;\n      } else {\n        value = h.getProperty(self.config, stringKey);\n      }\n      return self.callFilters('valueGetConfig', value, arguments);\n    },\n    /**\n     * Updates the configuration of the mixer, after it has been instantiated.\n     *\n     * See the Configuration Object documentation for a full list of avilable\n     * configuration options.\n     *\n     * @example\n     *\n     * .configure(config)\n     *\n     * @example <caption>Example 1: Updating animation options</caption>\n     *\n     * mixer.configure({\n     *     animation: {\n     *         effects: 'fade translateX(-100%)',\n     *         duration: 300\n     *     }\n     * });\n     *\n     * @example <caption>Example 2: Removing a callback after it has been set</caption>\n     *\n     * var mixer;\n     *\n     * function handleMixEndOnce() {\n     *     // Do something ..\n     *\n     *     // Then nullify the callback\n     *\n     *     mixer.configure({\n     *         callbacks: {\n     *             onMixEnd: null\n     *         }\n     *     });\n     * };\n     *\n     * // Instantiate a mixer with a callback defined\n     *\n     * mixer = mixitup(containerEl, {\n     *     callbacks: {\n     *         onMixEnd: handleMixEndOnce\n     *     }\n     * });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {object}    config\n     *      An object containing one of more configuration options.\n     * @return      {void}\n     */\n\n    configure: function (config) {\n      var self = this;\n      self.callActions('beforeConfigure', arguments);\n      h.extend(self.config, config, true, true);\n      self.callActions('afterConfigure', arguments);\n    },\n    /**\n     * Returns an object containing information about the current state of the\n     * mixer. See the State Object documentation for more information.\n     *\n     * NB: State objects are immutable and should therefore be regenerated\n     * after any operation.\n     *\n     * @example\n     *\n     * .getState();\n     *\n     * @example <caption>Example: Retrieving a state object</caption>\n     *\n     * var state = mixer.getState();\n     *\n     * console.log(state.totalShow + 'targets are currently shown');\n     *\n     * @public\n     * @instance\n     * @since       2.0.0\n     * @return      {mixitup.State} An object reflecting the current state of the mixer.\n     */\n\n    getState: function () {\n      var self = this,\n        state = null;\n      state = new mixitup.State();\n      h.extend(state, self.state);\n      h.freeze(state);\n      return self.callFilters('stateGetState', state, arguments);\n    },\n    /**\n     * Forces the re-indexing all targets within the container.\n     *\n     * This should only be used if some other piece of code in your application\n     * has manipulated the contents of your container, which should be avoided.\n     *\n     * If you need to add or remove target elements from the container, use\n     * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep\n     * itself up to date.\n     *\n     * @example\n     *\n     * .forceRefresh()\n     *\n     * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>\n     *\n     * console.log(mixer.getState().totalShow); // 3\n     *\n     * // An element is removed from the container via some external DOM manipulation code:\n     *\n     * containerEl.removeChild(containerEl.firstElementChild);\n     *\n     * // The mixer does not know that the number of targets has changed:\n     *\n     * console.log(mixer.getState().totalShow); // 3\n     *\n     * mixer.forceRefresh();\n     *\n     * // After forceRefresh, the mixer is in sync again:\n     *\n     * console.log(mixer.getState().totalShow); // 2\n     *\n     * @public\n     * @instance\n     * @since 2.1.2\n     * @return {void}\n     */\n\n    forceRefresh: function () {\n      var self = this;\n      self.indexTargets();\n    },\n    /**\n     * Forces the re-rendering of all targets when using the Dataset API.\n     *\n     * By default, targets are only re-rendered when `data.dirtyCheck` is\n     * enabled, and an item's data has changed when `dataset()` is called.\n     *\n     * The `forceRender()` method allows for the re-rendering of all targets\n     * in response to some arbitrary event, such as the changing of the target\n     * render function.\n     *\n     * Targets are rendered against their existing data.\n     *\n     * @example\n     *\n     * .forceRender()\n     *\n     * @example <caption>Example: Force render targets after changing the target render function</caption>\n     *\n     * console.log(container.innerHTML); // ... &lt;span class=\"mix\"&gt;Foo&lt;/span&gt; ...\n     *\n     * mixer.configure({\n     *     render: {\n     *         target: (item) => `&lt;a href=\"/${item.slug}/\" class=\"mix\"&gt;${item.title}&lt;/a&gt;`\n     *     }\n     * });\n     *\n     * mixer.forceRender();\n     *\n     * console.log(container.innerHTML); // ... &lt;a href=\"/foo/\" class=\"mix\"&gt;Foo&lt;/a&gt; ...\n     *\n     * @public\n     * @instance\n     * @since 3.2.1\n     * @return {void}\n     */\n\n    forceRender: function () {\n      var self = this,\n        target = null,\n        el = null,\n        id = '';\n      for (id in self.cache) {\n        target = self.cache[id];\n        el = target.render(target.data);\n        if (el !== target.dom.el) {\n          // Update target element reference\n\n          if (target.isInDom) {\n            target.unbindEvents();\n            self.dom.parent.replaceChild(el, target.dom.el);\n          }\n          if (!target.isShown) {\n            el.style.display = 'none';\n          }\n          target.dom.el = el;\n          if (target.isInDom) {\n            target.bindEvents();\n          }\n        }\n      }\n      self.state = self.buildState(self.lastOperation);\n    },\n    /**\n     * Removes mixitup functionality from the container, unbinds all control\n     * event handlers, and deletes the mixer instance from MixItUp's internal\n     * cache.\n     *\n     * This should be performed whenever a mixer's container is removed from\n     * the DOM, such as during a page change in a single page application,\n     * or React's `componentWillUnmount()`.\n     *\n     * @example\n     *\n     * .destroy([cleanUp])\n     *\n     * @example <caption>Example: Destroying the mixer before removing its container element</caption>\n     *\n     * mixer.destroy();\n     *\n     * containerEl.parentElement.removeChild(containerEl);\n     *\n     * @public\n     * @instance\n     * @since   2.0.0\n     * @param   {boolean}   [cleanUp=false]\n     *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.\n     * @return  {void}\n     */\n\n    destroy: function (cleanUp) {\n      var self = this,\n        control = null,\n        target = null,\n        i = 0;\n      self.callActions('beforeDestroy', arguments);\n      for (i = 0; control = self.controls[i]; i++) {\n        control.removeBinding(self);\n      }\n      for (i = 0; target = self.targets[i]; i++) {\n        if (cleanUp) {\n          target.show();\n        }\n        target.unbindEvents();\n      }\n      if (self.dom.container.id.match(/^MixItUp/)) {\n        self.dom.container.removeAttribute('id');\n      }\n      delete mixitup.instances[self.id];\n      self.callActions('afterDestroy', arguments);\n    }\n  });\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.IMoveData = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.posIn = null;\n    this.posOut = null;\n    this.operation = null;\n    this.callback = null;\n    this.statusChange = '';\n    this.duration = -1;\n    this.staggerIndex = -1;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.IMoveData);\n  mixitup.IMoveData.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.IMoveData.prototype.constructor = mixitup.IMoveData;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.TargetDom = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.el = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.TargetDom);\n  mixitup.TargetDom.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.TargetDom.prototype.constructor = mixitup.TargetDom;\n\n  /**\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Target = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.id = '';\n    this.sortString = '';\n    this.mixer = null;\n    this.callback = null;\n    this.isShown = false;\n    this.isBound = false;\n    this.isExcluded = false;\n    this.isInDom = false;\n    this.handler = null;\n    this.operation = null;\n    this.data = null;\n    this.dom = new mixitup.TargetDom();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Target);\n  mixitup.Target.prototype = Object.create(mixitup.Base.prototype);\n  h.extend(mixitup.Target.prototype, {\n    constructor: mixitup.Target,\n    /**\n     * Initialises a newly instantiated Target.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {(Element|null)}    el\n     * @param   {object}            mixer\n     * @param   {object}            [data]\n     * @return  {void}\n     */\n\n    init: function (el, mixer, data) {\n      var self = this,\n        id = '';\n      self.callActions('beforeInit', arguments);\n      self.mixer = mixer;\n      if (!el) {\n        // If no element is provided, render it\n\n        el = self.render(data);\n      }\n      self.cacheDom(el);\n      self.bindEvents();\n      if (self.dom.el.style.display !== 'none') {\n        self.isShown = true;\n      }\n      if (data && mixer.config.data.uidKey) {\n        if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n          throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n            uidKey: mixer.config.data.uidKey\n          }));\n        }\n        self.id = id;\n        self.data = data;\n        mixer.cache[id] = self;\n      }\n      self.callActions('afterInit', arguments);\n    },\n    /**\n     * Renders the target element using a user-defined renderer function.\n     *\n     * @private\n     * @instance\n     * @since   3.1.4\n     * @param   {object} data\n     * @return  {void}\n     */\n\n    render: function (data) {\n      var self = this,\n        render = null,\n        el = null,\n        temp = null,\n        output = '';\n      self.callActions('beforeRender', arguments);\n      render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);\n      if (typeof render !== 'function') {\n        throw new TypeError(mixitup.messages.errorDatasetRendererNotSet());\n      }\n      output = render(data);\n      if (output && typeof output === 'object' && h.isElement(output)) {\n        el = output;\n      } else if (typeof output === 'string') {\n        temp = document.createElement('div');\n        temp.innerHTML = output;\n        el = temp.firstElementChild;\n      }\n      return self.callFilters('elRender', el, arguments);\n    },\n    /**\n     * Caches references of DOM elements neccessary for the target's functionality.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Element} el\n     * @return  {void}\n     */\n\n    cacheDom: function (el) {\n      var self = this;\n      self.callActions('beforeCacheDom', arguments);\n      self.dom.el = el;\n      self.callActions('afterCacheDom', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string}    attributeName\n     * @return  {void}\n     */\n\n    getSortString: function (attributeName) {\n      var self = this,\n        value = self.dom.el.getAttribute('data-' + attributeName) || '';\n      self.callActions('beforeGetSortString', arguments);\n      value = isNaN(value * 1) ? value.toLowerCase() : value * 1;\n      self.sortString = value;\n      self.callActions('afterGetSortString', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {void}\n     */\n\n    show: function () {\n      var self = this;\n      self.callActions('beforeShow', arguments);\n      if (!self.isShown) {\n        self.dom.el.style.display = '';\n        self.isShown = true;\n      }\n      self.callActions('afterShow', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {void}\n     */\n\n    hide: function () {\n      var self = this;\n      self.callActions('beforeHide', arguments);\n      if (self.isShown) {\n        self.dom.el.style.display = 'none';\n        self.isShown = false;\n      }\n      self.callActions('afterHide', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {mixitup.IMoveData} moveData\n     * @return  {void}\n     */\n\n    move: function (moveData) {\n      var self = this;\n      self.callActions('beforeMove', arguments);\n      if (!self.isExcluded) {\n        self.mixer.targetsMoved++;\n      }\n      self.applyStylesIn(moveData);\n      requestAnimationFrame(function () {\n        self.applyStylesOut(moveData);\n      });\n      self.callActions('afterMove', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {object}    posData\n     * @param   {number}    multiplier\n     * @return  {void}\n     */\n\n    applyTween: function (posData, multiplier) {\n      var self = this,\n        propertyName = '',\n        tweenData = null,\n        posIn = posData.posIn,\n        currentTransformValues = [],\n        currentValues = new mixitup.StyleData(),\n        i = -1;\n      self.callActions('beforeApplyTween', arguments);\n      currentValues.x = posIn.x;\n      currentValues.y = posIn.y;\n      if (multiplier === 0) {\n        self.hide();\n      } else if (!self.isShown) {\n        self.show();\n      }\n      for (i = 0; propertyName = mixitup.features.TWEENABLE[i]; i++) {\n        tweenData = posData.tweenData[propertyName];\n        if (propertyName === 'x') {\n          if (!tweenData) continue;\n          currentValues.x = posIn.x + tweenData * multiplier;\n        } else if (propertyName === 'y') {\n          if (!tweenData) continue;\n          currentValues.y = posIn.y + tweenData * multiplier;\n        } else if (tweenData instanceof mixitup.TransformData) {\n          if (!tweenData.value) continue;\n          currentValues[propertyName].value = posIn[propertyName].value + tweenData.value * multiplier;\n          currentValues[propertyName].unit = tweenData.unit;\n          currentTransformValues.push(propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')');\n        } else {\n          if (!tweenData) continue;\n          currentValues[propertyName] = posIn[propertyName] + tweenData * multiplier;\n          self.dom.el.style[propertyName] = currentValues[propertyName];\n        }\n      }\n      if (currentValues.x || currentValues.y) {\n        currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');\n      }\n      if (currentTransformValues.length) {\n        self.dom.el.style[mixitup.features.transformProp] = currentTransformValues.join(' ');\n      }\n      self.callActions('afterApplyTween', arguments);\n    },\n    /**\n     * Applies the initial styling to a target element before any transition\n     * is applied.\n     *\n     * @private\n     * @instance\n     * @param   {mixitup.IMoveData} moveData\n     * @return  {void}\n     */\n\n    applyStylesIn: function (moveData) {\n      var self = this,\n        posIn = moveData.posIn,\n        isFading = self.mixer.effectsIn.opacity !== 1,\n        transformValues = [];\n      self.callActions('beforeApplyStylesIn', arguments);\n      transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');\n      if (self.mixer.config.animation.animateResizeTargets) {\n        if (moveData.statusChange !== 'show') {\n          // Don't apply posIn width or height or showing, as will be 0\n\n          self.dom.el.style.width = posIn.width + 'px';\n          self.dom.el.style.height = posIn.height + 'px';\n        }\n        self.dom.el.style.marginRight = posIn.marginRight + 'px';\n        self.dom.el.style.marginBottom = posIn.marginBottom + 'px';\n      }\n      isFading && (self.dom.el.style.opacity = posIn.opacity);\n      if (moveData.statusChange === 'show') {\n        transformValues = transformValues.concat(self.mixer.transformIn);\n      }\n      self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n      self.callActions('afterApplyStylesIn', arguments);\n    },\n    /**\n     * Applies a transition followed by the final styles for the element to\n     * transition towards.\n     *\n     * @private\n     * @instance\n     * @param   {mixitup.IMoveData} moveData\n     * @return  {void}\n     */\n\n    applyStylesOut: function (moveData) {\n      var self = this,\n        transitionRules = [],\n        transformValues = [],\n        isResizing = self.mixer.config.animation.animateResizeTargets,\n        isFading = typeof self.mixer.effectsIn.opacity !== 'undefined';\n      self.callActions('beforeApplyStylesOut', arguments);\n\n      // Build the transition rules\n\n      transitionRules.push(self.writeTransitionRule(mixitup.features.transformRule, moveData.staggerIndex));\n      if (moveData.statusChange !== 'none') {\n        transitionRules.push(self.writeTransitionRule('opacity', moveData.staggerIndex, moveData.duration));\n      }\n      if (isResizing) {\n        transitionRules.push(self.writeTransitionRule('width', moveData.staggerIndex, moveData.duration));\n        transitionRules.push(self.writeTransitionRule('height', moveData.staggerIndex, moveData.duration));\n        transitionRules.push(self.writeTransitionRule('margin', moveData.staggerIndex, moveData.duration));\n      }\n\n      // If no callback was provided, the element will\n      // not transition in any way so tag it as \"immovable\"\n\n      if (!moveData.callback) {\n        self.mixer.targetsImmovable++;\n        if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {\n          // If the total targets moved is equal to the\n          // number of immovable targets, the operation\n          // should be considered finished\n\n          self.mixer.cleanUp(moveData.operation);\n        }\n        return;\n      }\n\n      // If the target will transition in some fasion,\n      // assign a callback function\n\n      self.operation = moveData.operation;\n      self.callback = moveData.callback;\n\n      // As long as the target is not excluded, increment\n      // the total number of targets bound\n\n      !self.isExcluded && self.mixer.targetsBound++;\n\n      // Tag the target as bound to differentiate from transitionEnd\n      // events that may come from stylesheet driven effects\n\n      self.isBound = true;\n\n      // Apply the transition\n\n      self.applyTransition(transitionRules);\n\n      // Apply width, height and margin negation\n\n      if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {\n        self.dom.el.style.width = moveData.posOut.width + 'px';\n        self.dom.el.style.height = moveData.posOut.height + 'px';\n        self.dom.el.style.marginRight = moveData.posOut.marginRight + 'px';\n        self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';\n      }\n      if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {\n        // If we're not nudging, the translation should be\n        // applied before any other transforms to prevent\n        // lateral movement\n\n        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n      }\n\n      // Apply fade\n\n      switch (moveData.statusChange) {\n        case 'hide':\n          isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);\n          transformValues = transformValues.concat(self.mixer.transformOut);\n          break;\n        case 'show':\n          isFading && (self.dom.el.style.opacity = 1);\n      }\n      if (self.mixer.config.animation.nudge || !self.mixer.config.animation.nudge && moveData.statusChange !== 'hide') {\n        // Opposite of above - apply translate after\n        // other transform\n\n        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n      }\n\n      // Apply transforms\n\n      self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n      self.callActions('afterApplyStylesOut', arguments);\n    },\n    /**\n     * Combines the name of a CSS property with the appropriate duration and delay\n     * values to created a valid transition rule.\n     *\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string}    property\n     * @param   {number}    staggerIndex\n     * @param   {number}    duration\n     * @return  {string}\n     */\n\n    writeTransitionRule: function (property, staggerIndex, duration) {\n      var self = this,\n        delay = self.getDelay(staggerIndex),\n        rule = '';\n      rule = property + ' ' + (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' + delay + 'ms ' + (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);\n      return self.callFilters('ruleWriteTransitionRule', rule, arguments);\n    },\n    /**\n     * Calculates the transition delay for each target element based on its index, if\n     * staggering is applied. If defined, A custom `animation.staggerSeqeuence`\n     * function can be used to manipulate the order of indices to produce custom\n     * stagger effects (e.g. for use in a grid with irregular row lengths).\n     *\n     * @private\n     * @instance\n     * @since   2.0.0\n     * @param   {number}    index\n     * @return  {number}\n     */\n\n    getDelay: function (index) {\n      var self = this,\n        delay = -1;\n      if (typeof self.mixer.config.animation.staggerSequence === 'function') {\n        index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);\n      }\n      delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;\n      return self.callFilters('delayGetDelay', delay, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {string[]}  rules\n     * @return  {void}\n     */\n\n    applyTransition: function (rules) {\n      var self = this,\n        transitionString = rules.join(', ');\n      self.callActions('beforeApplyTransition', arguments);\n      self.dom.el.style[mixitup.features.transitionProp] = transitionString;\n      self.callActions('afterApplyTransition', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Event} e\n     * @return  {void}\n     */\n\n    handleTransitionEnd: function (e) {\n      var self = this,\n        propName = e.propertyName,\n        canResize = self.mixer.config.animation.animateResizeTargets;\n      self.callActions('beforeHandleTransitionEnd', arguments);\n      if (self.isBound && e.target.matches(self.mixer.config.selectors.target) && (propName.indexOf('transform') > -1 || propName.indexOf('opacity') > -1 || canResize && propName.indexOf('height') > -1 || canResize && propName.indexOf('width') > -1 || canResize && propName.indexOf('margin') > -1)) {\n        self.callback.call(self, self.operation);\n        self.isBound = false;\n        self.callback = null;\n        self.operation = null;\n      }\n      self.callActions('afterHandleTransitionEnd', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {Event}     e\n     * @return  {void}\n     */\n\n    eventBus: function (e) {\n      var self = this;\n      self.callActions('beforeEventBus', arguments);\n      switch (e.type) {\n        case 'webkitTransitionEnd':\n        case 'transitionend':\n          self.handleTransitionEnd(e);\n      }\n      self.callActions('afterEventBus', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {void}\n     */\n\n    unbindEvents: function () {\n      var self = this;\n      self.callActions('beforeUnbindEvents', arguments);\n      h.off(self.dom.el, 'webkitTransitionEnd', self.handler);\n      h.off(self.dom.el, 'transitionend', self.handler);\n      self.callActions('afterUnbindEvents', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @return  {void}\n     */\n\n    bindEvents: function () {\n      var self = this,\n        transitionEndEvent = '';\n      self.callActions('beforeBindEvents', arguments);\n      transitionEndEvent = mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';\n      self.handler = function (e) {\n        return self.eventBus(e);\n      };\n      h.on(self.dom.el, transitionEndEvent, self.handler);\n      self.callActions('afterBindEvents', arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since   3.0.0\n     * @param   {boolean}   [getBox]\n     * @return  {PosData}\n     */\n\n    getPosData: function (getBox) {\n      var self = this,\n        styles = {},\n        rect = null,\n        posData = new mixitup.StyleData();\n      self.callActions('beforeGetPosData', arguments);\n      posData.x = self.dom.el.offsetLeft;\n      posData.y = self.dom.el.offsetTop;\n      if (self.mixer.config.animation.animateResizeTargets || getBox) {\n        rect = self.dom.el.getBoundingClientRect();\n        posData.top = rect.top;\n        posData.right = rect.right;\n        posData.bottom = rect.bottom;\n        posData.left = rect.left;\n        posData.width = rect.width;\n        posData.height = rect.height;\n      }\n      if (self.mixer.config.animation.animateResizeTargets) {\n        styles = window.getComputedStyle(self.dom.el);\n        posData.marginBottom = parseFloat(styles.marginBottom);\n        posData.marginRight = parseFloat(styles.marginRight);\n      }\n      return self.callFilters('posDataGetPosData', posData, arguments);\n    },\n    /**\n     * @private\n     * @instance\n     * @since       3.0.0\n     * @return      {void}\n     */\n\n    cleanUp: function () {\n      var self = this;\n      self.callActions('beforeCleanUp', arguments);\n      self.dom.el.style[mixitup.features.transformProp] = '';\n      self.dom.el.style[mixitup.features.transitionProp] = '';\n      self.dom.el.style.opacity = '';\n      if (self.mixer.config.animation.animateResizeTargets) {\n        self.dom.el.style.width = '';\n        self.dom.el.style.height = '';\n        self.dom.el.style.marginRight = '';\n        self.dom.el.style.marginBottom = '';\n      }\n      self.callActions('afterCleanUp', arguments);\n    }\n  });\n\n  /**\n   * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances\n   * allowing simultaneous control of said instances similar to the MixItUp 2 API.\n   *\n   * @example\n   * new mixitup.Collection(instances)\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   * @param       {mixitup.Mixer[]}   instances\n   */\n\n  mixitup.Collection = function (instances) {\n    var instance = null,\n      i = -1;\n    this.callActions('beforeConstruct');\n    for (i = 0; instance = instances[i]; i++) {\n      this[i] = instance;\n    }\n    this.length = instances.length;\n    this.callActions('afterConstruct');\n    h.freeze(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Collection);\n  mixitup.Collection.prototype = Object.create(mixitup.Base.prototype);\n  h.extend(mixitup.Collection.prototype, /** @lends mixitup.Collection */\n  {\n    constructor: mixitup.Collection,\n    /**\n     * Calls a method on all instances in the collection by passing the method\n     * name as a string followed by any applicable parameters to be curried into\n     * to the method.\n     *\n     * @example\n     * .mixitup(methodName[,arg1][,arg2..]);\n     *\n     * @example\n     * var collection = new Collection([mixer1, mixer2]);\n     *\n     * return collection.mixitup('filter', '.category-a')\n     *     .then(function(states) {\n     *         state.forEach(function(state) {\n     *             console.log(state.activeFilter.selector); // .category-a\n     *         });\n     *     });\n     *\n     * @public\n     * @instance\n     * @since       3.0.0\n     * @param       {string}  methodName\n     * @return      {Promise<Array<mixitup.State>>}\n     */\n\n    mixitup: function (methodName) {\n      var self = this,\n        instance = null,\n        args = Array.prototype.slice.call(arguments),\n        tasks = [],\n        i = -1;\n      this.callActions('beforeMixitup');\n      args.shift();\n      for (i = 0; instance = self[i]; i++) {\n        tasks.push(instance[methodName].apply(instance, args));\n      }\n      return self.callFilters('promiseMixitup', h.all(tasks, mixitup.libraries), arguments);\n    }\n  });\n\n  /**\n   * `mixitup.Operation` objects contain all data neccessary to describe the full\n   * lifecycle of any MixItUp operation. They can be used to compute and store an\n   * operation for use at a later time (e.g. programmatic tweening).\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Operation = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.id = '';\n    this.args = [];\n    this.command = null;\n    this.showPosData = [];\n    this.toHidePosData = [];\n    this.startState = null;\n    this.newState = null;\n    this.docState = null;\n    this.willSort = false;\n    this.willChangeLayout = false;\n    this.hasEffect = false;\n    this.hasFailed = false;\n    this.triggerElement = null;\n    this.show = [];\n    this.hide = [];\n    this.matching = [];\n    this.toShow = [];\n    this.toHide = [];\n    this.toMove = [];\n    this.toRemove = [];\n    this.startOrder = [];\n    this.newOrder = [];\n    this.startSort = null;\n    this.newSort = null;\n    this.startFilter = null;\n    this.newFilter = null;\n    this.startDataset = null;\n    this.newDataset = null;\n    this.viewportDeltaX = 0;\n    this.viewportDeltaY = 0;\n    this.startX = 0;\n    this.startY = 0;\n    this.startHeight = 0;\n    this.startWidth = 0;\n    this.newX = 0;\n    this.newY = 0;\n    this.newHeight = 0;\n    this.newWidth = 0;\n    this.startContainerClassName = '';\n    this.startDisplay = '';\n    this.newContainerClassName = '';\n    this.newDisplay = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Operation);\n  mixitup.Operation.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.Operation.prototype.constructor = mixitup.Operation;\n\n  /**\n   * `mixitup.State` objects expose various pieces of data detailing the state of\n   * a MixItUp instance. They are provided at the start and end of any operation via\n   * callbacks and events, with the most recent state stored between operations\n   * for retrieval at any time via the API.\n   *\n   * @constructor\n   * @namespace\n   * @memberof    mixitup\n   * @public\n   * @since       3.0.0\n   */\n\n  mixitup.State = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /**\n     * The ID of the mixer instance.\n     *\n     * @name        id\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.id = '';\n\n    /**\n     * The currently active filter command as set by a control click or API call.\n     *\n     * @name        activeFilter\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {mixitup.CommandFilter}\n     * @default     null\n     */\n\n    this.activeFilter = null;\n\n    /**\n     * The currently active sort command as set by a control click or API call.\n     *\n     * @name        activeSort\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {mixitup.CommandSort}\n     * @default     null\n     */\n\n    this.activeSort = null;\n\n    /**\n     * The current layout-specific container class name, if applied.\n     *\n     * @name        activeContainerClassName\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {string}\n     * @default     ''\n     */\n\n    this.activeContainerClassName = '';\n\n    /**\n     * A reference to the container element that the mixer is instantiated on.\n     *\n     * @name        container\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Element}\n     * @default     null\n     */\n\n    this.container = null;\n\n    /**\n     * An array of all target elements indexed by the mixer.\n     *\n     * @name        targets\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Array.<Element>}\n     * @default     []\n     */\n\n    this.targets = [];\n\n    /**\n     * An array of all target elements not matching the current filter.\n     *\n     * @name        hide\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Array.<Element>}\n     * @default     []\n     */\n\n    this.hide = [];\n\n    /**\n     * An array of all target elements matching the current filter and any additional\n     * limits applied such as pagination.\n     *\n     * @name        show\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Array.<Element>}\n     * @default     []\n     */\n\n    this.show = [];\n\n    /**\n     * An array of all target elements matching the current filter irrespective of\n     * any additional limits applied such as pagination.\n     *\n     * @name        matching\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Array.<Element>}\n     * @default     []\n     */\n\n    this.matching = [];\n\n    /**\n     * An integer representing the total number of target elements indexed by the\n     * mixer. Equivalent to `state.targets.length`.\n     *\n     * @name        totalTargets\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {number}\n     * @default     -1\n     */\n\n    this.totalTargets = -1;\n\n    /**\n     * An integer representing the total number of target elements matching the\n     * current filter and any additional limits applied such as pagination.\n     * Equivalent to `state.show.length`.\n     *\n     * @name        totalShow\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {number}\n     * @default     -1\n     */\n\n    this.totalShow = -1;\n\n    /**\n     * An integer representing the total number of target elements not matching\n     * the current filter. Equivalent to `state.hide.length`.\n     *\n     * @name        totalHide\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {number}\n     * @default     -1\n     */\n\n    this.totalHide = -1;\n\n    /**\n     * An integer representing the total number of target elements matching the\n     * current filter irrespective of any other limits applied such as pagination.\n     * Equivalent to `state.matching.length`.\n     *\n     * @name        totalMatching\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {number}\n     * @default     -1\n     */\n\n    this.totalMatching = -1;\n\n    /**\n     * A boolean indicating whether the last operation \"failed\", i.e. no targets\n     * could be found matching the filter.\n     *\n     * @name        hasFailed\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {boolean}\n     * @default     false\n     */\n\n    this.hasFailed = false;\n\n    /**\n     * The DOM element that was clicked if the last operation was triggered by the\n     * clicking of a control and not an API call.\n     *\n     * @name        triggerElement\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Element|null}\n     * @default     null\n     */\n\n    this.triggerElement = null;\n\n    /**\n     * The currently active dataset underlying the rendered targets, if the\n     * dataset API is in use.\n     *\n     * @name        activeDataset\n     * @memberof    mixitup.State\n     * @instance\n     * @type        {Array.<object>}\n     * @default     null\n     */\n\n    this.activeDataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.State);\n  mixitup.State.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.State.prototype.constructor = mixitup.State;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.UserInstruction = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n    this.command = {};\n    this.animate = false;\n    this.callback = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.UserInstruction);\n  mixitup.UserInstruction.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.UserInstruction.prototype.constructor = mixitup.UserInstruction;\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   */\n\n  mixitup.Messages = function () {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct');\n\n    /* Errors\n    ----------------------------------------------------------------------------- */\n\n    this.ERROR_FACTORY_INVALID_CONTAINER = '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';\n    this.ERROR_FACTORY_CONTAINER_NOT_FOUND = '[MixItUp] The provided selector yielded no container element';\n    this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS = '[MixItUp] Invalid value for `animation.effects`';\n    this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE = '[MixItUp] Invalid value for `controls.scope`';\n    this.ERROR_CONFIG_INVALID_PROPERTY = '[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}';\n    this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION = '. Did you mean \"${probableMatch}\"?';\n    this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET = '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';\n    this.ERROR_DATASET_INVALID_UID_KEY = '[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items';\n    this.ERROR_DATASET_DUPLICATE_UID = '[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.';\n    this.ERROR_INSERT_INVALID_ARGUMENTS = '[MixItUp] Please provider either an index or a sibling and position to insert, not both';\n    this.ERROR_INSERT_PREEXISTING_ELEMENT = '[MixItUp] An element to be inserted already exists in the container';\n    this.ERROR_FILTER_INVALID_ARGUMENTS = '[MixItUp] Please provide either a selector or collection `.filter()`, not both';\n    this.ERROR_DATASET_NOT_SET = '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';\n    this.ERROR_DATASET_PRERENDERED_MISMATCH = '[MixItUp] `load.dataset` does not match pre-rendered targets';\n    this.ERROR_DATASET_RENDERER_NOT_SET = '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';\n    this.ERROR_SORT_NON_EXISTENT_ELEMENT = '[MixItUp] An element to be sorted does not already exist in the container';\n\n    /* Warnings\n    ----------------------------------------------------------------------------- */\n\n    this.WARNING_FACTORY_PREEXISTING_INSTANCE = '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' + ' If you wish to perform additional methods on this instance, please create a reference.';\n    this.WARNING_INSERT_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.insert()`';\n    this.WARNING_REMOVE_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.remove()`';\n    this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL = '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' + 'queue is full or queuing is disabled.';\n    this.WARNING_GET_OPERATION_INSTANCE_BUSY = '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';\n    this.WARNING_NO_PROMISE_IMPLEMENTATION = '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' + ' an ES6 Promise polyfill.';\n    this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES = '[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements' + ' which may product unexpected sort output';\n    this.callActions('afterConstruct');\n    this.compileTemplates();\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Messages);\n  mixitup.Messages.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.Messages.prototype.constructor = mixitup.Messages;\n\n  /**\n   * @return {void}\n   */\n\n  mixitup.Messages.prototype.compileTemplates = function () {\n    var errorKey = '';\n    var errorMessage = '';\n    for (errorKey in this) {\n      if (typeof (errorMessage = this[errorKey]) !== 'string') continue;\n      this[h.camelCase(errorKey)] = h.template(errorMessage);\n    }\n  };\n  mixitup.messages = new mixitup.Messages();\n\n  /**\n   * @constructor\n   * @memberof    mixitup\n   * @private\n   * @since       3.0.0\n   * @param       {mixitup.Mixer} mixer\n   */\n\n  mixitup.Facade = function Mixer(mixer) {\n    mixitup.Base.call(this);\n    this.callActions('beforeConstruct', arguments);\n    this.configure = mixer.configure.bind(mixer);\n    this.show = mixer.show.bind(mixer);\n    this.hide = mixer.hide.bind(mixer);\n    this.filter = mixer.filter.bind(mixer);\n    this.toggleOn = mixer.toggleOn.bind(mixer);\n    this.toggleOff = mixer.toggleOff.bind(mixer);\n    this.sort = mixer.sort.bind(mixer);\n    this.changeLayout = mixer.changeLayout.bind(mixer);\n    this.multimix = mixer.multimix.bind(mixer);\n    this.dataset = mixer.dataset.bind(mixer);\n    this.tween = mixer.tween.bind(mixer);\n    this.insert = mixer.insert.bind(mixer);\n    this.insertBefore = mixer.insertBefore.bind(mixer);\n    this.insertAfter = mixer.insertAfter.bind(mixer);\n    this.prepend = mixer.prepend.bind(mixer);\n    this.append = mixer.append.bind(mixer);\n    this.remove = mixer.remove.bind(mixer);\n    this.destroy = mixer.destroy.bind(mixer);\n    this.forceRefresh = mixer.forceRefresh.bind(mixer);\n    this.forceRender = mixer.forceRender.bind(mixer);\n    this.isMixing = mixer.isMixing.bind(mixer);\n    this.getOperation = mixer.getOperation.bind(mixer);\n    this.getConfig = mixer.getConfig.bind(mixer);\n    this.getState = mixer.getState.bind(mixer);\n    this.callActions('afterConstruct', arguments);\n    h.freeze(this);\n    h.seal(this);\n  };\n  mixitup.BaseStatic.call(mixitup.Facade);\n  mixitup.Facade.prototype = Object.create(mixitup.Base.prototype);\n  mixitup.Facade.prototype.constructor = mixitup.Facade;\n  if (typeof exports === 'object' && typeof module === 'object') {\n    module.exports = mixitup;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return mixitup;\n    });\n  } else if (typeof window.mixitup === 'undefined' || typeof window.mixitup !== 'function') {\n    window.mixitup = mixitup;\n  }\n  mixitup.BaseStatic.call(mixitup.constructor);\n  mixitup.NAME = 'mixitup';\n  mixitup.CORE_VERSION = '3.3.2';\n})(window);","map":{"version":3,"names":["window","mixitup","h","VENDORS","canary","document","createElement","i","length","requestAnimationFrame","nextElementSibling","Object","defineProperty","Element","prototype","get","el","nextSibling","nodeType","ElementPrototype","matches","machesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","selector","Array","indexOf","call","parentElement","querySelectorAll","keys","hasOwnProperty","hasDontEnumBug","dontEnums","dontEnumsLength","toString","propertyIsEnumerable","obj","result","prop","TypeError","push","isArray","arg","create","undefined","Temp","propertiesObject","defineProperties","__proto__","String","trim","replace","searchElement","n","k","t","len","arguments","Number","Infinity","Math","floor","abs","max","Function","bind","oThis","aArgs","self","FNOP","fBound","slice","apply","concat","dispatchEvent","event","fireEvent","type","err","container","config","foreignDoc","returnCollection","instance","facade","doc","output","instances","id","elements","isElement","Error","messages","errorFactoryInvalidContainer","errorFactoryContainerNotFound","randomHex","Mixer","debug","showWarnings","console","warn","warningFactoryPreexistingInstance","attach","Facade","enable","Collection","use","extension","Base","callActions","TYPE","extensions","NAME","fn","jquery","libraries","$","hasClass","cls","className","match","RegExp","addClass","removeClass","reg","extend","destination","source","deep","handleErrors","sourceKeys","key","handleExtendError","re","erroneous","message","suggestion","probableMatch","mostMatchingChars","exec","charAt","errorConfigInvalidPropertySuggestion","errorConfigInvalidProperty","template","str","dynamics","data","on","useCapture","addEventListener","attachEvent","off","removeEventListener","detachEvent","getCustomEvent","eventType","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","createEventObject","returnValue","cancelBubble","getOriginalEvent","e","touches","changedTouches","index","previousElementSibling","camelCase","toLowerCase","$1","toUpperCase","pascalCase","dashCase","HTMLElement","defaultView","nodeName","htmlString","frag","temp","createDocumentFragment","innerHTML","firstChild","appendChild","removeWhitespace","node","deleting","previousSibling","removeChild","isEqualArray","a","b","deepEquals","arrayShuffle","oldArray","newArray","p","random","arrayFromList","list","debounce","func","wait","immediate","timeout","args","callNow","later","clearTimeout","setTimeout","position","element","xPosition","yPosition","offsetParent","scrollLeft","scrollTop","offsetLeft","offsetTop","x","y","getHypotenuse","node1","node2","distanceX","distanceY","sqrt","pow","getIntersectionRatio","box1","box2","controlArea","width","height","intersectionX","intersectionY","intersectionArea","ratio","min","left","top","closestParent","includeSelf","parent","parentNode","body","children","tempId","randomHexKey","removeAttribute","clean","originalArray","cleanArray","defer","deferred","promiseWrapper","Deferred","features","has","promises","promise","Promise","resolve","reject","jQuery","warningNoPromiseImplementation","all","tasks","when","done","getPrefix","property","vendors","prefix","style","substr","getDocumentState","pageYOffset","pageXOffset","docHeight","documentElement","scrollHeight","docWidth","scrollWidth","viewportHeight","clientHeight","viewportWidth","clientWidth","isVisible","styles","getComputedStyle","visibility","opacity","seal","freeze","compareVersions","control","specimen","controlParts","split","specimenParts","controlPart","specimenPart","parseInt","isEmptyObject","getClassname","classNames","elementName","modifier","classname","block","delineatorElement","delineatorModifier","getProperty","stringKey","parts","returnCurrent","current","constructor","actionName","hooks","actions","extensionName","callFilters","filterName","input","filters","unshift","BaseStatic","registerAction","hookName","registerFilter","Features","boxSizingPrefix","transformPrefix","transitionPrefix","transformProp","transformRule","transitionProp","perspectiveProp","perspectiveOriginProp","Has","BOX_SIZING_PROP","TRANSITION_PROP","TRANSFORM_PROP","PERSPECTIVE_PROP","PERSPECTIVE_ORIGIN_PROP","TWEENABLE","init","setPrefixes","runTests","transitions","boxSizingProp","ConfigAnimation","effects","effectsIn","effectsOut","duration","easing","applyPerspective","perspectiveDistance","perspectiveOrigin","queue","queueLimit","animateResizeContainer","animateResizeTargets","staggerSequence","reverseOut","nudge","clampHeight","clampWidth","ConfigBehavior","liveSort","ConfigCallbacks","onMixStart","onMixBusy","onMixEnd","onMixFail","onMixClick","ConfigControls","live","scope","toggleLogic","toggleDefault","ConfigClassNames","elementContainer","elementFilter","elementSort","elementMultimix","elementToggle","modifierActive","modifierDisabled","modifierFailed","ConfigData","uidKey","dirtyCheck","ConfigDebug","fauxAsync","ConfigLayout","allowNestedTargets","containerClassName","siblingBefore","siblingAfter","ConfigLoad","filter","sort","dataset","ConfigSelectors","target","ConfigRender","ConfigTemplates","Config","animation","behavior","callbacks","controls","layout","load","selectors","render","templates","MixerDom","targets","UiClassNames","base","active","disabled","CommandDataset","CommandMultimix","insert","remove","changeLayout","CommandFilter","collection","action","CommandSort","sortString","attribute","order","next","CommandInsert","sibling","CommandRemove","CommandChangeLayout","ControlDefinition","controlDefinitions","Control","bound","pending","status","canDisable","handler","disable","getAttribute","bindClick","isBound","mixer","addBinding","removeBinding","removeIndex","splice","unbindClick","renderStatus","handleClick","button","isActive","command","clone","commands","dom","lastClicked","events","fire","state","originalEvent","toggleOff","toggleOn","multimix","update","toggleArray","updateLive","parseStatusChange","controlButtons","alias","toggle","StyleData","right","bottom","marginRight","marginBottom","scale","TransformData","translateX","translateY","translateZ","rotateX","rotateY","rotateZ","value","unit","TransformDefaults","transformDefaults","EventDetail","futureState","Events","mixStart","mixBusy","mixEnd","mixFail","mixClick","eventDetail","State","QueueItem","instruction","triggerElement","isToggling","isBusy","incPadding","origOrder","cache","targetsMoved","targetsImmovable","targetsBound","targetsDone","staggerDuration","transformIn","transformOut","lastOperation","userCallback","userDeferred","sanitizeConfig","cacheDom","indexTargets","getInitialState","toHide","hide","initControls","buildToggleArray","updateControls","activeFilter","activeSort","parseEffects","operation","Operation","activeContainerClassName","errorConfigDataUidKeyNotSet","startDataset","newDataset","activeDataset","startContainerClassName","newContainerClassName","show","parseFilterArgs","parseSortArgs","totalTargets","newSort","sortOperation","printSort","newOrder","startOrder","startFilter","newFilter","startSort","filterOperation","buildState","querySelector","errorDatasetPrerenderedMismatch","Target","isInDom","definition","controlElements","delagators","j","errorConfigInvalidControlsScope","getControl","getToggleSelector","delineator","toggleSelector","join","activeFilterSelector","splitCompoundSelector","compoundSelector","partials","shift","buildSortString","insertTargets","insertionIndex","getNextSibling","errorInsertPreexistingElement","display","createTextNode","insertBefore","testResult","evaluateHideShow","toRemove","toShow","matching","hasFailed","filteredTestResult","isShown","errorSortNonExistentElement","reverse","compare","willSort","attrA","getAttributeValue","attrB","isNaN","warningInconsistentSortingAttributes","isResetting","whitespace","lastChild","childNodes","parseSortString","rules","rule","transformName","parseEffect","effectName","effectString","transform","isOut","propIndex","val","units","errorConfigInvalidAnimationEffects","substring","parseFloat","totalShow","totalHide","totalMatching","goMix","shouldAnimate","willChangeLayout","startState","newState","cleanUp","docState","scrollTo","startHeight","newHeight","viewportDeltaY","startWidth","newWidth","viewportDeltaX","overflow","moveTargets","getStartMixData","parentStyle","parentRect","getBoundingClientRect","boxSizing","getPosData","showPosData","startPosData","toHidePosData","startX","startY","paddingTop","paddingBottom","borderTop","borderBottom","paddingLeft","paddingRight","borderLeft","borderRight","setInter","getInterMixData","interPosData","setFinal","getFinalMixData","finalPosData","newX","newY","getTweenData","posData","effectNames","getOwnPropertyNames","effect","widthChange","heightChange","posIn","posOut","tweenData","moveData","statusChange","willTransition","staggerIndex","checkProgress","IMoveData","hasEffect","callback","move","ContainerClassName","EFFECTABLES","marginTop","whitespaceBefore","whitespaceAfter","nextInQueue","parseMultimixArgs","UserInstruction","animate","parseInsertArgs","parseRemoveArgs","parseChangeLayoutArgs","errorFilterInvalidArguments","errorInsertInvalidArguments","warningInsertNoElements","warningRemoveNoElements","parseDatasetArgs","queueMix","queueItem","warningMultimixInstanceQueueFull","getDataOperation","errorDatasetNotSet","diffDatasets","persistantStartIds","persistantNewIds","insertedTargets","nextEl","uids","errorDatasetInvalidUidKey","errorDatasetDuplicateUid","uid","unbindEvents","replaceChild","bindEvents","lastElementChild","insertDatasetFrag","insertAt","sortCommandA","sortCommandB","isMixing","selectorIndex","getOperation","multimixCommand","sortCommand","filterCommand","changeLayoutCommand","removeCommand","insertCommand","warningGetOperationInstanceBusy","tween","multiplier","toHideIndex","applyTween","insertAfter","prepend","append","getConfig","configure","getState","forceRefresh","forceRender","destroy","TargetDom","isExcluded","errorDatasetRendererNotSet","firstElementChild","getSortString","attributeName","applyStylesIn","applyStylesOut","propertyName","currentTransformValues","currentValues","isFading","transformValues","transitionRules","isResizing","writeTransitionRule","applyTransition","delay","getDelay","transitionString","handleTransitionEnd","propName","canResize","eventBus","transitionEndEvent","getBox","rect","methodName","toMove","startDisplay","newDisplay","Messages","ERROR_FACTORY_INVALID_CONTAINER","ERROR_FACTORY_CONTAINER_NOT_FOUND","ERROR_CONFIG_INVALID_ANIMATION_EFFECTS","ERROR_CONFIG_INVALID_CONTROLS_SCOPE","ERROR_CONFIG_INVALID_PROPERTY","ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION","ERROR_CONFIG_DATA_UID_KEY_NOT_SET","ERROR_DATASET_INVALID_UID_KEY","ERROR_DATASET_DUPLICATE_UID","ERROR_INSERT_INVALID_ARGUMENTS","ERROR_INSERT_PREEXISTING_ELEMENT","ERROR_FILTER_INVALID_ARGUMENTS","ERROR_DATASET_NOT_SET","ERROR_DATASET_PRERENDERED_MISMATCH","ERROR_DATASET_RENDERER_NOT_SET","ERROR_SORT_NON_EXISTENT_ELEMENT","WARNING_FACTORY_PREEXISTING_INSTANCE","WARNING_INSERT_NO_ELEMENTS","WARNING_REMOVE_NO_ELEMENTS","WARNING_MULTIMIX_INSTANCE_QUEUE_FULL","WARNING_GET_OPERATION_INSTANCE_BUSY","WARNING_NO_PROMISE_IMPLEMENTATION","WARNING_INCONSISTENT_SORTING_ATTRIBUTES","compileTemplates","errorKey","errorMessage","exports","module","define","amd","CORE_VERSION"],"sources":["D:/Projects/React Js/python-learning/node_modules/mixitup/dist/mixitup.js"],"sourcesContent":["/**!\n * MixItUp v3.3.2\n * A high-performance, dependency-free library for animated filtering, sorting and more\n * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0\n *\n * @copyright Copyright 2014-2024 KunkaLabs Limited.\n * @author    KunkaLabs Limited.\n * @link      https://github.com/patrickkunka/mixitup\n * @license   Apache-2.0\n */\n\n(function(window) {\n    'use strict';\n\n    var mixitup = null,\n        h       = null;\n\n    (function() {\n        var VENDORS = ['webkit', 'moz', 'o', 'ms'],\n            canary  = window.document.createElement('div'),\n            i       = -1;\n\n        // window.requestAnimationFrame\n\n        for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {\n            window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];\n        }\n\n        // Element.nextElementSibling\n\n        if (typeof canary.nextElementSibling === 'undefined') {\n            Object.defineProperty(window.Element.prototype, 'nextElementSibling', {\n                get: function() {\n                    var el = this.nextSibling;\n\n                    while (el) {\n                        if (el.nodeType === 1) {\n                            return el;\n                        }\n\n                        el = el.nextSibling;\n                    }\n\n                    return null;\n                }\n            });\n        }\n\n        // Element.matches\n\n        (function(ElementPrototype) {\n            ElementPrototype.matches =\n                ElementPrototype.matches ||\n                ElementPrototype.machesSelector ||\n                ElementPrototype.mozMatchesSelector ||\n                ElementPrototype.msMatchesSelector ||\n                ElementPrototype.oMatchesSelector ||\n                ElementPrototype.webkitMatchesSelector ||\n                function (selector) {\n                    return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;\n                };\n        })(window.Element.prototype);\n\n        // Object.keys\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n        if (!Object.keys) {\n            Object.keys = (function() {\n                var hasOwnProperty      = Object.prototype.hasOwnProperty,\n                    hasDontEnumBug      = false,\n                    dontEnums           = [],\n                    dontEnumsLength     = -1;\n\n                hasDontEnumBug = !({\n                    toString: null\n                })\n                    .propertyIsEnumerable('toString');\n\n                dontEnums = [\n                    'toString',\n                    'toLocaleString',\n                    'valueOf',\n                    'hasOwnProperty',\n                    'isPrototypeOf',\n                    'propertyIsEnumerable',\n                    'constructor'\n                ];\n\n                dontEnumsLength = dontEnums.length;\n\n                return function(obj) {\n                    var result  = [],\n                        prop    = '',\n                        i       = -1;\n\n                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                        throw new TypeError('Object.keys called on non-object');\n                    }\n\n                    for (prop in obj) {\n                        if (hasOwnProperty.call(obj, prop)) {\n                            result.push(prop);\n                        }\n                    }\n\n                    if (hasDontEnumBug) {\n                        for (i = 0; i < dontEnumsLength; i++) {\n                            if (hasOwnProperty.call(obj, dontEnums[i])) {\n                                result.push(dontEnums[i]);\n                            }\n                        }\n                    }\n\n                    return result;\n                };\n            }());\n        }\n\n        // Array.isArray\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n        if (!Array.isArray) {\n            Array.isArray = function(arg) {\n                return Object.prototype.toString.call(arg) === '[object Array]';\n            };\n        }\n\n        // Object.create\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n        if (typeof Object.create !== 'function') {\n            Object.create = (function(undefined) {\n                var Temp = function() {};\n\n                return function (prototype, propertiesObject) {\n                    if (prototype !== Object(prototype) && prototype !== null) {\n                        throw TypeError('Argument must be an object, or null');\n                    }\n\n                    Temp.prototype = prototype || {};\n\n                    var result = new Temp();\n\n                    Temp.prototype = null;\n\n                    if (propertiesObject !== undefined) {\n                        Object.defineProperties(result, propertiesObject);\n                    }\n\n                    if (prototype === null) {\n                        /* jshint ignore:start */\n                        result.__proto__ = null;\n                        /* jshint ignore:end */\n                    }\n\n                    return result;\n                };\n            })();\n        }\n\n        // String.prototyoe.trim\n\n        if (!String.prototype.trim) {\n            String.prototype.trim = function() {\n                return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n            };\n        }\n\n        // Array.prototype.indexOf\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n        if (!Array.prototype.indexOf) {\n            Array.prototype.indexOf = function(searchElement) {\n                var n, k, t, len;\n\n                if (this === null) {\n                    throw new TypeError();\n                }\n\n                t = Object(this);\n\n                len = t.length >>> 0;\n\n                if (len === 0) {\n                    return -1;\n                }\n\n                n = 0;\n\n                if (arguments.length > 1) {\n                    n = Number(arguments[1]);\n\n                    if (n !== n) {\n                        n = 0;\n                    } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                    }\n                }\n\n                if (n >= len) {\n                    return -1;\n                }\n\n                for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {\n                    if (k in t && t[k] === searchElement) {\n                        return k;\n                    }\n                }\n\n                return -1;\n            };\n        }\n\n        // Function.prototype.bind\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n        if (!Function.prototype.bind) {\n            Function.prototype.bind = function(oThis) {\n                var aArgs, self, FNOP, fBound;\n\n                if (typeof this !== 'function') {\n                    throw new TypeError();\n                }\n\n                aArgs = Array.prototype.slice.call(arguments, 1);\n\n                self = this;\n\n                FNOP = function() {};\n\n                fBound = function() {\n                    return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n                if (this.prototype) {\n                    FNOP.prototype = this.prototype;\n                }\n\n                fBound.prototype = new FNOP();\n\n                return fBound;\n            };\n        }\n\n        // Element.prototype.dispatchEvent\n\n        if (!window.Element.prototype.dispatchEvent) {\n            window.Element.prototype.dispatchEvent = function(event) {\n                try {\n                    return this.fireEvent('on' + event.type, event);\n                } catch (err) {}\n            };\n        }\n    })();\n\n    /**\n     * The `mixitup()` \"factory\" function creates and returns individual instances\n     * of MixItUp, known as \"mixers\", on which API methods can be called.\n     *\n     * When loading MixItUp via a script tag, the factory function is accessed\n     * via the global variable `mixitup`. When using a module loading\n     * system (e.g. ES2015, CommonJS, RequireJS), the factory function is\n     * exported into your module when you require the MixItUp library.\n     *\n     * @example\n     * mixitup(container [,config] [,foreignDoc])\n     *\n     * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>\n     * var containerEl = document.querySelector('.container');\n     *\n     * var mixer = mixitup(containerEl);\n     *\n     * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>\n     * var mixer = mixitup('.container');\n     *\n     * @example <caption>Example 3: Passing a configuration object</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade scale(0.5)'\n     *     }\n     * });\n     *\n     * @example <caption>Example 4: Passing an iframe reference</caption>\n     * var mixer = mixitup(containerEl, config, foreignDocument);\n     *\n     * @global\n     * @namespace\n     * @public\n     * @kind        function\n     * @since       3.0.0\n     * @param       {(Element|string)}  container\n     *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.\n     * @param       {object}            [config]\n     *      An optional \"configuration object\" used to customize the behavior of the MixItUp instance.\n     * @param       {object}            [foreignDoc]\n     *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.\n     * @return      {mixitup.Mixer}\n     *      A \"mixer\" object holding the MixItUp instance.\n     */\n\n    mixitup = function(container, config, foreignDoc) {\n        var el                  = null,\n            returnCollection    = false,\n            instance            = null,\n            facade              = null,\n            doc                 = null,\n            output              = null,\n            instances           = [],\n            id                  = '',\n            elements            = [],\n            i                   = -1;\n\n        doc = foreignDoc || window.document;\n\n        if (returnCollection = arguments[3]) {\n            // A non-documented 4th paramater enabling control of multiple instances\n\n            returnCollection = typeof returnCollection === 'boolean';\n        }\n\n        if (typeof container === 'string') {\n            elements = doc.querySelectorAll(container);\n        } else if (container && typeof container === 'object' && h.isElement(container, doc)) {\n            elements = [container];\n        } else if (container && typeof container === 'object' && container.length) {\n            // Although not documented, the container may also be an array-like list of\n            // elements such as a NodeList or jQuery collection, is returnCollection is true\n\n            elements = container;\n        } else {\n            throw new Error(mixitup.messages.errorFactoryInvalidContainer());\n        }\n\n        if (elements.length < 1) {\n            throw new Error(mixitup.messages.errorFactoryContainerNotFound());\n        }\n\n        for (i = 0; el = elements[i]; i++) {\n            if (i > 0 && !returnCollection) break;\n\n            if (!el.id) {\n                id = 'MixItUp' + h.randomHex();\n\n                el.id = id;\n            } else {\n                id = el.id;\n            }\n\n            if (mixitup.instances[id] instanceof mixitup.Mixer) {\n                instance = mixitup.instances[id];\n\n                if (!config || (config && config.debug && config.debug.showWarnings !== false)) {\n                    console.warn(mixitup.messages.warningFactoryPreexistingInstance());\n                }\n            } else {\n                instance = new mixitup.Mixer();\n\n                instance.attach(el, doc, id, config);\n\n                mixitup.instances[id] = instance;\n            }\n\n            facade = new mixitup.Facade(instance);\n\n            if (config && config.debug && config.debug.enable) {\n                instances.push(instance);\n            } else {\n                instances.push(facade);\n            }\n        }\n\n        if (returnCollection) {\n            output = new mixitup.Collection(instances);\n        } else {\n            // Return the first instance regardless\n\n            output = instances[0];\n        }\n\n        return output;\n    };\n\n    /**\n     * The `.use()` static method is used to extend the functionality of mixitup with compatible\n     * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.\n     *\n     * You need only call the `.use()` function once per project, per extension, as module loaders\n     * will cache a single reference to MixItUp inclusive of all changes made.\n     *\n     * @example\n     * mixitup.use(extension)\n     *\n     * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>\n     *\n     * import mixitup from 'mixitup';\n     * import mixitupPagination from 'mixitup-pagination';\n     *\n     * mixitup.use(mixitupPagination);\n     *\n     * // All mixers created by the factory function in all modules will now\n     * // have pagination functionality\n     *\n     * var mixer = mixitup('.container');\n     *\n     * @public\n     * @name     use\n     * @memberof mixitup\n     * @kind     function\n     * @static\n     * @since    3.0.0\n     * @param    {*}  extension   A reference to the extension or library to be used.\n     * @return   {void}\n     */\n\n    mixitup.use = function(extension) {\n        mixitup.Base.prototype.callActions.call(mixitup, 'beforeUse', arguments);\n\n        // Call the extension's factory function, passing\n        // the mixitup factory as a paramater\n\n        if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {\n            // Mixitup extension\n\n            if (typeof mixitup.extensions[extension.NAME] === 'undefined') {\n                extension(mixitup);\n\n                mixitup.extensions[extension.NAME] = extension;\n            }\n        } else if (extension.fn && extension.fn.jquery) {\n            // jQuery\n\n            mixitup.libraries.$ = extension;\n        }\n\n        mixitup.Base.prototype.callActions.call(mixitup, 'afterUse', arguments);\n    };\n\n    mixitup.instances   = {};\n    mixitup.extensions  = {};\n    mixitup.libraries   = {};\n\n    /**\n     * @private\n     */\n\n    h = {\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {boolean}\n         */\n\n        hasClass: function(el, cls) {\n            return !!el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        addClass: function(el, cls) {\n            if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        removeClass: function(el, cls) {\n            if (this.hasClass(el, cls)) {\n                var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n                el.className = el.className.replace(reg, ' ').trim();\n            }\n        },\n\n        /**\n         * Merges the properties of the source object onto the\n         * target object. Alters the target object.\n         *\n         * @private\n         * @param   {object}    destination\n         * @param   {object}    source\n         * @param   {boolean}   [deep=false]\n         * @param   {boolean}   [handleErrors=false]\n         * @return  {void}\n         */\n\n        extend: function(destination, source, deep, handleErrors) {\n            var sourceKeys  = [],\n                key         = '',\n                i           = -1;\n\n            deep = deep || false;\n            handleErrors = handleErrors || false;\n\n            try {\n                if (Array.isArray(source)) {\n                    for (i = 0; i < source.length; i++) {\n                        sourceKeys.push(i);\n                    }\n                } else if (source) {\n                    sourceKeys = Object.keys(source);\n                }\n\n                for (i = 0; i < sourceKeys.length; i++) {\n                    key = sourceKeys[i];\n\n                    if (!deep || typeof source[key] !== 'object' || this.isElement(source[key])) {\n                        // All non-object properties, or all properties if shallow extend\n\n                        destination[key] = source[key];\n                    } else if (Array.isArray(source[key])) {\n                        // Arrays\n\n                        if (!destination[key]) {\n                            destination[key] = [];\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    } else {\n                        // Objects\n\n                        if (!destination[key]) {\n                            destination[key] = {};\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    }\n                }\n            } catch(err) {\n                if (handleErrors) {\n                    this.handleExtendError(err, destination);\n                } else {\n                    throw err;\n                }\n            }\n\n            return destination;\n        },\n\n        /**\n         * @private\n         * @param   {Error}  err\n         * @param   {object} destination\n         * @return  {void}\n         */\n\n        handleExtendError: function(err, destination) {\n            var re                  = /property \"?(\\w*)\"?[,:] object/i,\n                matches             = null,\n                erroneous           = '',\n                message             = '',\n                suggestion          = '',\n                probableMatch       = '',\n                key                 = '',\n                mostMatchingChars   = -1,\n                i                   = -1;\n\n            if (err instanceof TypeError && (matches = re.exec(err.message))) {\n                erroneous = matches[1];\n\n                for (key in destination) {\n                    i = 0;\n\n                    while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {\n                        i++;\n                    }\n\n                    if (i > mostMatchingChars) {\n                        mostMatchingChars = i;\n                        probableMatch = key;\n                    }\n                }\n\n                if (mostMatchingChars > 1) {\n                    suggestion = mixitup.messages.errorConfigInvalidPropertySuggestion({\n                        probableMatch: probableMatch\n                    });\n                }\n\n                message = mixitup.messages.errorConfigInvalidProperty({\n                    erroneous: erroneous,\n                    suggestion: suggestion\n                });\n\n                throw new TypeError(message);\n            }\n\n            throw err;\n        },\n\n        /**\n         * @private\n         * @param   {string} str\n         * @return  {function}\n         */\n\n        template: function(str) {\n            var re          = /\\${([\\w]*)}/g,\n                dynamics    = {},\n                matches     = null;\n\n            while ((matches = re.exec(str))) {\n                dynamics[matches[1]] = new RegExp('\\\\${' + matches[1] + '}', 'g');\n            }\n\n            return function(data) {\n                var key     = '',\n                    output  = str;\n\n                data = data || {};\n\n                for (key in dynamics) {\n                    output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');\n                }\n\n                return output;\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @param   {boolean}       useCapture\n         * @return  {void}\n         */\n\n        on: function(el, type, fn, useCapture) {\n            if (!el) return;\n\n            if (el.addEventListener) {\n                el.addEventListener(type, fn, useCapture);\n            } else if (el.attachEvent) {\n                el['e' + type + fn] = fn;\n\n                el[type + fn] = function() {\n                    el['e' + type + fn](window.event);\n                };\n\n                el.attachEvent('on' + type, el[type + fn]);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @return  {void}\n         */\n\n        off: function(el, type, fn) {\n            if (!el) return;\n\n            if (el.removeEventListener) {\n                el.removeEventListener(type, fn, false);\n            } else if (el.detachEvent) {\n                el.detachEvent('on' + type, el[type + fn]);\n                el[type + fn] = null;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}      eventType\n         * @param   {object}      detail\n         * @param   {Document}    [doc]\n         * @return  {CustomEvent}\n         */\n\n        getCustomEvent: function(eventType, detail, doc) {\n            var event = null;\n\n            doc = doc || window.document;\n\n            if (typeof window.CustomEvent === 'function') {\n                event = new window.CustomEvent(eventType, {\n                    detail: detail,\n                    bubbles: true,\n                    cancelable: true\n                });\n            } else if (typeof doc.createEvent === 'function') {\n                event = doc.createEvent('CustomEvent');\n                event.initCustomEvent(eventType, true, true, detail);\n            } else {\n                event = doc.createEventObject(),\n                event.type = eventType;\n\n                event.returnValue = false;\n                event.cancelBubble = false;\n                event.detail = detail;\n            }\n\n            return event;\n        },\n\n        /**\n         * @private\n         * @param   {Event} e\n         * @return  {Event}\n         */\n\n        getOriginalEvent: function(e) {\n            if (e.touches && e.touches.length) {\n                return e.touches[0];\n            } else if (e.changedTouches && e.changedTouches.length) {\n                return e.changedTouches[0];\n            } else {\n                return e;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        selector\n         * @return  {Number}\n         */\n\n        index: function(el, selector) {\n            var i = 0;\n\n            while ((el = el.previousElementSibling) !== null) {\n                if (!selector || el.matches(selector)) {\n                    ++i;\n                }\n            }\n\n            return i;\n        },\n\n        /**\n         * Converts a dash or snake-case string to camel case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        camelCase: function(str) {\n            return str.toLowerCase().replace(/([_-][a-z])/g, function($1) {\n                return $1.toUpperCase().replace(/[_-]/, '');\n            });\n        },\n\n        /**\n         * Converts a dash or snake-case string to pascal case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        pascalCase: function(str) {\n            return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Converts a camel or pascal-case string to dash case.\n         *\n         * @private\n         * @param   {string}    str\n         * @return  {string}\n         */\n\n        dashCase: function(str) {\n            return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {boolean}\n         */\n\n        isElement: function(el, doc) {\n            doc = doc || window.document;\n\n            if (\n                window.HTMLElement &&\n                el instanceof window.HTMLElement\n            ) {\n                return true;\n            } else if (\n                doc.defaultView &&\n                doc.defaultView.HTMLElement &&\n                el instanceof doc.defaultView.HTMLElement\n            ) {\n                return true;\n            } else {\n                return (\n                    el !== null &&\n                    el.nodeType === 1 &&\n                    typeof el.nodeName === 'string'\n                );\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}            htmlString\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {DocumentFragment}\n         */\n\n        createElement: function(htmlString, doc) {\n            var frag = null,\n                temp = null;\n\n            doc = doc || window.document;\n\n            frag = doc.createDocumentFragment();\n            temp = doc.createElement('div');\n\n            temp.innerHTML = htmlString.trim();\n\n            while (temp.firstChild) {\n                frag.appendChild(temp.firstChild);\n            }\n\n            return frag;\n        },\n\n        /**\n         * @private\n         * @param   {Node} node\n         * @return  {void}\n         */\n\n        removeWhitespace: function(node) {\n            var deleting;\n\n            while (node && node.nodeName === '#text') {\n                deleting = node;\n\n                node = node.previousSibling;\n\n                deleting.parentElement && deleting.parentElement.removeChild(deleting);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  a\n         * @param   {Array<*>}  b\n         * @return  {boolean}\n         */\n\n        isEqualArray: function(a, b) {\n            var i = a.length;\n\n            if (i !== b.length) return false;\n\n            while (i--) {\n                if (a[i] !== b[i]) return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {object}  a\n         * @param   {object}  b\n         * @return  {boolean}\n         */\n\n        deepEquals: function(a, b) {\n            var key;\n\n            if (typeof a === 'object' && a && typeof b === 'object' && b) {\n                if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n                for (key in a) {\n                    if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;\n                }\n            } else if (a !== b) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  oldArray\n         * @return  {Array<*>}\n         */\n\n        arrayShuffle: function(oldArray) {\n            var newArray    = oldArray.slice(),\n                len         = newArray.length,\n                i           = len,\n                p           = -1,\n                t           = [];\n\n            while (i--) {\n                p = ~~(Math.random() * len);\n                t = newArray[i];\n\n                newArray[i] = newArray[p];\n                newArray[p] = t;\n            }\n\n            return newArray;\n        },\n\n        /**\n         * @private\n         * @param   {object}    list\n         */\n\n        arrayFromList: function(list) {\n            var output, i;\n\n            try {\n                return Array.prototype.slice.call(list);\n            } catch(err) {\n                output = [];\n\n                for (i = 0; i < list.length; i++) {\n                    output.push(list[i]);\n                }\n\n                return output;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {function}  func\n         * @param   {Number}    wait\n         * @param   {boolean}   immediate\n         * @return  {function}\n         */\n\n        debounce: function(func, wait, immediate) {\n            var timeout;\n\n            return function() {\n                var self     = this,\n                    args     = arguments,\n                    callNow  = immediate && !timeout,\n                    later    = null;\n\n                later = function() {\n                    timeout  = null;\n\n                    if (!immediate) {\n                        func.apply(self, args);\n                    }\n                };\n\n                clearTimeout(timeout);\n\n                timeout = setTimeout(later, wait);\n\n                if (callNow) func.apply(self, args);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   element\n         * @return  {object}\n         */\n\n        position: function(element) {\n            var xPosition       = 0,\n                yPosition       = 0,\n                offsetParent    = element;\n\n            while (element) {\n                xPosition -= element.scrollLeft;\n                yPosition -= element.scrollTop;\n\n                if (element === offsetParent) {\n                    xPosition += element.offsetLeft;\n                    yPosition += element.offsetTop;\n\n                    offsetParent = element.offsetParent;\n                }\n\n                element = element.parentElement;\n            }\n\n            return {\n                x: xPosition,\n                y: yPosition\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    node1\n         * @param   {object}    node2\n         * @return  {Number}\n         */\n\n        getHypotenuse: function(node1, node2) {\n            var distanceX = node1.x - node2.x,\n                distanceY = node1.y - node2.y;\n\n            distanceX = distanceX < 0 ? distanceX * -1 : distanceX,\n            distanceY = distanceY < 0 ? distanceY * -1 : distanceY;\n\n            return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\n        },\n\n        /**\n         * Calcuates the area of intersection between two rectangles and expresses it as\n         * a ratio in comparison to the area of the first rectangle.\n         *\n         * @private\n         * @param   {Rect}  box1\n         * @param   {Rect}  box2\n         * @return  {number}\n         */\n\n        getIntersectionRatio: function(box1, box2) {\n            var controlArea         = box1.width * box1.height,\n                intersectionX       = -1,\n                intersectionY       = -1,\n                intersectionArea    = -1,\n                ratio               = -1;\n\n            intersectionX =\n                Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));\n\n            intersectionY =\n                Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));\n\n            intersectionArea = intersectionY * intersectionX;\n\n            ratio = intersectionArea / controlArea;\n\n            return ratio;\n        },\n\n        /**\n         * @private\n         * @param   {object}            el\n         * @param   {string}            selector\n         * @param   {boolean}           [includeSelf]\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {Element|null}\n         */\n\n        closestParent: function(el, selector, includeSelf, doc) {\n            var parent  = el.parentNode;\n\n            doc = doc || window.document;\n\n            if (includeSelf && el.matches(selector)) {\n                return el;\n            }\n\n            while (parent && parent != doc.body) {\n                if (parent.matches && parent.matches(selector)) {\n                    return parent;\n                } else if (parent.parentNode) {\n                    parent = parent.parentNode;\n                } else {\n                    return null;\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {string}            selector\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {NodeList}\n         */\n\n        children: function(el, selector, doc) {\n            var children    = [],\n                tempId      = '';\n\n            doc = doc || window.doc;\n\n            if (el) {\n                if (!el.id) {\n                    tempId = 'Temp' + this.randomHexKey();\n\n                    el.id = tempId;\n                }\n\n                children = doc.querySelectorAll('#' + el.id + ' > ' + selector);\n\n                if (tempId) {\n                    el.removeAttribute('id');\n                }\n            }\n\n            return children;\n        },\n\n        /**\n         * Creates a clone of a provided array, with any empty strings removed.\n         *\n         * @private\n         * @param   {Array<*>} originalArray\n         * @return  {Array<*>}\n         */\n\n        clean: function(originalArray) {\n            var cleanArray = [],\n                i = -1;\n\n            for (i = 0; i < originalArray.length; i++) {\n                if (originalArray[i] !== '') {\n                    cleanArray.push(originalArray[i]);\n                }\n            }\n\n            return cleanArray;\n        },\n\n        /**\n         * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.\n         *\n         * @private\n         * @param  {object} libraries\n         * @return {h.Deferred}\n         */\n\n        defer: function(libraries) {\n            var deferred       = null,\n                promiseWrapper = null,\n                $              = null;\n\n            promiseWrapper = new this.Deferred();\n\n            if (mixitup.features.has.promises) {\n                // ES6 native promise or polyfill\n\n                promiseWrapper.promise = new Promise(function(resolve, reject) {\n                    promiseWrapper.resolve = resolve;\n                    promiseWrapper.reject  = reject;\n                });\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.Deferred === 'function') {\n                // jQuery\n\n                deferred = $.Deferred();\n\n                promiseWrapper.promise = deferred.promise();\n                promiseWrapper.resolve = deferred.resolve;\n                promiseWrapper.reject  = deferred.reject;\n            } else if (window.console) {\n                // No implementation\n\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return promiseWrapper;\n        },\n\n        /**\n         * @private\n         * @param   {Array<Promise>}    tasks\n         * @param   {object}            libraries\n         * @return  {Promise<Array>}\n         */\n\n        all: function(tasks, libraries) {\n            var $ = null;\n\n            if (mixitup.features.has.promises) {\n                return Promise.all(tasks);\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.when === 'function') {\n                return $.when.apply($, tasks)\n                    .done(function() {\n                        // jQuery when returns spread arguments rather than an array or resolutions\n\n                        return arguments;\n                    });\n            }\n\n            // No implementation\n\n            if (window.console) {\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return [];\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        property\n         * @param   {Array<string>} vendors\n         * @return  {string}\n         */\n\n        getPrefix: function(el, property, vendors) {\n            var i       = -1,\n                prefix  = '';\n\n            if (h.dashCase(property) in el.style) return '';\n\n            for (i = 0; prefix = vendors[i]; i++) {\n                if (prefix + property in el.style) {\n                    return prefix.toLowerCase();\n                }\n            }\n\n            return 'unsupported';\n        },\n\n        /**\n         * @private\n         * @return  {string}\n         */\n\n        randomHex: function() {\n            return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLDocument}  [doc]\n         * @return  {object}\n         */\n\n        getDocumentState: function(doc) {\n            doc = typeof doc.body === 'object' ? doc : window.document;\n\n            return {\n                scrollTop: window.pageYOffset,\n                scrollLeft: window.pageXOffset,\n                docHeight: doc.documentElement.scrollHeight,\n                docWidth: doc.documentElement.scrollWidth,\n                viewportHeight: doc.documentElement.clientHeight,\n                viewportWidth: doc.documentElement.clientWidth\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         * @param   {function}  fn\n         * @return  {function}\n         */\n\n        bind: function(obj, fn) {\n            return function() {\n                return fn.apply(obj, arguments);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @return  {boolean}\n         */\n\n        isVisible: function(el) {\n            var styles = null;\n\n            if (el.offsetParent) return true;\n\n            styles = window.getComputedStyle(el);\n\n            if (\n                styles.position === 'fixed' &&\n                styles.visibility !== 'hidden' &&\n                styles.opacity !== '0'\n            ) {\n                // Fixed elements report no offsetParent,\n                // but may still be invisible\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        seal: function(obj) {\n            if (typeof Object.seal === 'function') {\n                Object.seal(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        freeze: function(obj) {\n            if (typeof Object.freeze === 'function') {\n                Object.freeze(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}    control\n         * @param   {string}    specimen\n         * @return  {boolean}\n         */\n\n        compareVersions: function(control, specimen) {\n            var controlParts    = control.split('.'),\n                specimenParts   = specimen.split('.'),\n                controlPart     = -1,\n                specimenPart    = -1,\n                i               = -1;\n\n            for (i = 0; i < controlParts.length; i++) {\n                controlPart     = parseInt(controlParts[i].replace(/[^\\d.]/g, ''));\n                specimenPart    = parseInt(specimenParts[i].replace(/[^\\d.]/g, '') || 0);\n\n                if (specimenPart < controlPart) {\n                    return false;\n                } else if (specimenPart > controlPart) {\n                    return true;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @constructor\n         */\n\n        Deferred: function() {\n            this.promise    = null;\n            this.resolve    = null;\n            this.reject     = null;\n            this.id         = h.randomHex();\n        },\n\n        /**\n         * @private\n         * @param   {object}  obj\n         * @return  {boolean}\n         */\n\n        isEmptyObject: function(obj) {\n            var key = '';\n\n            if (typeof Object.keys === 'function') {\n                return Object.keys(obj).length === 0;\n            }\n\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @param   {mixitup.Config.ClassNames}   classNames\n         * @param   {string}                      elementName\n         * @param   {string}                      [modifier]\n         * @return  {string}\n         */\n\n        getClassname: function(classNames, elementName, modifier) {\n            var classname = '';\n\n            classname += classNames.block;\n\n            if (classname.length) {\n                classname += classNames.delineatorElement;\n            }\n\n            classname += classNames['element' + this.pascalCase(elementName)];\n\n            if (!modifier) return classname;\n\n            if (classname.length) {\n                classname += classNames.delineatorModifier;\n            }\n\n            classname += modifier;\n\n            return classname;\n        },\n\n        /**\n         * Returns the value of a property on a given object via its string key.\n         *\n         * @param   {object}    obj\n         * @param   {string}    stringKey\n         * @return  {*} value\n         */\n\n        getProperty: function(obj, stringKey) {\n            var parts           = stringKey.split('.'),\n                returnCurrent   = null,\n                current         = '',\n                i               = 0;\n\n            if (!stringKey) {\n                return obj;\n            }\n\n            returnCurrent = function(obj) {\n                if (!obj) {\n                    return null;\n                } else {\n                    return obj[current];\n                }\n            };\n\n            while (i < parts.length) {\n                current = parts[i];\n\n                obj = returnCurrent(obj);\n\n                i++;\n            }\n\n            if (typeof obj !== 'undefined') {\n                return obj;\n            } else {\n                return null;\n            }\n        }\n    };\n\n    mixitup.h = h;\n\n    /**\n     * The Base class adds instance methods to all other extensible MixItUp classes,\n     * enabling the calling of any registered hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Base = function() {};\n\n    mixitup.Base.prototype = {\n        constructor: mixitup.Base,\n\n        /**\n         * Calls any registered hooks for the provided action.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    actionName\n         * @param       {Array<*>}  args\n         * @return      {void}\n         */\n\n        callActions: function(actionName, args) {\n            var self            = this,\n                hooks           = self.constructor.actions[actionName],\n                extensionName   = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return;\n\n            for (extensionName in hooks) {\n                hooks[extensionName].apply(self, args);\n            }\n        },\n\n        /**\n         * Calls any registered hooks for the provided filter.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    filterName\n         * @param       {*}         input\n         * @param       {Array<*>}  args\n         * @return      {*}\n         */\n\n        callFilters: function(filterName, input, args) {\n            var self            = this,\n                hooks           = self.constructor.filters[filterName],\n                output          = input,\n                extensionName   = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return output;\n\n            args = args || [];\n\n            for (extensionName in hooks) {\n                args = h.arrayFromList(args);\n\n                args.unshift(output);\n\n                output = hooks[extensionName].apply(self, args);\n            }\n\n            return output;\n        }\n    };\n\n    /**\n     * The BaseStatic class holds a set of static methods which are then added to all other\n     * extensible MixItUp classes as a means of integrating extensions via the addition of new\n     * methods and/or actions and hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.BaseStatic = function() {\n        this.actions = {};\n        this.filters = {};\n\n        /**\n         * Performs a shallow extend on the class's prototype, adding one or more new members to\n         * the class in a single operation.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {object} extension\n         * @return      {void}\n         */\n\n        this.extend = function(extension) {\n            h.extend(this.prototype, extension);\n        };\n\n        /**\n         * Registers a function to be called on the action hook of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerAction = function(hookName, extensionName, func) {\n            (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;\n        };\n\n        /**\n         * Registers a function to be called on the filter of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerFilter = function(hookName, extensionName, func) {\n            (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;\n        };\n    };\n\n    /**\n     * The `mixitup.Features` class performs all feature and CSS prefix detection\n     * neccessary for MixItUp to function correctly, as well as storing various\n     * string and array constants. All feature decection is on evaluation of the\n     * library and stored in a singleton instance for use by other internal classes.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Features = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.boxSizingPrefix            = '';\n        this.transformPrefix            = '';\n        this.transitionPrefix           = '';\n\n        this.boxSizingPrefix            = '';\n        this.transformProp              = '';\n        this.transformRule              = '';\n        this.transitionProp             = '';\n        this.perspectiveProp            = '';\n        this.perspectiveOriginProp      = '';\n\n        this.has                        = new mixitup.Has();\n\n        this.canary                     = null;\n\n        this.BOX_SIZING_PROP            = 'boxSizing';\n        this.TRANSITION_PROP            = 'transition';\n        this.TRANSFORM_PROP             = 'transform';\n        this.PERSPECTIVE_PROP           = 'perspective';\n        this.PERSPECTIVE_ORIGIN_PROP    = 'perspectiveOrigin';\n        this.VENDORS                    = ['Webkit', 'moz', 'O', 'ms'];\n\n        this.TWEENABLE = [\n            'opacity',\n            'width', 'height',\n            'marginRight', 'marginBottom',\n            'x', 'y',\n            'scale',\n            'translateX', 'translateY', 'translateZ',\n            'rotateX', 'rotateY', 'rotateZ'\n        ];\n\n        this.callActions('afterConstruct');\n    };\n\n    mixitup.BaseStatic.call(mixitup.Features);\n\n    mixitup.Features.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Features.prototype,\n    /** @lends mixitup.Features */\n    {\n        constructor: mixitup.Features,\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        init: function() {\n            var self = this;\n\n            self.callActions('beforeInit', arguments);\n\n            self.canary = document.createElement('div');\n\n            self.setPrefixes();\n            self.runTests();\n\n            self.callActions('beforeInit', arguments);\n        },\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        runTests: function() {\n            var self = this;\n\n            self.callActions('beforeRunTests', arguments);\n\n            self.has.promises       = typeof window.Promise === 'function';\n            self.has.transitions    = self.transitionPrefix !== 'unsupported';\n\n            self.callActions('afterRunTests', arguments);\n\n            h.freeze(self.has);\n        },\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        setPrefixes: function() {\n            var self = this;\n\n            self.callActions('beforeSetPrefixes', arguments);\n\n            self.transitionPrefix   = h.getPrefix(self.canary, 'Transition', self.VENDORS);\n            self.transformPrefix    = h.getPrefix(self.canary, 'Transform', self.VENDORS);\n            self.boxSizingPrefix    = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);\n\n            self.boxSizingProp = self.boxSizingPrefix ?\n                self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;\n\n            self.transitionProp = self.transitionPrefix ?\n                self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;\n\n            self.transformProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;\n\n            self.transformRule = self.transformPrefix ?\n                '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;\n\n            self.perspectiveProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;\n\n            self.perspectiveOriginProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) :\n                self.PERSPECTIVE_ORIGIN_PROP;\n\n            self.callActions('afterSetPrefixes', arguments);\n        }\n    });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Has = function() {\n        this.transitions    = false;\n        this.promises       = false;\n\n        h.seal(this);\n    };\n\n    // Assign a singleton instance to `mixitup.features` and initialise:\n\n    mixitup.features = new mixitup.Features();\n\n    mixitup.features.init();\n\n    /**\n     * A group of properties defining the mixer's animation and effects settings.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        animation\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigAnimation = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not animation should be enabled for the MixItUp instance.\n         * If `false`, all operations will occur instantly and syncronously, although callback\n         * functions and any returned promises will still be fulfilled.\n         *\n         * @example <caption>Example: Create a mixer with all animations disabled</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A string of one or more space-separated properties to which transitions will be\n         * applied for all filtering animations.\n         *\n         * Properties can be listed any order or combination, although they will be applied in a specific\n         * predefined order to produce consistent results.\n         *\n         * To learn more about available effects, experiment by providing different animation configurations to any of our [demos](https://patrickunka.github.io/mixitup/demos).\n         *\n         * @example <caption>Example: Apply \"fade\" and \"translateZ\" effects to all animations</caption>\n         * // As targets are filtered in and out, they will fade between\n         * // opacity 1 and 0 and transform between translateZ(-100px) and\n         * // translateZ(0).\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateZ(-100px)'\n         *     }\n         * });\n         *\n         * @name        effects\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'fade scale'\n         */\n\n        this.effects = 'fade scale';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-in\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsIn: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsIn\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsIn = '';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-out\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsOut: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsOut = '';\n\n        /**\n         * An integer dictating the duration of all MixItUp animations in milliseconds, not\n         * including any additional delay apllied via the `'stagger'` effect.\n         *\n         * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         duration: 200\n         *     }\n         * });\n         *\n         * @name        duration\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     600\n         */\n\n        this.duration = 600;\n\n        /**\n         * A valid CSS3 transition-timing function or shorthand. For a full list of accepted\n         * values, visit <a href=\"http://easings.net\" target=\"_blank\">easings.net</a>.\n         *\n         * @example <caption>Example 1: Apply \"ease-in-out\" easing to all animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'ease-in-out'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Apply a custom \"cubic-bezier\" easing function to all animations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'\n         *     }\n         * });\n         *\n         * @name        easing\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'ease'\n         */\n\n        this.easing = 'ease';\n\n        /**\n         * A boolean dictating whether or not to apply perspective to the MixItUp container\n         * during animations. By default, perspective is always applied and creates the\n         * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,\n         * and `rotateY`.\n         *\n         * You may wish to disable this and define your own perspective settings via CSS.\n         *\n         * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         applyPerspective: false\n         *     }\n         * });\n         *\n         * @name        applyPerspective\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {bolean}\n         * @default     true\n         */\n\n        this.applyPerspective = true;\n\n        /**\n         * The perspective distance value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective distance of 2000px</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'rotateY(-25deg)',\n         *         perspectiveDistance: '2000px'\n         *     }\n         * });\n         *\n         * @name        perspectiveDistance\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '3000px'\n         */\n\n        this.perspectiveDistance = '3000px';\n\n        /**\n         * The perspective-origin value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'transateZ(-200px)',\n         *         perspectiveOrigin: '100% 0'\n         *     }\n         * });\n         *\n         * @name        perspectiveOrigin\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '50% 50%'\n         */\n\n        this.perspectiveOrigin = '50% 50%';\n\n        /**\n         * A boolean dictating whether or not to enable the queuing of operations.\n         *\n         * If `true` (default), and a control is clicked or an API call is made while another\n         * operation is progress, the operation will go into the queue and will be automatically exectuted\n         * when the previous operaitons is finished.\n         *\n         * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`\n         * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.\n         *\n         * @example <caption>Example: Disable queuing</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queue: false\n         *     }\n         * });\n         *\n         * @name        queue\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.queue = true;\n\n        /**\n         * An integer dictacting the maximum number of operations allowed in the queue at\n         * any time, when queuing is enabled.\n         *\n         * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queueLimit: 5\n         *     }\n         * });\n         *\n         * @name        queueLimit\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     3\n         */\n\n        this.queueLimit = 3;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of the\n         * container as elements are filtered in and out. If disabled, the container height\n         * will change abruptly.\n         *\n         * It may be desirable to disable this on mobile devices as the CSS `height` and\n         * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.\n         *\n         * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: myFeatureTests.isMobile ? false : true\n         *     }\n         * });\n         *\n         * @name        animateResizeContainer\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.animateResizeContainer = true;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of target\n         * elements as they change throughout the course of an animation.\n         *\n         * This is often a must for flex-box grid layouts where the size of target elements may change\n         * depending on final their position in relation to their siblings, or for `.changeLayout()`\n         * operations where the size of targets change between layouts.\n         *\n         * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated\n         * properties which may adversely affect performance on slower devices, and is therefore\n         * disabled by default.\n         *\n         * @example <caption>Example: Enable the transitioning of target widths and heights</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeTargets: true\n         *     }\n         * });\n         *\n         * @name        animateResizeTargets\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.animateResizeTargets = false;\n\n        /**\n         * A custom function used to manipulate the order in which the stagger delay is\n         * incremented when using the ‘stagger’ effect.\n         *\n         * When using the 'stagger' effect, the delay applied to each target element is incremented\n         * based on its index. You may create a custom function to manipulate the order in which the\n         * delay is incremented and create engaging non-linear stagger effects.\n         *\n         * The function receives the index of the target element as a parameter, and must\n         * return an integer which serves as the multiplier for the stagger delay.\n         *\n         * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return i % 3;\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));\n         *         }\n         *     }\n         * });\n         *\n         * @name        staggerSequence\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.staggerSequence = null;\n\n        /**\n         * A boolean dictating whether or not to reverse the direction of `translate`\n         * and `rotate` transforms for elements being filtered out.\n         *\n         * It can be used to create carousel-like animations where elements enter and exit\n         * from opposite directions. If enabled, the effect `translateX(-100%)` for elements\n         * being filtered in would become `translateX(100%)` for targets being filtered out.\n         *\n         * This functionality can also be achieved by providing seperate effects\n         * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.\n         *\n         * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>\n         * // Elements being filtered in will be translated from '100%' to '0' while\n         * // elements being filtered out will be translated from 0 to '-100%'\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateX(100%)',\n         *         reverseOut: true,\n         *         nudge: false // Disable nudging to create a carousel-like effect\n         *     }\n         * });\n         *\n         * @name        reverseOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.reverseOut = false;\n\n        /**\n         * A boolean dictating whether or not to \"nudge\" the animation path of targets\n         * when they are being filtered in and out simulatenously.\n         *\n         * This has been the default behavior of MixItUp since version 1, but it\n         * may be desirable to disable this effect when filtering directly from\n         * one exclusive set of targets to a different exclusive set of targets,\n         * to create a carousel-like effect, or a generally more subtle animation.\n         *\n         * @example <caption>Example: Disable the \"nudging\" of targets being filtered in and out simulatenously</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         nudge: false\n         *     }\n         * });\n         *\n         * @name        nudge\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.nudge = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the height of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * height of the container might affect its vertical positioning in the viewport\n         * (e.g. a vertically-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container height-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampHeight: false\n         *     }\n         * });\n         *\n         * @name        clampHeight\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampHeight = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the width of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * width of the container might affect its horitzontal positioning in the viewport\n         * (e.g. a horizontall-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container width-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampWidth: false\n         *     }\n         * });\n         *\n         * @name        clampWidth\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampWidth = true;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigAnimation);\n\n    mixitup.ConfigAnimation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigAnimation.prototype.constructor = mixitup.ConfigAnimation;\n\n    /**\n     * A group of properties relating to the behavior of the Mixer.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        behavior\n     * @namespace\n     * @public\n     * @since       3.1.12\n     */\n\n    mixitup.ConfigBehavior = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether to allow \"live\" sorting of the mixer.\n         *\n         * Because of the expensive nature of sorting, MixItUp makes use of several\n         * internal optimizations to skip redundant sorting operations, such as when\n         * the newly requested sort command is the same as the active one. The caveat\n         * to this optimization is that \"live\" edits to the value of a target's sorting\n         * attribute will be ignored when requesting a re-sort by the same attribute.\n         *\n         * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort\n         * regardless of whether or not the sorting attribute and order have changed.\n         *\n         * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     behavior: {\n         *         liveSort: true\n         *     },\n         *     load: {\n         *         sort: 'edited:desc'\n         *     }\n         * });\n         *\n         * var target = containerEl.children[3];\n         *\n         * console.log(target.getAttribute('data-edited')); // '2015-04-24'\n         *\n         * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date\n         *\n         * mixer.sort('edited:desc')\n         *     .then(function(state) {\n         *         // The target is now at the top of the list\n         *\n         *         console.log(state.targets[0] === target); // true\n         *     });\n         *\n         * @name        liveSort\n         * @memberof    mixitup.Config.behavior\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.liveSort = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigBehavior);\n\n    mixitup.ConfigBehavior.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigBehavior.prototype.constructor = mixitup.ConfigBehavior;\n\n    /**\n     * A group of optional callback functions to be invoked at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each function is analogous to an event of the same name triggered from the\n     * container element, and is invoked immediately after it.\n     *\n     * All callback functions receive the current `state` object as their first\n     * argument, as well as other more specific arguments described below.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        callbacks\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigCallbacks = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A callback function invoked immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * A second `futureState` argument is passed to the function which represents the final\n         * state of the mixer once the requested operation has completed.\n         *\n         * @example <caption>Example: Adding an `onMixStart` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixStart: function(state, futureState) {\n         *              console.log('Starting operation...');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixStart\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixStart = null;\n\n        /**\n         * A callback function invoked when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @example <caption>Example: Adding an `onMixBusy` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixBusy: function(state) {\n         *              console.log('Mixer busy');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixBusy\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixBusy  = null;\n\n        /**\n         * A callback function invoked after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @example <caption>Example: Adding an `onMixEnd` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixEnd: function(state) {\n         *              console.log('Operation complete');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixEnd\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixEnd   = null;\n\n        /**\n         * A callback function invoked whenever an operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @example <caption>Example: Adding an `onMixFail` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixFail: function(state) {\n         *              console.log('No items could be found matching the requested filter');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixFail\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixFail  = null;\n\n        /**\n         * A callback function invoked whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * The clicked element is assigned to the `this` keyword within the function. The original\n         * click event is passed to the function as the second argument, which can be useful if\n         * using `<a>` tags as controls where the default behavior needs to be prevented.\n         *\n         * Returning `false` from the callback will prevent the control click from triggering\n         * an operation.\n         *\n         * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              console.log('The control \"' + this.innerText + '\" was clicked');\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Prevent original click event from bubbling up:\n         *              originalEvent.stopPropagation();\n         *\n         *              // Prevent default behavior of clicked element:\n         *              originalEvent.preventDefault();\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Perform some conditional check:\n         *\n         *              if (myApp.isLoading) {\n         *                  // By returning false, we can prevent the control click from triggering an operation.\n         *\n         *                  return false;\n         *              }\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixClick\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigCallbacks);\n\n    mixitup.ConfigCallbacks.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigCallbacks.prototype.constructor = mixitup.ConfigCallbacks;\n\n    /**\n     * A group of properties relating to clickable control elements.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        controls\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigControls = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not controls should be enabled for the mixer instance.\n         *\n         * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with\n         * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.\n         *\n         * If `false`, no click handlers will be bound, and all functionality must therefore be performed\n         * via the mixer's API methods.\n         *\n         * If you do not intend to use the default controls, setting this property to `false` will\n         * marginally improve the startup time of your mixer instance, and will also prevent any other active\n         * mixer instances in the DOM which are bound to controls from controlling the instance.\n         *\n         * @example <caption>Example: Disabling controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * // With the default controls disabled, we can only control\n         * // the mixer via its API methods, e.g.:\n         *\n         * mixer.filter('.cat-1');\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A boolean dictating whether or not to use event delegation when binding click events\n         * to the default controls.\n         *\n         * If `false` (default behavior), each control button in the DOM will be found and\n         * individually bound when a mixer is instantiated, with their corresponding actions\n         * cached for performance.\n         *\n         * If `true`, a single click handler will be applied to the `window` (or container element - see\n         * `config.controls.scope`), and any click events triggered by elements with `data-filter`,\n         * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.\n         *\n         * If you require a user interface where control buttons may be added, removed, or changed during the\n         * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable\n         * performance deficit when using live controls, as the value of each control button must be read\n         * from the DOM in real time once the click event has propagated.\n         *\n         * @example <caption>Example: Setting live controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         live: true\n         *     }\n         * });\n         *\n         * // Control buttons can now be added, remove and changed without breaking\n         * // the mixer's UI\n         *\n         * @name        live\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.live = false;\n\n        /**\n         * A string dictating the \"scope\" to use when binding or querying the default controls. The available\n         * values are `'global'` or `'local'`.\n         *\n         * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons\n         * to bind, or delegate click events from (see `config.controls.live`).\n         *\n         * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.\n         * This may be desireable if you require multiple active mixer instances within the same document, with\n         * controls that would otherwise intefere with each other if scoped globally.\n         *\n         * Conversely, if you wish to control multiple instances with a single UI, you would create one\n         * set of controls and keep the controls scope of each mixer set to `global`.\n         *\n         * @example <caption>Example: Setting 'local' scoped controls</caption>\n         * var mixerOne = mixitup(containerOne, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * var mixerTwo = mixitup(containerTwo, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * // Both mixers can now exist within the same document with\n         * // isolated controls placed within their container elements.\n         *\n         * @name        scope\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'global'\n         */\n\n        this.scope = 'global'; // enum: ['local' ,'global']\n\n        /**\n         * A string dictating the type of logic to apply when concatenating the filter selectors of\n         * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).\n         *\n         * If set to `'or'` (default behavior), selectors will be concatenated together as\n         * a comma-seperated list. For example:\n         *\n         * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)\n         *\n         * If set to `'and'`, selectors will be directly concatenated together. For example:\n         *\n         * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)\n         *\n         * @example <caption>Example: Setting \"and\" toggle logic</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleLogic: 'and'\n         *     }\n         * });\n         *\n         * @name        toggleLogic\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'or'\n         */\n\n        this.toggleLogic = 'or'; // enum: ['or', 'and']\n\n        /**\n         * A string dictating the filter behavior when all toggles are inactive.\n         *\n         * When set to `'all'` (default behavior), *all* targets will be shown by default\n         * when no toggles are active, or at the moment all active toggles are toggled off.\n         *\n         * When set to `'none'`, no targets will be shown by default when no toggles are\n         * active, or at the moment all active toggles are toggled off.\n         *\n         * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'all'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'all'\n         *          console.log(state.totalShow); // 12\n         *     });\n         *\n         * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'none'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'none'\n         *          console.log(state.totalShow); // 0\n         *     });\n         *\n         * @name        toggleDefault\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.toggleDefault = 'all'; // enum: ['all', 'none']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigControls);\n\n    mixitup.ConfigControls.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigControls.prototype.constructor = mixitup.ConfigControls;\n\n    /**\n     * A group of properties defining the output and structure of class names programmatically\n     * added to controls and containers to reflect the state of the mixer.\n     *\n     * Most commonly, class names are added to controls by MixItUp to indicate that\n     * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.\n     *\n     * Using a \"BEM\" like structure, each classname is broken into the three parts:\n     * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier\n     * name (e.g. `'active'`) reflecting the state of the element.\n     *\n     * By default, each part of the classname is concatenated together using single hyphens as\n     * delineators, but this can be easily customised to match the naming convention and style of\n     * your project.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        classNames\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigClassNames = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The \"block\" portion, or top-level namespace added to the start of any class names created by MixItUp.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.block` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio'\n         *     }\n         * });\n         *\n         * // Active control output: \"portfolio-control-active\"\n         *\n         * @example <caption>Example 2: Removing `config.classNames.block`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: ''\n         *     }\n         * });\n         *\n         * // Active control output: \"control-active\"\n         *\n         * @name        block\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'mixitup'\n         */\n\n        this.block = 'mixitup';\n\n        /**\n         * The \"element\" portion of the class name added to container.\n         *\n         * @name        elementContainer\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'container'\n         */\n\n        this.elementContainer = 'container';\n\n        /**\n         * The \"element\" portion of the class name added to filter controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"mixitup-filter-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"portfolio-filter-active\"\n         *\n         * @name        elementFilter\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementFilter = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to sort controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"mixitup-sort-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"portfolio-sort-active\"\n         *\n         * @name        elementSort\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementSort = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to multimix controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementMultimix: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"mixitup-multimix-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"portfolio-multimix-active\"\n         *\n         * @name        elementMultimix\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementMultimix = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to toggle controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"mixitup-toggle-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"portfolio-toggle-active\"\n         *\n         * @name        elementToggle\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementToggle = 'control';\n\n        /**\n         * The \"modifier\" portion of the class name added to active controls.\n         * @name        modifierActive\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'active'\n         */\n\n        this.modifierActive = 'active';\n\n        /**\n         * The \"modifier\" portion of the class name added to disabled controls.\n         *\n         * @name        modifierDisabled\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'disabled'\n         */\n\n        this.modifierDisabled = 'disabled';\n\n        /**\n         * The \"modifier\" portion of the class name added to the container when in a \"failed\" state.\n         *\n         * @name        modifierFailed\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'failed'\n         */\n\n        this.modifierFailed = 'failed';\n\n        /**\n         * The delineator used between the \"block\" and \"element\" portions of any class name added by MixItUp.\n         *\n         * If the block portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing the delineator to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *     }\n         * });\n         *\n         * // example active control output: \"mixitup__control-active\"\n         *\n         * @name        delineatorElement\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorElement = '-';\n\n        /**\n         * The delineator used between the \"element\" and \"modifier\" portions of any class name added by MixItUp.\n         *\n         * If the element portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing both delineators to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *         delineatorModifier: '--'\n         *     }\n         * });\n         *\n         * // Active control output: \"mixitup__control--active\"\n         *\n         * @name        delineatorModifier\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorModifier = '-';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigClassNames);\n\n    mixitup.ConfigClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigClassNames.prototype.constructor = mixitup.ConfigClassNames;\n\n    /**\n     * A group of properties relating to MixItUp's dataset API.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        data\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string specifying the name of the key containing your data model's unique\n         * identifier (UID). To use the dataset API, a UID key must be specified and\n         * be present and unique on all objects in the dataset you provide to MixItUp.\n         *\n         * For example, if your dataset is made up of MongoDB documents, the UID\n         * key would be `'id'` or `'_id'`.\n         *\n         * @example <caption>Example: Setting the UID to `'id'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     }\n         * });\n         *\n         * @name        uidKey\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.uidKey = '';\n\n        /**\n         * A boolean dictating whether or not MixItUp should \"dirty check\" each object in\n         * your dataset for changes whenever `.dataset()` is called, and re-render any targets\n         * for which a change is found.\n         *\n         * Depending on the complexity of your data model, dirty checking can be expensive\n         * and is therefore disabled by default.\n         *\n         * NB: For changes to be detected, a new immutable instance of the edited model must be\n         * provided to mixitup, rather than manipulating properties on the existing instance.\n         * If your changes are a result of a DB write and read, you will most likely be calling\n         * `.dataset()` with a clean set of objects each time, so this will not be an issue.\n         *\n         * @example <caption>Example: Enabling dirty checking</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\"\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\"\n         *         ...\n         *     }\n         * ];\n         *\n         * // Instantiate a mixer with a pre-loaded dataset, and a target renderer\n         * // function defined\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id',\n         *         dirtyCheck: true\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     },\n         *     render: {\n         *         target: function() { ... }\n         *     }\n         * });\n         *\n         * // For illustration, we will clone and edit the second object in the dataset.\n         * // NB: this would typically be done server-side in response to a DB update,\n         * and then re-queried via an API.\n         *\n         * myDataset[1] = Object.assign({}, myDataset[1]);\n         *\n         * myDataset[1].title = 'Blog Post Title 11';\n         *\n         * mixer.dataset(myDataset)\n         *    .then(function() {\n         *        // the target with ID \"1\", will be re-rendered reflecting its new title\n         *    });\n         *\n         * @name        dirtyCheck\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.dirtyCheck = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigData);\n\n    mixitup.ConfigData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigData.prototype.constructor = mixitup.ConfigData;\n\n    /**\n     * A group of properties allowing the toggling of various debug features.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        debug\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigDebug = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not the mixer instance returned by the\n         * `mixitup()` factory function should expose private properties and methods.\n         *\n         * By default, mixer instances only expose their public API, but enabling\n         * debug mode will give you access to various mixer internals which may aid\n         * in debugging, or the authoring of extensions.\n         *\n         * @example <caption>Example: Enabling debug mode</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         enable: true\n         *     }\n         * });\n         *\n         * // Private properties and methods will now be visible on the mixer instance:\n         *\n         * console.log(mixer);\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.enable = false;\n\n        /**\n         * A boolean dictating whether or not warnings should be shown when various\n         * common gotchas occur.\n         *\n         * Warnings are intended to provide insights during development when something\n         * occurs that is not a fatal, but may indicate an issue with your integration,\n         * and are therefore turned on by default. However, you may wish to disable\n         * them in production.\n         *\n         * @example <caption>Example 1: Disabling warnings</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disabling warnings based on environment</caption>\n         *\n         * var showWarnings = myAppConfig.environment === 'development' ? true : false;\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: showWarnings\n         *     }\n         * });\n         *\n         * @name        showWarnings\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.showWarnings = true;\n\n        /**\n         * Used for server-side testing only.\n         *\n         * @private\n         * @name        fauxAsync\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.fauxAsync = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigDebug);\n\n    mixitup.ConfigDebug.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigDebug.prototype.constructor = mixitup.ConfigDebug;\n\n    /**\n     * A group of properties relating to the layout of the container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        layout\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigLayout = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not mixitup should query all descendants\n         * of the container for targets, or only immediate children.\n         *\n         * By default, mixitup will query all descendants matching the\n         * `selectors.target` selector when indexing targets upon instantiation.\n         * This allows for targets to be nested inside a sub-container which is\n         * useful when ring-fencing targets from locally scoped controls in your\n         * markup (see `controls.scope`).\n         *\n         * However, if you are building a more complex UI requiring the nesting\n         * of mixers within mixers, you will most likely want to limit targets to\n         * immediate children of the container by setting this property to `false`.\n         *\n         * @example <caption>Example: Restricting targets to immediate children</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         allowNestedTargets: false\n         *     }\n         * });\n         *\n         * @name        allowNestedTargets\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.allowNestedTargets = true;\n\n        /**\n         * A string specifying an optional class name to apply to the container when in\n         * its default state.\n         *\n         * By changing this class name or adding a class name to the container via the\n         * `.changeLayout()` API method, the CSS layout of the container can be changed,\n         * and MixItUp will attemp to gracefully animate the container and its targets\n         * between states.\n         *\n         * @example <caption>Example 1: Specifying a container class name</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * mixer.changeLayout('list')\n         *     .then(function(state) {\n         *          console.log(state.activeContainerClass); // \"list\"\n         *     });\n         *\n         * @name        containerClassName\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.containerClassName = '';\n\n        /**\n         * A reference to a non-target sibling element after which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting a `siblingBefore` reference element</caption>\n         *\n         * var addButton = containerEl.querySelector('button');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingBefore: addButton\n         *     }\n         * });\n         *\n         * @name        siblingBefore\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingBefore = null;\n\n        /**\n         * A reference to a non-target sibling element before which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting an `siblingAfter` reference element</caption>\n         *\n         * var gap = containerEl.querySelector('.gap');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingAfter: gap\n         *     }\n         * });\n         *\n         * @name        siblingAfter\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingAfter = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLayout);\n\n    mixitup.ConfigLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLayout.prototype.constructor = mixitup.ConfigLayout;\n\n    /**\n     * A group of properties defining the initial state of the mixer on load (instantiation).\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        load\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigLoad = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string defining any filtering to be statically applied to the mixer on load.\n         * As per the `.filter()` API, this can be any valid selector string, or the\n         * values `'all'` or `'none'`.\n         *\n         * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>\n         *\n         * // The mixer will show only those targets matching '.category-a' on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: '.category-a'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Hiding all targets on load</caption>\n         *\n         * // The mixer will show hide all targets on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: 'none'\n         *     }\n         * });\n         *\n         * @name        filter\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.filter = 'all';\n\n        /**\n         * A string defining any sorting to be statically applied to the mixer on load.\n         * As per the `.sort()` API, this should be a valid \"sort string\" made up of\n         * an attribute to sort by (or `'default'`) followed by an optional sorting\n         * order, or the value `'random'`;\n         *\n         * @example <caption>Example: Defining sorting to be applied on load</caption>\n         *\n         * // The mixer will sort the container by the value of the `data-published-date`\n         * // attribute, in descending order.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         sort: 'published-date:desc'\n         *     }\n         * });\n         *\n         * @name        sort\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'default:asc'\n         */\n\n        this.sort = 'default:asc';\n\n        /**\n         * An array of objects representing the underlying data of any pre-rendered targets,\n         * when using the `.dataset()` API.\n         *\n         * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.\n         *\n         * @example <caption>Example: Defining the initial underyling dataset</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\",\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\",\n         *         ...\n         *     }\n         * ];\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     }\n         * });\n         *\n         * @name        dataset\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLoad);\n\n    mixitup.ConfigLoad.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLoad.prototype.constructor = mixitup.ConfigLoad;\n\n    /**\n     * A group of properties defining the selectors used to query elements within a mixitup container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        selectors\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigSelectors = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A selector string used to query and index target elements within the container.\n         *\n         * By default, the class selector `'.mix'` is used, but this can be changed to an\n         * attribute or element selector to match the style of your project.\n         *\n         * @example <caption>Example 1: Changing the target selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '.portfolio-item'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an attribute selector as a target selector</caption>\n         *\n         * // The mixer will search for any children with the attribute `data-ref=\"mix\"`\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '[data-ref=\"mix\"]'\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     '.mix'\n         */\n\n        this.target = '.mix';\n\n        /**\n         * A optional selector string used to add further specificity to the querying of control elements,\n         * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).\n         *\n         * This can be used if other elements in your document must contain the above attributes\n         * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding\n         * an additional `control` selector of your choice allows MixItUp to restrict event handling\n         * to only those elements matching the defined selector.\n         *\n         * @name        control\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     ''\n         *\n         * @example <caption>Example 1: Adding a `selectors.control` selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         control: '.mixitup-control'\n         *     }\n         * });\n         *\n         * // Will not be handled:\n         * // <button data-filter=\".category-a\"></button>\n         *\n         * // Will be handled:\n         * // <button class=\"mixitup-control\" data-filter=\".category-a\"></button>\n         */\n\n        this.control = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigSelectors);\n\n    mixitup.ConfigSelectors.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigSelectors.prototype.constructor = mixitup.ConfigSelectors;\n\n    /**\n     * A group of optional render functions for creating and updating elements.\n     *\n     * All render functions receive a data object, and should return a valid HTML string.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        render\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigRender = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A function returning an HTML string representing a target element, or a reference to a\n         * single DOM element.\n         *\n         * The function is invoked as part of the `.dataset()` API, whenever a new item is added\n         * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).\n         *\n         * The function receives the relevant dataset item as its first parameter.\n         *\n         * @example <caption>Example 1: Using string concatenation</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 '&lt;div class=\"mix\"&gt;' +\n         *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +\n         *                 '&lt;/div&gt;'\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an ES2015 template literal</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 `&lt;div class=\"mix\"&gt;\n         *                     &lt;h2&gt;${item.title}&lt;/h2&gt;\n         *                  &lt;/div&gt;`\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using a Handlebars template</caption>\n         *\n         * var targetTemplate = Handlebars.compile('&lt;div class=\"mix\"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: targetTemplate\n         *     }\n         * });\n         *\n         * @example <caption>Example 4: Returning a DOM element</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *              // Create a single element using your framework's built-in renderer\n         *\n         *              var el = ...\n         *\n         *              return el;\n         *         }\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.render\n         * @instance\n         * @type        {function}\n         * @default     'null'\n         */\n\n        this.target = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigRender);\n\n    mixitup.ConfigRender.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigRender.prototype.constructor = mixitup.ConfigRender;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigTemplates = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigTemplates);\n\n    mixitup.ConfigTemplates.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigTemplates.prototype.constructor = mixitup.ConfigTemplates;\n\n    /**\n     * `mixitup.Config` is an interface used for customising the functionality of a\n     * mixer instance. It is organised into several semantically distinct sub-objects,\n     * each one pertaining to a particular aspect of MixItUp functionality.\n     *\n     * An object literal containing any or all of the available properies,\n     * known as the \"configuration object\", can be passed as the second parameter to\n     * the `mixitup` factory function when creating a mixer instance to customise its\n     * functionality as needed.\n     *\n     * If no configuration object is passed, the mixer instance will take on the default\n     * configuration values detailed below.\n     *\n     * @example <caption>Example 1: Creating and passing the configuration object</caption>\n     * // Create a configuration object with desired values\n     *\n     * var config = {\n     *     animation: {\n     *         enable: false\n     *     },\n     *     selectors: {\n     *         target: '.item'\n     *     }\n     * };\n     *\n     * // Pass the configuration object to the mixitup factory function\n     *\n     * var mixer = mixitup(containerEl, config);\n     *\n     * @example <caption>Example 2: Passing the configuration object inline</caption>\n     * // Typically, the configuration object is passed inline for brevity.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         live: true,\n     *         toggleLogic: 'and'\n     *     }\n     * });\n     *\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.Config = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.animation          = new mixitup.ConfigAnimation();\n        this.behavior           = new mixitup.ConfigBehavior();\n        this.callbacks          = new mixitup.ConfigCallbacks();\n        this.controls           = new mixitup.ConfigControls();\n        this.classNames         = new mixitup.ConfigClassNames();\n        this.data               = new mixitup.ConfigData();\n        this.debug              = new mixitup.ConfigDebug();\n        this.layout             = new mixitup.ConfigLayout();\n        this.load               = new mixitup.ConfigLoad();\n        this.selectors          = new mixitup.ConfigSelectors();\n        this.render             = new mixitup.ConfigRender();\n        this.templates          = new mixitup.ConfigTemplates();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Config);\n\n    mixitup.Config.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Config.prototype.constructor = mixitup.Config;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.MixerDom = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.document               = null;\n        this.body                   = null;\n        this.container              = null;\n        this.parent                 = null;\n        this.targets                = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.MixerDom);\n\n    mixitup.MixerDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.MixerDom.prototype.constructor = mixitup.MixerDom;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UiClassNames = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.base       = '';\n        this.active     = '';\n        this.disabled   = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UiClassNames);\n\n    mixitup.UiClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UiClassNames.prototype.constructor = mixitup.UiClassNames;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.dataset()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandDataset = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandDataset);\n\n    mixitup.CommandDataset.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandDataset.prototype.constructor = mixitup.CommandDataset;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.multimix()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandMultimix = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.filter       = null;\n        this.sort         = null;\n        this.insert       = null;\n        this.remove       = null;\n        this.changeLayout = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandMultimix);\n\n    mixitup.CommandMultimix.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandMultimix.prototype.constructor = mixitup.CommandMultimix;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.filter()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandFilter = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.selector   = '';\n        this.collection = null;\n        this.action     = 'show'; // enum: ['show', 'hide']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandFilter);\n\n    mixitup.CommandFilter.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandFilter.prototype.constructor = mixitup.CommandFilter;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.sort()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandSort = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.sortString = '';\n        this.attribute  = '';\n        this.order      = 'asc';\n        this.collection = null;\n        this.next       = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandSort);\n\n    mixitup.CommandSort.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandSort.prototype.constructor = mixitup.CommandSort;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.insert()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandInsert = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.index      = 0;\n        this.collection = [];\n        this.position   = 'before'; // enum: ['before', 'after']\n        this.sibling    = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandInsert);\n\n    mixitup.CommandInsert.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandInsert.prototype.constructor = mixitup.CommandInsert;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.remove()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandRemove = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.targets    = [];\n        this.collection = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandRemove);\n\n    mixitup.CommandRemove.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandRemove.prototype.constructor = mixitup.CommandRemove;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandChangeLayout = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.containerClassName = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandChangeLayout);\n\n    mixitup.CommandChangeLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandChangeLayout.prototype.constructor = mixitup.CommandChangeLayout;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {string}        type\n     * @param       {string}        selector\n     * @param       {boolean}       [live]\n     * @param       {string}        [parent]\n     *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.\n     */\n\n    mixitup.ControlDefinition = function(type, selector, live, parent) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.type    = type;\n        this.selector  = selector;\n        this.live      = live || false;\n        this.parent    = parent || '';\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ControlDefinition);\n\n    mixitup.ControlDefinition.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ControlDefinition.prototype.constructor = mixitup.ControlDefinition;\n\n    mixitup.controlDefinitions = [];\n\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('filter', '[data-filter]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('sort', '[data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('toggle', '[data-toggle]'));\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Control = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el         = null;\n        this.selector   = '';\n        this.bound      = [];\n        this.pending    = -1;\n        this.type       = '';\n        this.status     = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']\n        this.filter     = '';\n        this.sort       = '';\n        this.canDisable = false;\n        this.handler    = null;\n        this.classNames = new mixitup.UiClassNames();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Control);\n\n    mixitup.Control.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Control.prototype,\n    /** @lends mixitup.Control */\n    {\n        constructor: mixitup.Control,\n\n        /**\n         * @private\n         * @param {HTMLElement} el\n         * @param {string}      type\n         * @param {string}      selector\n         */\n\n        init: function(el, type, selector) {\n            var self = this;\n\n            this.callActions('beforeInit', arguments);\n\n            self.el         = el;\n            self.type       = type;\n            self.selector   = selector;\n\n            if (self.selector) {\n                self.status = 'live';\n            } else {\n                self.canDisable = typeof self.el.disable === 'boolean';\n\n                switch (self.type) {\n                    case 'filter':\n                        self.filter = self.el.getAttribute('data-filter');\n\n                        break;\n                    case 'toggle':\n                        self.filter = self.el.getAttribute('data-toggle');\n\n                        break;\n                    case 'sort':\n                        self.sort   = self.el.getAttribute('data-sort');\n\n                        break;\n                    case 'multimix':\n                        self.filter = self.el.getAttribute('data-filter');\n                        self.sort   = self.el.getAttribute('data-sort');\n\n                        break;\n                }\n            }\n\n            self.bindClick();\n\n            mixitup.controls.push(self);\n\n            this.callActions('afterInit', arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {boolean}\n         */\n\n        isBound: function(mixer) {\n            var self    = this,\n                isBound = false;\n\n            this.callActions('beforeIsBound', arguments);\n\n            isBound = self.bound.indexOf(mixer) > -1;\n\n            return self.callFilters('afterIsBound', isBound, arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {void}\n         */\n\n        addBinding: function(mixer) {\n            var self = this;\n\n            this.callActions('beforeAddBinding', arguments);\n\n            if (!self.isBound()) {\n                self.bound.push(mixer);\n            }\n\n            this.callActions('afterAddBinding', arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {void}\n         */\n\n        removeBinding: function(mixer) {\n            var self        = this,\n                removeIndex = -1;\n\n            this.callActions('beforeRemoveBinding', arguments);\n\n            if ((removeIndex = self.bound.indexOf(mixer)) > -1) {\n                self.bound.splice(removeIndex, 1);\n            }\n\n            if (self.bound.length < 1) {\n                // No bindings exist, unbind event click handlers\n\n                self.unbindClick();\n\n                // Remove from `mixitup.controls` list\n\n                removeIndex = mixitup.controls.indexOf(self);\n\n                mixitup.controls.splice(removeIndex, 1);\n\n                if (self.status === 'active') {\n                    self.renderStatus(self.el, 'inactive');\n                }\n            }\n\n            this.callActions('afterRemoveBinding', arguments);\n        },\n\n        /**\n         * @private\n         * @return {void}\n         */\n\n        bindClick: function() {\n            var self = this;\n\n            this.callActions('beforeBindClick', arguments);\n\n            self.handler = function(e) {\n                self.handleClick(e);\n            };\n\n            h.on(self.el, 'click', self.handler);\n\n            this.callActions('afterBindClick', arguments);\n        },\n\n        /**\n         * @private\n         * @return {void}\n         */\n\n        unbindClick: function() {\n            var self = this;\n\n            this.callActions('beforeUnbindClick', arguments);\n\n            h.off(self.el, 'click', self.handler);\n\n            self.handler = null;\n\n            this.callActions('afterUnbindClick', arguments);\n        },\n\n        /**\n         * @private\n         * @param   {MouseEvent} e\n         * @return  {void}\n         */\n\n        handleClick: function(e) {\n            var self        = this,\n                button      = null,\n                mixer       = null,\n                isActive    = false,\n                returnValue = void(0),\n                command     = {},\n                clone       = null,\n                commands    = [],\n                i           = -1;\n\n            this.callActions('beforeHandleClick', arguments);\n\n            this.pending = 0;\n\n            mixer = self.bound[0];\n\n            if (!self.selector) {\n                button = self.el;\n            } else {\n                button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);\n            }\n\n            if (!button) {\n                self.callActions('afterHandleClick', arguments);\n\n                return;\n            }\n\n            switch (self.type) {\n                case 'filter':\n                    command.filter = self.filter || button.getAttribute('data-filter');\n\n                    break;\n                case 'sort':\n                    command.sort = self.sort || button.getAttribute('data-sort');\n\n                    break;\n                case 'multimix':\n                    command.filter  = self.filter || button.getAttribute('data-filter');\n                    command.sort    = self.sort || button.getAttribute('data-sort');\n\n                    break;\n                case 'toggle':\n                    command.filter  = self.filter || button.getAttribute('data-toggle');\n\n                    if (self.status === 'live') {\n                        isActive = h.hasClass(button, self.classNames.active);\n                    } else {\n                        isActive = self.status === 'active';\n                    }\n\n                    break;\n            }\n\n            for (i = 0; i < self.bound.length; i++) {\n                // Create a clone of the command for each bound mixer instance\n\n                clone = new mixitup.CommandMultimix();\n\n                h.extend(clone, command);\n\n                commands.push(clone);\n            }\n\n            commands = self.callFilters('commandsHandleClick', commands, arguments);\n\n            self.pending = self.bound.length;\n\n            for (i = 0; mixer = self.bound[i]; i++) {\n                command = commands[i];\n\n                if (!command) {\n                    // An extension may set a command null to indicate that the click should not be handled\n\n                    continue;\n                }\n\n                if (!mixer.lastClicked) {\n                    mixer.lastClicked = button;\n                }\n\n                mixitup.events.fire('mixClick', mixer.dom.container, {\n                    state: mixer.state,\n                    instance: mixer,\n                    originalEvent: e,\n                    control: mixer.lastClicked\n                }, mixer.dom.document);\n\n                if (typeof mixer.config.callbacks.onMixClick === 'function') {\n                    returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);\n\n                    if (returnValue === false) {\n                        // User has returned `false` from the callback, so do not handle click\n\n                        continue;\n                    }\n                }\n\n                if (self.type === 'toggle') {\n                    isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);\n                } else {\n                    mixer.multimix(command);\n                }\n            }\n\n            this.callActions('afterHandleClick', arguments);\n        },\n\n        /**\n         * @param   {object}          command\n         * @param   {Array<string>}   toggleArray\n         * @return  {void}\n         */\n\n        update: function(command, toggleArray) {\n            var self    = this,\n                actions = new mixitup.CommandMultimix();\n\n            self.callActions('beforeUpdate', arguments);\n\n            self.pending--;\n\n            self.pending = Math.max(0, self.pending);\n\n            if (self.pending > 0) return;\n\n            if (self.status === 'live') {\n                // Live control (status unknown)\n\n                self.updateLive(command, toggleArray);\n            } else {\n                // Static control\n\n                actions.sort    = self.sort;\n                actions.filter  = self.filter;\n\n                self.callFilters('actionsUpdate', actions, arguments);\n\n                self.parseStatusChange(self.el, command, actions, toggleArray);\n            }\n\n            self.callActions('afterUpdate', arguments);\n        },\n\n        /**\n         * @param   {mixitup.CommandMultimix} command\n         * @param   {Array<string>}           toggleArray\n         * @return  {void}\n         */\n\n        updateLive: function(command, toggleArray) {\n            var self            = this,\n                controlButtons  = null,\n                actions         = null,\n                button          = null,\n                i               = -1;\n\n            self.callActions('beforeUpdateLive', arguments);\n\n            if (!self.el) return;\n\n            controlButtons = self.el.querySelectorAll(self.selector);\n\n            for (i = 0; button = controlButtons[i]; i++) {\n                actions = new mixitup.CommandMultimix();\n\n                switch (self.type) {\n                    case 'filter':\n                        actions.filter = button.getAttribute('data-filter');\n\n                        break;\n                    case 'sort':\n                        actions.sort = button.getAttribute('data-sort');\n\n                        break;\n                    case 'multimix':\n                        actions.filter  = button.getAttribute('data-filter');\n                        actions.sort    = button.getAttribute('data-sort');\n\n                        break;\n                    case 'toggle':\n                        actions.filter  = button.getAttribute('data-toggle');\n\n                        break;\n                }\n\n                actions = self.callFilters('actionsUpdateLive', actions, arguments);\n\n                self.parseStatusChange(button, command, actions, toggleArray);\n            }\n\n            self.callActions('afterUpdateLive', arguments);\n        },\n\n        /**\n         * @param   {HTMLElement}             button\n         * @param   {mixitup.CommandMultimix} command\n         * @param   {mixitup.CommandMultimix} actions\n         * @param   {Array<string>}           toggleArray\n         * @return  {void}\n         */\n\n        parseStatusChange: function(button, command, actions, toggleArray) {\n            var self    = this,\n                alias   = '',\n                toggle  = '',\n                i       = -1;\n\n            self.callActions('beforeParseStatusChange', arguments);\n\n            switch (self.type) {\n                case 'filter':\n                    if (command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'multimix':\n                    if (command.sort === actions.sort && command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'sort':\n                    if (command.sort.match(/:asc/g)) {\n                        alias = command.sort.replace(/:asc/g, '');\n                    }\n\n                    if (command.sort === actions.sort || alias === actions.sort) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'toggle':\n                    if (toggleArray.length < 1) self.renderStatus(button, 'inactive');\n\n                    if (command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    }\n\n                    for (i = 0; i < toggleArray.length; i++) {\n                        toggle = toggleArray[i];\n\n                        if (toggle === actions.filter) {\n                            // Button matches one active toggle\n\n                            self.renderStatus(button, 'active');\n\n                            break;\n                        }\n\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n            }\n\n            self.callActions('afterParseStatusChange', arguments);\n        },\n\n        /**\n         * @param   {HTMLElement}   button\n         * @param   {string}        status\n         * @return  {void}\n         */\n\n        renderStatus: function(button, status) {\n            var self = this;\n\n            self.callActions('beforeRenderStatus', arguments);\n\n            switch (status) {\n                case 'active':\n                    h.addClass(button, self.classNames.active);\n                    h.removeClass(button, self.classNames.disabled);\n\n                    if (self.canDisable) self.el.disabled = false;\n\n                    break;\n                case 'inactive':\n                    h.removeClass(button, self.classNames.active);\n                    h.removeClass(button, self.classNames.disabled);\n\n                    if (self.canDisable) self.el.disabled = false;\n\n                    break;\n                case 'disabled':\n                    if (self.canDisable) self.el.disabled = true;\n\n                    h.addClass(button, self.classNames.disabled);\n                    h.removeClass(button, self.classNames.active);\n\n                    break;\n            }\n\n            if (self.status !== 'live') {\n                // Update the control's status propery if not live\n\n                self.status = status;\n            }\n\n            self.callActions('afterRenderStatus', arguments);\n        }\n    });\n\n    mixitup.controls = [];\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.StyleData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.x              = 0;\n        this.y              = 0;\n        this.top            = 0;\n        this.right          = 0;\n        this.bottom         = 0;\n        this.left           = 0;\n        this.width          = 0;\n        this.height         = 0;\n        this.marginRight    = 0;\n        this.marginBottom   = 0;\n        this.opacity        = 0;\n        this.scale          = new mixitup.TransformData();\n        this.translateX     = new mixitup.TransformData();\n        this.translateY     = new mixitup.TransformData();\n        this.translateZ     = new mixitup.TransformData();\n        this.rotateX        = new mixitup.TransformData();\n        this.rotateY        = new mixitup.TransformData();\n        this.rotateZ        = new mixitup.TransformData();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.StyleData);\n\n    mixitup.StyleData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.StyleData.prototype.constructor = mixitup.StyleData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.value  = 0;\n        this.unit   = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformData);\n\n    mixitup.TransformData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TransformData.prototype.constructor = mixitup.TransformData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformDefaults = function() {\n        mixitup.StyleData.apply(this);\n\n        this.callActions('beforeConstruct');\n\n        this.scale.value        = 0.01;\n        this.scale.unit         = '';\n\n        this.translateX.value   = 20;\n        this.translateX.unit    = 'px';\n\n        this.translateY.value   = 20;\n        this.translateY.unit    = 'px';\n\n        this.translateZ.value   = 20;\n        this.translateZ.unit    = 'px';\n\n        this.rotateX.value      = 90;\n        this.rotateX.unit       = 'deg';\n\n        this.rotateY.value      = 90;\n        this.rotateY.unit       = 'deg';\n\n        this.rotateX.value      = 90;\n        this.rotateX.unit       = 'deg';\n\n        this.rotateZ.value      = 180;\n        this.rotateZ.unit       = 'deg';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformDefaults);\n\n    mixitup.TransformDefaults.prototype = Object.create(mixitup.StyleData.prototype);\n\n    mixitup.TransformDefaults.prototype.constructor = mixitup.TransformDefaults;\n\n    /**\n     * @private\n     * @static\n     * @since   3.0.0\n     * @type    {mixitup.TransformDefaults}\n     */\n\n    mixitup.transformDefaults = new mixitup.TransformDefaults();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.EventDetail = function() {\n        this.state          = null;\n        this.futureState    = null;\n        this.instance       = null;\n        this.originalEvent  = null;\n    };\n\n    /**\n     * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each event is analogous to the callback function of the same name defined in\n     * the `callbacks` configuration object, and is triggered immediately before it.\n     *\n     * Events are always triggered from the container element on which MixItUp is instantiated\n     * upon.\n     *\n     * As with any event, registered event handlers receive the event object as a parameter\n     * which includes a `detail` property containting references to the current `state`,\n     * the `mixer` instance, and other event-specific properties described below.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Events = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A custom event triggered immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * The `mixStart` event also exposes a `futureState` property via the\n         * `event.detail` object, which represents the final state of the mixer once\n         * the requested operation has completed.\n         *\n         * @name        mixStart\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixStart = null;\n\n        /**\n         * A custom event triggered when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @name        mixBusy\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixBusy = null;\n\n        /**\n         * A custom event triggered after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @name        mixEnd\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixEnd = null;\n\n        /**\n         * A custom event triggered whenever a filter operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @name        mixFail\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixFail = null;\n\n        /**\n         * A custom event triggered whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * This event also exposes an `originalEvent` property via the `event.detail`\n         * object, which holds a reference to the original click event.\n         *\n         * @name        mixClick\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Events);\n\n    mixitup.Events.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Events.prototype.constructor = mixitup.Events;\n\n    /**\n     * @private\n     * @param   {string}      eventType\n     * @param   {Element}     el\n     * @param   {object}      detail\n     * @param   {Document}    [doc]\n     */\n\n    mixitup.Events.prototype.fire = function(eventType, el, detail, doc) {\n        var self        = this,\n            event       = null,\n            eventDetail = new mixitup.EventDetail();\n\n        self.callActions('beforeFire', arguments);\n\n        if (typeof self[eventType] === 'undefined') {\n            throw new Error('Event type \"' + eventType + '\" not found.');\n        }\n\n        eventDetail.state = new mixitup.State();\n\n        h.extend(eventDetail.state, detail.state);\n\n        if (detail.futureState) {\n            eventDetail.futureState = new mixitup.State();\n\n            h.extend(eventDetail.futureState, detail.futureState);\n        }\n\n        eventDetail.instance = detail.instance;\n\n        if (detail.originalEvent) {\n            eventDetail.originalEvent = detail.originalEvent;\n        }\n\n        event = h.getCustomEvent(eventType, eventDetail, doc);\n\n        self.callFilters('eventFire', event, arguments);\n\n        el.dispatchEvent(event);\n    };\n\n    // Asign a singleton instance to `mixitup.events`:\n\n    mixitup.events = new mixitup.Events();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.QueueItem = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.args           = [];\n        this.instruction    = null;\n        this.triggerElement = null;\n        this.deferred       = null;\n        this.isToggling     = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.QueueItem);\n\n    mixitup.QueueItem.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.QueueItem.prototype.constructor = mixitup.QueueItem;\n\n    /**\n     * The `mixitup.Mixer` class is used to hold discreet, user-configured\n     * instances of MixItUp on a provided container element.\n     *\n     * Mixer instances are returned whenever the `mixitup()` factory function is called,\n     * which expose a range of methods enabling API-based filtering, sorting,\n     * insertion, removal and more.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Mixer = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.config            = new mixitup.Config();\n\n        this.id                = '';\n\n        this.isBusy            = false;\n        this.isToggling        = false;\n        this.incPadding        = true;\n\n        this.controls          = [];\n        this.targets           = [];\n        this.origOrder         = [];\n        this.cache             = {};\n\n        this.toggleArray       = [];\n\n        this.targetsMoved      = 0;\n        this.targetsImmovable  = 0;\n        this.targetsBound      = 0;\n        this.targetsDone       = 0;\n\n        this.staggerDuration   = 0;\n        this.effectsIn         = null;\n        this.effectsOut        = null;\n        this.transformIn       = [];\n        this.transformOut      = [];\n        this.queue             = [];\n\n        this.state             = null;\n        this.lastOperation     = null;\n        this.lastClicked       = null;\n        this.userCallback      = null;\n        this.userDeferred      = null;\n\n        this.dom               = new mixitup.MixerDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Mixer);\n\n    mixitup.Mixer.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Mixer.prototype,\n    /** @lends mixitup.Mixer */\n    {\n        constructor: mixitup.Mixer,\n\n        /**\n         * @private\n         * @instance\n         * @since 3.0.0\n         * @param {HTMLElement} container\n         * @param {HTMLElement} document\n         * @param {string}      id\n         * @param {object}      [config]\n         */\n\n        attach: function(container, document, id, config) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeAttach', arguments);\n\n            self.id = id;\n\n            if (config) {\n                h.extend(self.config, config, true, true);\n            }\n\n            self.sanitizeConfig();\n\n            self.cacheDom(container, document);\n\n            if (self.config.layout.containerClassName) {\n                h.addClass(self.dom.container, self.config.layout.containerClassName);\n            }\n\n            if (!mixitup.features.has.transitions) {\n                self.config.animation.enable = false;\n            }\n\n            if (typeof window.console === 'undefined') {\n                self.config.debug.showWarnings = false;\n            }\n\n            if (self.config.data.uidKey) {\n                // If the dataset API is in use, force disable controls\n\n                self.config.controls.enable = false;\n            }\n\n            self.indexTargets();\n\n            self.state = self.getInitialState();\n\n            for (i = 0; target = self.lastOperation.toHide[i]; i++) {\n                target.hide();\n            }\n\n            if (self.config.controls.enable) {\n                self.initControls();\n\n                self.buildToggleArray(null, self.state);\n\n                self.updateControls({\n                    filter: self.state.activeFilter,\n                    sort: self.state.activeSort\n                });\n            }\n\n            self.parseEffects();\n\n            self.callActions('afterAttach', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since 3.0.0\n         * @return {void}\n         */\n\n        sanitizeConfig: function() {\n            var self = this;\n\n            self.callActions('beforeSanitizeConfig', arguments);\n\n            // Sanitize enum/string config options\n\n            self.config.controls.scope          = self.config.controls.scope.toLowerCase().trim();\n            self.config.controls.toggleLogic    = self.config.controls.toggleLogic.toLowerCase().trim();\n            self.config.controls.toggleDefault  = self.config.controls.toggleDefault.toLowerCase().trim();\n\n            self.config.animation.effects       = self.config.animation.effects.trim();\n\n            self.callActions('afterSanitizeConfig', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {mixitup.State}\n         */\n\n        getInitialState: function() {\n            var self        = this,\n                state       = new mixitup.State(),\n                operation   = new mixitup.Operation();\n\n            self.callActions('beforeGetInitialState', arguments);\n\n            // Map initial values into a mock state object in order to construct an operation\n\n            state.activeContainerClassName = self.config.layout.containerClassName;\n\n            if (self.config.load.dataset) {\n                // Dataset API\n\n                if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {\n                    throw new TypeError(mixitup.messages.errorConfigDataUidKeyNotSet());\n                }\n\n                operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();\n                operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n                operation.show = self.targets.slice();\n\n                state = self.callFilters('stateGetInitialState', state, arguments);\n            } else {\n                // DOM API\n\n                state.activeFilter              = self.parseFilterArgs([self.config.load.filter]).command;\n                state.activeSort                = self.parseSortArgs([self.config.load.sort]).command;\n                state.totalTargets              = self.targets.length;\n\n                state = self.callFilters('stateGetInitialState', state, arguments);\n\n                if (\n                    state.activeSort.collection || state.activeSort.attribute ||\n                    state.activeSort.order === 'random' || state.activeSort.order === 'desc'\n                ) {\n                    // Sorting on load\n\n                    operation.newSort = state.activeSort;\n\n                    self.sortOperation(operation);\n\n                    self.printSort(false, operation);\n\n                    self.targets = operation.newOrder;\n                } else {\n                    operation.startOrder = operation.newOrder = self.targets;\n                }\n\n                operation.startFilter               = operation.newFilter               = state.activeFilter;\n                operation.startSort                 = operation.newSort                 = state.activeSort;\n                operation.startContainerClassName   = operation.newContainerClassName   = state.activeContainerClassName;\n\n                if (operation.newFilter.selector === 'all') {\n                    operation.newFilter.selector = self.config.selectors.target;\n                } else if (operation.newFilter.selector === 'none') {\n                    operation.newFilter.selector = '';\n                }\n            }\n\n            operation = self.callFilters('operationGetInitialState', operation, [state]);\n\n            self.lastOperation = operation;\n\n            if (operation.newFilter) {\n                self.filterOperation(operation);\n            }\n\n            state = self.buildState(operation);\n\n            return state;\n        },\n\n        /**\n         * Caches references of DOM elements neccessary for the mixer's functionality.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {HTMLElement}       el\n         * @param   {HTMLHtmlElement}   document\n         * @return  {void}\n         */\n\n        cacheDom: function(el, document) {\n            var self    = this;\n\n            self.callActions('beforeCacheDom', arguments);\n\n            self.dom.document  = document;\n            self.dom.body      = self.dom.document.querySelector('body');\n            self.dom.container = el;\n            self.dom.parent    = el;\n\n            self.callActions('afterCacheDom', arguments);\n        },\n\n        /**\n         * Indexes all child elements of the mixer matching the `selectors.target`\n         * selector, instantiating a mixitup.Target for each one.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        indexTargets: function() {\n            var self            = this,\n                target          = null,\n                el              = null,\n                dataset         = null,\n                i               = -1;\n\n            self.callActions('beforeIndexTargets', arguments);\n\n            self.dom.targets = self.config.layout.allowNestedTargets ?\n                self.dom.container.querySelectorAll(self.config.selectors.target) :\n                h.children(self.dom.container, self.config.selectors.target, self.dom.document);\n\n            self.dom.targets = h.arrayFromList(self.dom.targets);\n\n            self.targets = [];\n\n            if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {\n                throw new Error(mixitup.messages.errorDatasetPrerenderedMismatch());\n            }\n\n            if (self.dom.targets.length) {\n                for (i = 0; el = self.dom.targets[i]; i++) {\n                    target = new mixitup.Target();\n\n                    target.init(el, self, dataset ? dataset[i] : void(0));\n\n                    target.isInDom = true;\n\n                    self.targets.push(target);\n                }\n\n                self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ?\n                    self.dom.container :\n                    self.dom.targets[0].parentElement;\n            }\n\n            self.origOrder = self.targets;\n\n            self.callActions('afterIndexTargets', arguments);\n        },\n\n        initControls: function() {\n            var self                = this,\n                definition          = '',\n                controlElements     = null,\n                el                  = null,\n                parent              = null,\n                delagators          = null,\n                control             = null,\n                i                   = -1,\n                j                   = -1;\n\n            self.callActions('beforeInitControls', arguments);\n\n            switch (self.config.controls.scope) {\n                case 'local':\n                    parent = self.dom.container;\n\n                    break;\n                case 'global':\n                    parent = self.dom.document;\n\n                    break;\n                default:\n                    throw new Error(mixitup.messages.errorConfigInvalidControlsScope());\n            }\n\n            for (i = 0; definition = mixitup.controlDefinitions[i]; i++) {\n                if (self.config.controls.live || definition.live) {\n                    if (definition.parent) {\n                        delagators = self.dom[definition.parent];\n\n                        if (!delagators || delagators.length < 0) continue;\n\n                        if (typeof delagators.length !== 'number') {\n                            delagators = [delagators];\n                        }\n                    } else {\n                        delagators = [parent];\n                    }\n\n                    for (j = 0; (el = delagators[j]); j++) {\n                        control = self.getControl(el,  definition.type, definition.selector);\n\n                        self.controls.push(control);\n                    }\n                } else {\n                    controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);\n\n                    for (j = 0; (el = controlElements[j]); j++) {\n                        control = self.getControl(el, definition.type, '');\n\n                        if (!control) continue;\n\n                        self.controls.push(control);\n                    }\n                }\n            }\n\n            self.callActions('afterInitControls', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {HTMLElement} el\n         * @param   {string}      type\n         * @param   {string}      selector\n         * @return  {mixitup.Control|null}\n         */\n\n        getControl: function(el, type, selector) {\n            var self    = this,\n                control = null,\n                i       = -1;\n\n            self.callActions('beforeGetControl', arguments);\n\n            if (!selector) {\n                // Static controls only\n\n                for (i = 0; control = mixitup.controls[i]; i++) {\n                    if (control.el === el && control.isBound(self)) {\n                        // Control already bound to this mixer (as another type).\n\n                        // NB: This prevents duplicate controls from being registered where a selector\n                        // might collide, eg: \"[data-filter]\" and \"[data-filter][data-sort]\"\n\n                        return self.callFilters('controlGetControl', null, arguments);\n                    } else if (control.el === el && control.type === type && control.selector === selector) {\n                        // Another mixer is already using this control, add this mixer as a binding\n\n                        control.addBinding(self);\n\n                        return self.callFilters('controlGetControl', control, arguments);\n                    }\n                }\n            }\n\n            // Create new control\n\n            control = new mixitup.Control();\n\n            control.init(el, type, selector);\n\n            control.classNames.base     = h.getClassname(self.config.classNames, type);\n            control.classNames.active   = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);\n            control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled);\n\n            // Add a reference to this mixer as a binding\n\n            control.addBinding(self);\n\n            return self.callFilters('controlGetControl', control, arguments);\n        },\n\n        /**\n         * Creates a compound selector by joining the `toggleArray` value as per the\n         * defined toggle logic.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {string}\n         */\n\n        getToggleSelector: function() {\n            var self            = this,\n                delineator      = self.config.controls.toggleLogic === 'or' ? ', ' : '',\n                toggleSelector  = '';\n\n            self.callActions('beforeGetToggleSelector', arguments);\n\n            self.toggleArray = h.clean(self.toggleArray);\n\n            toggleSelector = self.toggleArray.join(delineator);\n\n            if (toggleSelector === '') {\n                toggleSelector = self.config.controls.toggleDefault;\n            }\n\n            return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);\n        },\n\n        /**\n         * Breaks compound selector strings in an array of discreet selectors,\n         * as per the active `controls.toggleLogic` configuration option. Accepts\n         * either a dynamic command object, or a state object.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {object}        [command]\n         * @param   {mixitup.State} [state]\n         * @return  {void}\n         */\n\n        buildToggleArray: function(command, state) {\n            var self                    = this,\n                activeFilterSelector    = '';\n\n            self.callActions('beforeBuildToggleArray', arguments);\n\n            if (command && command.filter) {\n                activeFilterSelector = command.filter.selector.replace(/\\s/g, '');\n            } else if (state) {\n                activeFilterSelector = state.activeFilter.selector.replace(/\\s/g, '');\n            } else {\n                return;\n            }\n\n            if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {\n                activeFilterSelector = '';\n            }\n\n            if (self.config.controls.toggleLogic === 'or') {\n                self.toggleArray = activeFilterSelector.split(',');\n            } else {\n                self.toggleArray = self.splitCompoundSelector(activeFilterSelector);\n            }\n\n            self.toggleArray = h.clean(self.toggleArray);\n\n            self.callActions('afterBuildToggleArray', arguments);\n        },\n\n        /**\n         * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat=\"1\"][data-cat=\"2\"]`)\n         * and breaks into its individual selectors.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string} compoundSelector\n         * @return  {string[]}\n         */\n\n        splitCompoundSelector: function(compoundSelector) {\n            // Break at a `.` or `[`, capturing the delineator\n\n            var partials    = compoundSelector.split(/([\\.\\[])/g),\n                toggleArray = [],\n                selector    = '',\n                i           = -1;\n\n            if (partials[0] === '') {\n                partials.shift();\n            }\n\n            for (i = 0; i < partials.length; i++) {\n                if (i % 2 === 0) {\n                    selector = '';\n                }\n\n                selector += partials[i];\n\n                if (i % 2 !== 0) {\n                    toggleArray.push(selector);\n                }\n            }\n\n            return toggleArray;\n        },\n\n        /**\n         * Updates controls to their active/inactive state based on the command or\n         * current state of the mixer.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {object} command\n         * @return  {void}\n         */\n\n        updateControls: function(command) {\n            var self    = this,\n                control = null,\n                output  = new mixitup.CommandMultimix(),\n                i       = -1;\n\n            self.callActions('beforeUpdateControls', arguments);\n\n            // Sanitise to defaults\n\n            if (command.filter) {\n                output.filter = command.filter.selector;\n            } else {\n                output.filter = self.state.activeFilter.selector;\n            }\n\n            if (command.sort) {\n                output.sort = self.buildSortString(command.sort);\n            } else {\n                output.sort = self.buildSortString(self.state.activeSort);\n            }\n\n            if (output.filter === self.config.selectors.target) {\n                output.filter = 'all';\n            }\n\n            if (output.filter === '') {\n                output.filter = 'none';\n            }\n\n            h.freeze(output);\n\n            for (i = 0; control = self.controls[i]; i++) {\n                control.update(output, self.toggleArray);\n            }\n\n            self.callActions('afterUpdateControls', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.CommandSort}   command\n         * @return  {string}\n         */\n\n        buildSortString: function(command) {\n            var self    = this;\n            var output  = '';\n\n            output += command.sortString;\n\n            if (command.next) {\n                output += ' ' + self.buildSortString(command.next);\n            }\n\n            return output;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}        command\n         * @param   {Operation}     operation\n         * @return  {Promise.<mixitup.State>}\n         */\n\n        insertTargets: function(command, operation) {\n            var self            = this,\n                nextSibling     = null,\n                insertionIndex  = -1,\n                frag            = null,\n                target          = null,\n                el              = null,\n                i               = -1;\n\n            self.callActions('beforeInsertTargets', arguments);\n\n            if (typeof command.index === 'undefined') command.index = 0;\n\n            nextSibling = self.getNextSibling(command.index, command.sibling, command.position);\n            frag        = self.dom.document.createDocumentFragment();\n\n            if (nextSibling) {\n                insertionIndex = h.index(nextSibling, self.config.selectors.target);\n            } else {\n                insertionIndex = self.targets.length;\n            }\n\n            if (command.collection) {\n                for (i = 0; el = command.collection[i]; i++) {\n                    if (self.dom.targets.indexOf(el) > -1) {\n                        throw new Error(mixitup.messages.errorInsertPreexistingElement());\n                    }\n\n                    // Ensure elements are hidden when they are added to the DOM, so they can\n                    // be animated in gracefully\n\n                    el.style.display = 'none';\n\n                    frag.appendChild(el);\n                    frag.appendChild(self.dom.document.createTextNode(' '));\n\n                    if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;\n\n                    target = new mixitup.Target();\n\n                    target.init(el, self);\n\n                    target.isInDom = true;\n\n                    self.targets.splice(insertionIndex, 0, target);\n\n                    insertionIndex++;\n                }\n\n                self.dom.parent.insertBefore(frag, nextSibling);\n            }\n\n            // Since targets have been added, the original order must be updated\n\n            operation.startOrder = self.origOrder = self.targets;\n\n            self.callActions('afterInsertTargets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Number}      [index]\n         * @param   {Element}     [sibling]\n         * @param   {string}      [position]\n         * @return  {Element}\n         */\n\n        getNextSibling: function(index, sibling, position) {\n            var self    = this,\n                element = null;\n\n            index = Math.max(index, 0);\n\n            if (sibling && position === 'before') {\n                // Explicit sibling\n\n                element = sibling;\n            } else if (sibling && position === 'after') {\n                // Explicit sibling\n\n                element = sibling.nextElementSibling || null;\n            } else if (self.targets.length > 0 && typeof index !== 'undefined') {\n                // Index and targets exist\n\n                element = (index < self.targets.length || !self.targets.length) ?\n                    self.targets[index].dom.el :\n                    self.targets[self.targets.length - 1].dom.el.nextElementSibling;\n            } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {\n                // No targets but other siblings\n\n                if (self.config.layout.siblingAfter) {\n                    element = self.config.layout.siblingAfter;\n                } else if (self.config.layout.siblingBefore) {\n                    element = self.config.layout.siblingBefore.nextElementSibling;\n                } else {\n                    self.dom.parent.children[0];\n                }\n            } else {\n                element === null;\n            }\n\n            return self.callFilters('elementGetNextSibling', element, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        filterOperation: function(operation) {\n            var self        = this,\n                testResult  = false,\n                index       = -1,\n                action      = '',\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeFilterOperation', arguments);\n\n            action = operation.newFilter.action;\n\n            for (i = 0; target = operation.newOrder[i]; i++) {\n                if (operation.newFilter.collection) {\n                    // show via collection\n\n                    testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;\n                } else {\n                    // show via selector\n\n                    if (operation.newFilter.selector === '') {\n                        testResult = false;\n                    } else {\n                        testResult = target.dom.el.matches(operation.newFilter.selector);\n                    }\n                }\n\n                self.evaluateHideShow(testResult, target, action, operation);\n            }\n\n            if (operation.toRemove.length) {\n                for (i = 0; target = operation.show[i]; i++) {\n                    if (operation.toRemove.indexOf(target) > -1) {\n                        // If any shown targets should be removed, move them into the toHide array\n\n                        operation.show.splice(i, 1);\n\n                        if ((index = operation.toShow.indexOf(target)) > -1) {\n                            operation.toShow.splice(index, 1);\n                        }\n\n                        operation.toHide.push(target);\n                        operation.hide.push(target);\n\n                        i--;\n                    }\n                }\n            }\n\n            operation.matching = operation.show.slice();\n\n            if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {\n                operation.hasFailed = true;\n            }\n\n            self.callActions('afterFilterOperation', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {boolean}   testResult\n         * @param   {Element}   target\n         * @param   {string}    action\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        evaluateHideShow: function(testResult, target, action, operation) {\n            var self = this,\n                filteredTestResult = false,\n                args = Array.prototype.slice.call(arguments, 1);\n\n            filteredTestResult = self.callFilters('testResultEvaluateHideShow', testResult, args);\n\n            self.callActions('beforeEvaluateHideShow', arguments);\n\n            if (\n                filteredTestResult === true && action === 'show' ||\n                filteredTestResult === false && action === 'hide'\n            ) {\n                operation.show.push(target);\n\n                !target.isShown && operation.toShow.push(target);\n            } else {\n                operation.hide.push(target);\n\n                target.isShown && operation.toHide.push(target);\n            }\n\n            self.callActions('afterEvaluateHideShow', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        sortOperation: function(operation) {\n            var self     = this,\n                newOrder = [],\n                target   = null,\n                el       = null,\n                i        = -1;\n\n            self.callActions('beforeSortOperation', arguments);\n\n            operation.startOrder = self.targets;\n\n            if (operation.newSort.collection) {\n                // Sort by collection\n\n                newOrder = [];\n\n                for (i = 0; (el = operation.newSort.collection[i]); i++) {\n                    if (self.dom.targets.indexOf(el) < 0) {\n                        throw new Error(mixitup.messages.errorSortNonExistentElement());\n                    }\n\n                    target = new mixitup.Target();\n\n                    target.init(el, self);\n\n                    target.isInDom = true;\n\n                    newOrder.push(target);\n                }\n\n                operation.newOrder = newOrder;\n            } else if (operation.newSort.order === 'random') {\n                // Sort random\n\n                operation.newOrder = h.arrayShuffle(operation.startOrder);\n            } else if (operation.newSort.attribute === '') {\n                // Sort by default\n\n                operation.newOrder = self.origOrder.slice();\n\n                if (operation.newSort.order === 'desc') {\n                    operation.newOrder.reverse();\n                }\n            } else {\n                // Sort by attribute\n\n                operation.newOrder = operation.startOrder.slice();\n\n                operation.newOrder.sort(function(a, b) {\n                    return self.compare(a, b, operation.newSort);\n                });\n            }\n\n            if (h.isEqualArray(operation.newOrder, operation.startOrder)) {\n                operation.willSort = false;\n            }\n\n            self.callActions('afterSortOperation', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {mixitup.Target}        a\n         * @param   {mixitup.Target}        b\n         * @param   {mixitup.CommandSort}   command\n         * @return  {Number}\n         */\n\n        compare: function(a, b, command) {\n            var self        = this,\n                order       = command.order,\n                attrA       = self.getAttributeValue(a, command.attribute),\n                attrB       = self.getAttributeValue(b, command.attribute);\n\n            if (isNaN(attrA * 1) || isNaN(attrB * 1)) {\n                attrA = attrA.toLowerCase();\n                attrB = attrB.toLowerCase();\n            } else {\n                attrA = attrA * 1;\n                attrB = attrB * 1;\n            }\n\n            if (attrA < attrB) {\n                return order === 'asc' ? -1 : 1;\n            }\n\n            if (attrA > attrB) {\n                return order === 'asc' ? 1 : -1;\n            }\n\n            if (attrA === attrB && command.next) {\n                return self.compare(a, b, command.next);\n            }\n\n            return 0;\n        },\n\n        /**\n         * Reads the values of any data attributes present the provided target element\n         * which match the current sort command.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Target}    target\n         * @param   {string}            [attribute]\n         * @return  {(String|Number)}\n         */\n\n        getAttributeValue: function(target, attribute) {\n            var self    = this,\n                value   = '';\n\n            value = target.dom.el.getAttribute('data-' + attribute);\n\n            if (value === null) {\n                if (self.config.debug.showWarnings) {\n                    // Encourage users to assign values to all targets to avoid erroneous sorting\n                    // when types are mixed\n\n                    console.warn(mixitup.messages.warningInconsistentSortingAttributes({\n                        attribute: 'data-' + attribute\n                    }));\n                }\n            }\n\n            // If an attribute is not present, return 0 as a safety value\n\n            return self.callFilters('valueGetAttributeValue', value || 0, arguments);\n        },\n\n        /**\n         * Inserts elements into the DOM in the appropriate\n         * order using a document fragment for minimal\n         * DOM thrashing\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   isResetting\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        printSort: function(isResetting, operation) {\n            var self        = this,\n                startOrder  = isResetting ? operation.newOrder : operation.startOrder,\n                newOrder    = isResetting ? operation.startOrder : operation.newOrder,\n                nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,\n                frag        = window.document.createDocumentFragment(),\n                whitespace  = null,\n                target      = null,\n                el          = null,\n                i           = -1;\n\n            self.callActions('beforePrintSort', arguments);\n\n            // Empty the container\n\n            for (i = 0; target = startOrder[i]; i++) {\n                el = target.dom.el;\n\n                if (el.style.position === 'absolute') continue;\n\n                h.removeWhitespace(el.previousSibling);\n\n                el.parentElement.removeChild(el);\n            }\n\n            whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;\n\n            if (whitespace && whitespace.nodeName === '#text') {\n                h.removeWhitespace(whitespace);\n            }\n\n            for (i = 0; target = newOrder[i]; i++) {\n                // Add targets into a document fragment\n\n                el = target.dom.el;\n\n                if (h.isElement(frag.lastChild)) {\n                    frag.appendChild(window.document.createTextNode(' '));\n                }\n\n                frag.appendChild(el);\n            }\n\n            // Insert the document fragment into the container\n            // before any other non-target elements\n\n            if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {\n                frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);\n            }\n\n            if (nextSibling) {\n                frag.appendChild(window.document.createTextNode(' '));\n\n                self.dom.parent.insertBefore(frag, nextSibling);\n            } else {\n                self.dom.parent.appendChild(frag);\n            }\n\n            self.callActions('afterPrintSort', arguments);\n        },\n\n        /**\n         * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}                sortString\n         * @param   {mixitup.CommandSort}   command\n         * @return  {mixitup.CommandSort}\n         */\n\n        parseSortString: function(sortString, command) {\n            var self        = this,\n                rules       = sortString.split(' '),\n                current     = command,\n                rule        = [],\n                i           = -1;\n\n            // command.sortString = sortString;\n\n            for (i = 0; i < rules.length; i++) {\n                rule = rules[i].split(':');\n\n                current.sortString  = rules[i];\n                current.attribute   = h.dashCase(rule[0]);\n                current.order       = rule[1] || 'asc';\n\n                switch (current.attribute) {\n                    case 'default':\n                        // treat \"default\" as sorting by no attribute\n\n                        current.attribute = '';\n\n                        break;\n                    case 'random':\n                        // treat \"random\" as an order not an attribute\n\n                        current.attribute   = '';\n                        current.order       = 'random';\n\n                        break;\n                }\n\n                if (!current.attribute || current.order === 'random') break;\n\n                if (i < rules.length - 1) {\n                    // Embed reference to the next command\n\n                    current.next = new mixitup.CommandSort();\n\n                    h.freeze(current);\n\n                    current = current.next;\n                }\n            }\n\n            return self.callFilters('commandsParseSort', command, arguments);\n        },\n\n        /**\n         * Parses all effects out of the user-defined `animation.effects` string into\n         * their respective properties and units.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @return  {void}\n         */\n\n        parseEffects: function() {\n            var self            = this,\n                transformName   = '',\n                effectsIn       = self.config.animation.effectsIn || self.config.animation.effects,\n                effectsOut      = self.config.animation.effectsOut || self.config.animation.effects;\n\n            self.callActions('beforeParseEffects', arguments);\n\n            self.effectsIn      = new mixitup.StyleData();\n            self.effectsOut     = new mixitup.StyleData();\n            self.transformIn    = [];\n            self.transformOut   = [];\n\n            self.effectsIn.opacity = self.effectsOut.opacity = 1;\n\n            self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);\n            self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);\n\n            for (transformName in mixitup.transformDefaults) {\n                if (!(mixitup.transformDefaults[transformName] instanceof mixitup.TransformData)) {\n                    continue;\n                }\n\n                self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);\n                self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);\n            }\n\n            self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);\n            self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);\n\n            self.callActions('afterParseEffects', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {string}    effectName\n         * @param   {string}    effectString\n         * @param   {StyleData} effects\n         * @param   {String[]}  transform\n         * @param   {boolean}   [isOut]\n         */\n\n        parseEffect: function(effectName, effectString, effects, transform, isOut) {\n            var self        = this,\n                re          = /\\(([^)]+)\\)/,\n                propIndex   = -1,\n                str         = '',\n                match       = [],\n                val         = '',\n                units       = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],\n                unit        = '',\n                i           = -1;\n\n            self.callActions('beforeParseEffect', arguments);\n\n            if (typeof effectString !== 'string') {\n                throw new TypeError(mixitup.messages.errorConfigInvalidAnimationEffects());\n            }\n\n            if (effectString.indexOf(effectName) < 0) {\n                // The effect is not present in the effects string\n\n                if (effectName === 'stagger') {\n                    // Reset stagger to 0\n\n                    self.staggerDuration = 0;\n                }\n\n                return;\n            }\n\n            // The effect is present\n\n            propIndex = effectString.indexOf(effectName + '(');\n\n            if (propIndex > -1) {\n                // The effect has a user defined value in parentheses\n\n                // Extract from the first parenthesis to the end of string\n\n                str = effectString.substring(propIndex);\n\n                // Match any number of characters between \"(\" and \")\"\n\n                match = re.exec(str);\n\n                val = match[1];\n            }\n\n            switch (effectName) {\n                case 'fade':\n                    effects.opacity = val ? parseFloat(val) : 0;\n\n                    break;\n                case 'stagger':\n                    self.staggerDuration = val ? parseFloat(val) : 100;\n\n                    // TODO: Currently stagger must be applied globally, but\n                    // if seperate values are specified for in/out, this should\n                    // be respected\n\n                    break;\n                default:\n                    // All other effects are transforms following the same structure\n\n                    if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {\n                        effects[effectName].value =\n                            (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value) * -1;\n                    } else {\n                        effects[effectName].value =\n                            (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value);\n                    }\n\n                    if (val) {\n                        for (i = 0; unit = units[i]; i++) {\n                            if (val.indexOf(unit) > -1) {\n                                effects[effectName].unit = unit;\n\n                                break;\n                            }\n                        }\n                    } else {\n                        effects[effectName].unit = mixitup.transformDefaults[effectName].unit;\n                    }\n\n                    transform.push(\n                        effectName +\n                        '(' +\n                        effects[effectName].value +\n                        effects[effectName].unit +\n                        ')'\n                    );\n            }\n\n            self.callActions('afterParseEffect', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {State}\n         */\n\n        buildState: function(operation) {\n            var self        = this,\n                state       = new mixitup.State(),\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeBuildState', arguments);\n\n            // Map target elements into state arrays.\n            // the real target objects should never be exposed\n\n            for (i = 0; target = self.targets[i]; i++) {\n                if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                    state.targets.push(target.dom.el);\n                }\n            }\n\n            for (i = 0; target = operation.matching[i]; i++) {\n                state.matching.push(target.dom.el);\n            }\n\n            for (i = 0; target = operation.show[i]; i++) {\n                state.show.push(target.dom.el);\n            }\n\n            for (i = 0; target = operation.hide[i]; i++) {\n                if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                    state.hide.push(target.dom.el);\n                }\n            }\n\n            state.id                        = self.id;\n            state.container                 = self.dom.container;\n            state.activeFilter              = operation.newFilter;\n            state.activeSort                = operation.newSort;\n            state.activeDataset             = operation.newDataset;\n            state.activeContainerClassName  = operation.newContainerClassName;\n            state.hasFailed                 = operation.hasFailed;\n            state.totalTargets              = self.targets.length;\n            state.totalShow                 = operation.show.length;\n            state.totalHide                 = operation.hide.length;\n            state.totalMatching             = operation.matching.length;\n            state.triggerElement            = operation.triggerElement;\n\n            return self.callFilters('stateBuildState', state, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   shouldAnimate\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        goMix: function(shouldAnimate, operation) {\n            var self        = this,\n                deferred    = null;\n\n            self.callActions('beforeGoMix', arguments);\n\n            // If the animation duration is set to 0ms,\n            // or no effects specified,\n            // or the container is hidden\n            // then abort animation\n\n            if (\n                !self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)\n            ) {\n                shouldAnimate = false;\n            }\n\n            if (\n                !operation.toShow.length &&\n                !operation.toHide.length &&\n                !operation.willSort &&\n                !operation.willChangeLayout\n            ) {\n                // If nothing to show or hide, and not sorting or\n                // changing layout\n\n                shouldAnimate = false;\n            }\n\n            if (\n                !operation.startState.show.length &&\n                !operation.show.length\n            ) {\n                // If nothing currently shown, nothing to show\n\n                shouldAnimate = false;\n            }\n\n            mixitup.events.fire('mixStart', self.dom.container, {\n                state: operation.startState,\n                futureState: operation.newState,\n                instance: self\n            }, self.dom.document);\n\n            if (typeof self.config.callbacks.onMixStart === 'function') {\n                self.config.callbacks.onMixStart.call(\n                    self.dom.container,\n                    operation.startState,\n                    operation.newState,\n                    self\n                );\n            }\n\n            h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n\n            if (!self.userDeferred) {\n                // Queue empty, no pending operations\n\n                deferred = self.userDeferred = h.defer(mixitup.libraries);\n            } else {\n                // Use existing deferred\n\n                deferred = self.userDeferred;\n            }\n\n            self.isBusy = true;\n\n            if (!shouldAnimate || !mixitup.features.has.transitions) {\n                // Abort\n\n                if (self.config.debug.fauxAsync) {\n                    setTimeout(function() {\n                        self.cleanUp(operation);\n                    }, self.config.animation.duration);\n                } else {\n                    self.cleanUp(operation);\n                }\n\n                return self.callFilters('promiseGoMix', deferred.promise, arguments);\n            }\n\n            // If we should animate and the platform supports transitions, go for it\n\n            if (window.pageYOffset !== operation.docState.scrollTop) {\n                window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);\n            }\n\n            if (self.config.animation.applyPerspective) {\n                self.dom.parent.style[mixitup.features.perspectiveProp] =\n                    self.config.animation.perspectiveDistance;\n\n                self.dom.parent.style[mixitup.features.perspectiveOriginProp] =\n                    self.config.animation.perspectiveOrigin;\n            }\n\n            if (\n                self.config.animation.animateResizeContainer &&\n                operation.startHeight !== operation.newHeight &&\n                operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n            ) {\n                self.dom.parent.style.height = operation.startHeight + 'px';\n            }\n\n            if (\n                self.config.animation.animateResizeContainer &&\n                operation.startWidth !== operation.newWidth &&\n                operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n            ) {\n                self.dom.parent.style.width = operation.startWidth + 'px';\n            }\n\n            if (operation.startHeight === operation.newHeight) {\n                self.dom.parent.style.height = operation.startHeight + 'px';\n            }\n\n            if (operation.startWidth === operation.newWidth) {\n                self.dom.parent.style.width = operation.startWidth + 'px';\n            }\n\n            if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {\n                self.dom.parent.style.overflow = 'hidden';\n            }\n\n            requestAnimationFrame(function() {\n                self.moveTargets(operation);\n            });\n\n            return self.callFilters('promiseGoMix', deferred.promise, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getStartMixData: function(operation) {\n            var self        = this,\n                parentStyle = window.getComputedStyle(self.dom.parent),\n                parentRect  = self.dom.parent.getBoundingClientRect(),\n                target      = null,\n                data        = {},\n                i           = -1,\n                boxSizing   = parentStyle[mixitup.features.boxSizingProp];\n\n            self.incPadding = (boxSizing === 'border-box');\n\n            self.callActions('beforeGetStartMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                data = target.getPosData();\n\n                operation.showPosData[i] = {\n                    startPosData: data\n                };\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                data = target.getPosData();\n\n                operation.toHidePosData[i] = {\n                    startPosData: data\n                };\n            }\n\n            operation.startX = parentRect.left;\n            operation.startY = parentRect.top;\n\n            operation.startHeight = self.incPadding ?\n                parentRect.height :\n                parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n            operation.startWidth = self.incPadding ?\n                parentRect.width :\n                parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n            self.callActions('afterGetStartMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        setInter: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeSetInter', arguments);\n\n            // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width\n\n            if (self.config.animation.clampHeight) {\n                self.dom.parent.style.height    = operation.startHeight + 'px';\n                self.dom.parent.style.overflow  = 'hidden';\n            }\n\n            if (self.config.animation.clampWidth) {\n                self.dom.parent.style.width     = operation.startWidth + 'px';\n                self.dom.parent.style.overflow  = 'hidden';\n            }\n\n            for (i = 0; target = operation.toShow[i]; i++) {\n                target.show();\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.startContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            self.callActions('afterSetInter', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getInterMixData: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeGetInterMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                operation.showPosData[i].interPosData = target.getPosData();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                operation.toHidePosData[i].interPosData = target.getPosData();\n            }\n\n            self.callActions('afterGetInterMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        setFinal: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeSetFinal', arguments);\n\n            operation.willSort && self.printSort(false, operation);\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.hide();\n            }\n\n            self.callActions('afterSetFinal', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getFinalMixData: function(operation) {\n            var self        = this,\n                parentStyle = null,\n                parentRect  = null,\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeGetFinalMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                operation.showPosData[i].finalPosData = target.getPosData();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                operation.toHidePosData[i].finalPosData = target.getPosData();\n            }\n\n            // Remove clamping\n\n            if (self.config.animation.clampHeight || self.config.animation.clampWidth) {\n                self.dom.parent.style.height    =\n                self.dom.parent.style.width     =\n                self.dom.parent.style.overflow  = '';\n            }\n\n            if (!self.incPadding) {\n                parentStyle = window.getComputedStyle(self.dom.parent);\n            }\n\n            parentRect  = self.dom.parent.getBoundingClientRect();\n\n            operation.newX = parentRect.left;\n            operation.newY = parentRect.top;\n\n            operation.newHeight = self.incPadding ?\n                parentRect.height :\n                parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n            operation.newWidth = self.incPadding ?\n                parentRect.width :\n                parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n            operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;\n            operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;\n\n            if (operation.willSort) {\n                self.printSort(true, operation);\n            }\n\n            for (i = 0; target = operation.toShow[i]; i++) {\n                target.hide();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.show();\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.newContainerClassName);\n                h.addClass(self.dom.container, self.config.layout.containerClassName);\n            }\n\n            self.callActions('afterGetFinalMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since    3.0.0\n         * @param    {Operation}     operation\n         */\n\n        getTweenData: function(operation) {\n            var self            = this,\n                target          = null,\n                posData         = null,\n                effectNames     = Object.getOwnPropertyNames(self.effectsIn),\n                effectName      = '',\n                effect          = null,\n                widthChange     = -1,\n                heightChange    = -1,\n                i               = -1,\n                j               = -1;\n\n            self.callActions('beforeGetTweenData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                posData             = operation.showPosData[i];\n                posData.posIn       = new mixitup.StyleData();\n                posData.posOut      = new mixitup.StyleData();\n                posData.tweenData   = new mixitup.StyleData();\n\n                // Process x and y\n\n                if (target.isShown) {\n                    posData.posIn.x = posData.startPosData.x - posData.interPosData.x;\n                    posData.posIn.y = posData.startPosData.y - posData.interPosData.y;\n                } else {\n                    posData.posIn.x = posData.posIn.y = 0;\n                }\n\n                posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;\n                posData.posOut.y = posData.finalPosData.y - posData.interPosData.y;\n\n                // Process opacity\n\n                posData.posIn.opacity       = target.isShown ? 1 : self.effectsIn.opacity;\n                posData.posOut.opacity      = 1;\n                posData.tweenData.opacity   = posData.posOut.opacity - posData.posIn.opacity;\n\n                // Adjust x and y if not nudging\n\n                if (!target.isShown && !self.config.animation.nudge) {\n                    posData.posIn.x = posData.posOut.x;\n                    posData.posIn.y = posData.posOut.y;\n                }\n\n                posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                // Process width, height, and margins\n\n                if (self.config.animation.animateResizeTargets) {\n                    posData.posIn.width     = posData.startPosData.width;\n                    posData.posIn.height    = posData.startPosData.height;\n\n                    // \"||\" Prevents width/height change from including 0 width/height if hiding or showing\n\n                    widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;\n\n                    posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                    heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;\n\n                    posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n\n                    posData.posOut.width    = posData.finalPosData.width;\n                    posData.posOut.height   = posData.finalPosData.height;\n\n                    widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;\n\n                    posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;\n\n                    heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;\n\n                    posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;\n\n                    posData.tweenData.width         = posData.posOut.width - posData.posIn.width;\n                    posData.tweenData.height        = posData.posOut.height - posData.posIn.height;\n                    posData.tweenData.marginRight   = posData.posOut.marginRight - posData.posIn.marginRight;\n                    posData.tweenData.marginBottom  = posData.posOut.marginBottom - posData.posIn.marginBottom;\n                }\n\n                // Process transforms\n\n                for (j = 0; effectName = effectNames[j]; j++) {\n                    effect = self.effectsIn[effectName];\n\n                    if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                    posData.posIn[effectName].value     = effect.value;\n                    posData.posOut[effectName].value    = 0;\n\n                    posData.tweenData[effectName].value =\n                        posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                    posData.posIn[effectName].unit =\n                        posData.posOut[effectName].unit =\n                        posData.tweenData[effectName].unit =\n                        effect.unit;\n                }\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                posData             = operation.toHidePosData[i];\n                posData.posIn       = new mixitup.StyleData();\n                posData.posOut      = new mixitup.StyleData();\n                posData.tweenData   = new mixitup.StyleData();\n\n                // Process x and y\n\n                posData.posIn.x     = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;\n                posData.posIn.y     = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;\n                posData.posOut.x    = self.config.animation.nudge ? 0 : posData.posIn.x;\n                posData.posOut.y    = self.config.animation.nudge ? 0 : posData.posIn.y;\n                posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                // Process width, height, and margins\n\n                if (self.config.animation.animateResizeTargets) {\n                    posData.posIn.width         = posData.startPosData.width;\n                    posData.posIn.height        = posData.startPosData.height;\n\n                    widthChange = posData.startPosData.width - posData.interPosData.width;\n\n                    posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                    heightChange = posData.startPosData.height - posData.interPosData.height;\n\n                    posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n                }\n\n                // Process opacity\n\n                posData.posIn.opacity       = 1;\n                posData.posOut.opacity      = self.effectsOut.opacity;\n                posData.tweenData.opacity   = posData.posOut.opacity - posData.posIn.opacity;\n\n                // Process transforms\n\n                for (j = 0; effectName = effectNames[j]; j++) {\n                    effect = self.effectsOut[effectName];\n\n                    if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                    posData.posIn[effectName].value     = 0;\n                    posData.posOut[effectName].value    = effect.value;\n\n                    posData.tweenData[effectName].value =\n                        posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                    posData.posIn[effectName].unit =\n                        posData.posOut[effectName].unit =\n                        posData.tweenData[effectName].unit =\n                        effect.unit;\n                }\n            }\n\n            self.callActions('afterGetTweenData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        moveTargets: function(operation) {\n            var self            = this,\n                target          = null,\n                moveData        = null,\n                posData         = null,\n                statusChange    = '',\n                willTransition  = false,\n                staggerIndex    = -1,\n                i               = -1,\n                checkProgress   = self.checkProgress.bind(self);\n\n            self.callActions('beforeMoveTargets', arguments);\n\n            // TODO: this is an extra loop in addition to the calcs\n            // done in getOperation, could some of this be done there?\n\n            for (i = 0; target = operation.show[i]; i++) {\n                moveData    = new mixitup.IMoveData();\n                posData     = operation.showPosData[i];\n\n                statusChange = target.isShown ? 'none' : 'show';\n\n                willTransition = self.willTransition(\n                    statusChange,\n                    operation.hasEffect,\n                    posData.posIn,\n                    posData.posOut\n                );\n\n                if (willTransition) {\n                    // Prevent non-transitioning targets from incrementing the staggerIndex\n\n                    staggerIndex++;\n                }\n\n                target.show();\n\n                moveData.posIn          = posData.posIn;\n                moveData.posOut         = posData.posOut;\n                moveData.statusChange   = statusChange;\n                moveData.staggerIndex   = staggerIndex;\n                moveData.operation      = operation;\n                moveData.callback       = willTransition ? checkProgress : null;\n\n                target.move(moveData);\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                posData  = operation.toHidePosData[i];\n                moveData = new mixitup.IMoveData();\n\n                statusChange = 'hide';\n\n                willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);\n\n                moveData.posIn          = posData.posIn;\n                moveData.posOut         = posData.posOut;\n                moveData.statusChange   = statusChange;\n                moveData.staggerIndex   = i;\n                moveData.operation      = operation;\n                moveData.callback       = willTransition ? checkProgress : null;\n\n                target.move(moveData);\n            }\n\n            if (self.config.animation.animateResizeContainer) {\n                self.dom.parent.style[mixitup.features.transitionProp] =\n                    'height ' + self.config.animation.duration + 'ms ease, ' +\n                    'width ' + self.config.animation.duration + 'ms ease ';\n\n                requestAnimationFrame(function() {\n                    if (\n                        operation.startHeight !== operation.newHeight &&\n                        operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n                    ) {\n                        self.dom.parent.style.height = operation.newHeight + 'px';\n                    }\n\n                    if (\n                        operation.startWidth !== operation.newWidth &&\n                        operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n                    ) {\n                        self.dom.parent.style.width = operation.newWidth + 'px';\n                    }\n                });\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, self.config.layout.ContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            self.callActions('afterMoveTargets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @return  {boolean}\n         */\n\n        hasEffect: function() {\n            var self        = this,\n                EFFECTABLES = [\n                    'scale',\n                    'translateX', 'translateY', 'translateZ',\n                    'rotateX', 'rotateY', 'rotateZ'\n                ],\n                effectName  = '',\n                effect      = null,\n                result      = false,\n                value       = -1,\n                i           = -1;\n\n            if (self.effectsIn.opacity !== 1) {\n                return self.callFilters('resultHasEffect', true, arguments);\n            }\n\n            for (i = 0; effectName = EFFECTABLES[i]; i++) {\n                effect  = self.effectsIn[effectName];\n                value   = (typeof effect && effect.value !== 'undefined') ?\n                    effect.value : effect;\n\n                if (value !== 0) {\n                    result = true;\n\n                    break;\n                }\n            }\n\n            return self.callFilters('resultHasEffect', result, arguments);\n        },\n\n        /**\n         * Determines if a target element will transition in\n         * some fasion and therefore requires binding of\n         * transitionEnd\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}        statusChange\n         * @param   {boolean}       hasEffect\n         * @param   {StyleData}     posIn\n         * @param   {StyleData}     posOut\n         * @return  {boolean}\n         */\n\n        willTransition: function(statusChange, hasEffect, posIn, posOut) {\n            var self    = this,\n                result  = false;\n\n            if (!h.isVisible(self.dom.container)) {\n                // If the container is not visible, the transitionEnd\n                // event will not occur and MixItUp will hang\n\n                result = false;\n            } else if (\n                (statusChange !== 'none' && hasEffect) ||\n                posIn.x !== posOut.x ||\n                posIn.y !== posOut.y\n            ) {\n                // If opacity and/or translate will change\n\n                result = true;\n            } else if (self.config.animation.animateResizeTargets) {\n                // Check if width, height or margins will change\n\n                result = (\n                    posIn.width !== posOut.width ||\n                    posIn.height !== posOut.height ||\n                    posIn.marginRight !== posOut.marginRight ||\n                    posIn.marginTop !== posOut.marginTop\n                );\n            } else {\n                result = false;\n            }\n\n            return self.callFilters('resultWillTransition', result, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        checkProgress: function(operation) {\n            var self = this;\n\n            self.targetsDone++;\n\n            if (self.targetsBound === self.targetsDone) {\n                self.cleanUp(operation);\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        cleanUp: function(operation) {\n            var self                = this,\n                target              = null,\n                whitespaceBefore    = null,\n                whitespaceAfter     = null,\n                nextInQueue         = null,\n                i                   = -1;\n\n            self.callActions('beforeCleanUp', arguments);\n\n            self.targetsMoved          =\n                self.targetsImmovable  =\n                self.targetsBound      =\n                self.targetsDone       = 0;\n\n            for (i = 0; target = operation.show[i]; i++) {\n                target.cleanUp();\n\n                target.show();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.cleanUp();\n\n                target.hide();\n            }\n\n            if (operation.willSort) {\n                self.printSort(false, operation);\n            }\n\n            // Remove any styles applied to the parent container\n\n            self.dom.parent.style[mixitup.features.transitionProp]             =\n                self.dom.parent.style.height                                   =\n                self.dom.parent.style.width                                    =\n                self.dom.parent.style.overflow                                 =\n                self.dom.parent.style[mixitup.features.perspectiveProp]        =\n                self.dom.parent.style[mixitup.features.perspectiveOriginProp]  = '';\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.startContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            if (operation.toRemove.length) {\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (operation.toRemove.indexOf(target) > -1) {\n                        if (\n                            (whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' &&\n                            (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text'\n                        ) {\n                            h.removeWhitespace(whitespaceBefore);\n                        }\n\n                        if (!operation.willSort) {\n                            // NB: Sorting will remove targets as a bi-product of `printSort()`\n\n                            self.dom.parent.removeChild(target.dom.el);\n                        }\n\n                        self.targets.splice(i, 1);\n\n                        target.isInDom = false;\n\n                        i--;\n                    }\n                }\n\n                // Since targets have been removed, the original order must be updated\n\n                self.origOrder = self.targets;\n            }\n\n            if (operation.willSort) {\n                self.targets = operation.newOrder;\n            }\n\n            self.state = operation.newState;\n            self.lastOperation = operation;\n\n            self.dom.targets = self.state.targets;\n\n            // mixEnd\n\n            mixitup.events.fire('mixEnd', self.dom.container, {\n                state: self.state,\n                instance: self\n            }, self.dom.document);\n\n            if (typeof self.config.callbacks.onMixEnd === 'function') {\n                self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);\n            }\n\n            if (operation.hasFailed) {\n                // mixFail\n\n                mixitup.events.fire('mixFail', self.dom.container, {\n                    state: self.state,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixFail === 'function') {\n                    self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);\n                }\n\n                h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n            }\n\n            // User-defined callback function\n\n            if (typeof self.userCallback === 'function') {\n                self.userCallback.call(self.dom.container, self.state, self);\n            }\n\n            if (typeof self.userDeferred.resolve === 'function') {\n                self.userDeferred.resolve(self.state);\n            }\n\n            self.userCallback  = null;\n            self.userDeferred  = null;\n            self.lastClicked   = null;\n            self.isToggling    = false;\n            self.isBusy        = false;\n\n            if (self.queue.length) {\n                self.callActions('beforeReadQueueCleanUp', arguments);\n\n                nextInQueue = self.queue.shift();\n\n                // Update non-public API properties stored in queue\n\n                self.userDeferred  = nextInQueue.deferred;\n                self.isToggling    = nextInQueue.isToggling;\n                self.lastClicked   = nextInQueue.triggerElement;\n\n                if (nextInQueue.instruction.command instanceof mixitup.CommandMultimix) {\n                    self.multimix.apply(self, nextInQueue.args);\n                } else {\n                    self.dataset.apply(self, nextInQueue.args);\n                }\n            }\n\n            self.callActions('afterCleanUp', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseMultimixArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandMultimix();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                if (typeof arg === 'object') {\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            // Coerce arbitrary command arguments into typed command objects\n\n            if (instruction.command.insert && !(instruction.command.insert instanceof mixitup.CommandInsert)) {\n                instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;\n            }\n\n            if (instruction.command.remove && !(instruction.command.remove instanceof mixitup.CommandRemove)) {\n                instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;\n            }\n\n            if (instruction.command.filter && !(instruction.command.filter instanceof mixitup.CommandFilter)) {\n                instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;\n            }\n\n            if (instruction.command.sort && !(instruction.command.sort instanceof mixitup.CommandSort)) {\n                instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;\n            }\n\n            if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof mixitup.CommandChangeLayout)) {\n                instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;\n            }\n\n            instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseFilterArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandFilter();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (typeof arg === 'string') {\n                    // Selector\n\n                    instruction.command.selector = arg;\n                } else if (arg === null) {\n                    instruction.command.collection = [];\n                } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                    // Single element\n\n                    instruction.command.collection = [arg];\n                } else if (typeof arg === 'object' && typeof arg.length !== 'undefined') {\n                    // Multiple elements in array, NodeList or jQuery collection\n\n                    instruction.command.collection = h.arrayFromList(arg);\n                } else if (typeof arg === 'object') {\n                    // Filter command\n\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            if (instruction.command.selector && instruction.command.collection) {\n                throw new Error(mixitup.messages.errorFilterInvalidArguments());\n            }\n\n            instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        parseSortArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                sortString  = '',\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandSort();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'string':\n                        // Sort string\n\n                        sortString = arg;\n\n                        break;\n                    case 'object':\n                        // Array of element references\n\n                        if (arg.length) {\n                            instruction.command.collection = h.arrayFromList(arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            if (sortString) {\n                instruction.command = self.parseSortString(sortString, instruction.command);\n            }\n\n            instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseInsertArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandInsert();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                if (typeof arg === 'number') {\n                    // Insert index\n\n                    instruction.command.index = arg;\n                } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {\n                    // 'before'/'after'\n\n                    instruction.command.position = arg;\n                } else if (typeof arg === 'string') {\n                    // Markup\n\n                    instruction.command.collection =\n                        h.arrayFromList(h.createElement(arg).childNodes);\n                } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                    // Single element\n\n                    !instruction.command.collection.length ?\n                        (instruction.command.collection = [arg]) :\n                        (instruction.command.sibling = arg);\n                } else if (typeof arg === 'object' && arg.length) {\n                    // Multiple elements in array or jQuery collection\n\n                    !instruction.command.collection.length ?\n                        (instruction.command.collection = arg) :\n                        instruction.command.sibling = arg[0];\n                } else if (typeof arg === 'object' && arg.childNodes && arg.childNodes.length) {\n                    // Document fragment\n\n                    !instruction.command.collection.length ?\n                        instruction.command.collection = h.arrayFromList(arg.childNodes) :\n                        instruction.command.sibling = arg.childNodes[0];\n                } else if (typeof arg === 'object') {\n                    // Insert command\n\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            if (instruction.command.index && instruction.command.sibling) {\n                throw new Error(mixitup.messages.errorInsertInvalidArguments());\n            }\n\n            if (!instruction.command.collection.length && self.config.debug.showWarnings) {\n                console.warn(mixitup.messages.warningInsertNoElements());\n            }\n\n            instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseRemoveArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                target      = null,\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandRemove();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'number':\n                        if (self.targets[arg]) {\n                            instruction.command.targets[0] = self.targets[arg];\n                        }\n\n                        break;\n                    case 'string':\n                        instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));\n\n                        break;\n                    case 'object':\n                        if (arg && arg.length) {\n                            instruction.command.collection = arg;\n                        } else if (h.isElement(arg, self.dom.document)) {\n                            instruction.command.collection = [arg];\n                        } else {\n                            // Remove command\n\n                            h.extend(instruction.command, arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            if (instruction.command.collection.length) {\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (instruction.command.collection.indexOf(target.dom.el) > -1) {\n                        instruction.command.targets.push(target);\n                    }\n                }\n            }\n\n            if (!instruction.command.targets.length && self.config.debug.showWarnings) {\n                console.warn(mixitup.messages.warningRemoveNoElements());\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseDatasetArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandDataset();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'object':\n                        if (Array.isArray(arg) || typeof arg.length === 'number') {\n                            instruction.command.dataset = arg;\n                        } else {\n                            // Change layout command\n\n                            h.extend(instruction.command, arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseChangeLayoutArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandChangeLayout();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'string':\n                        instruction.command.containerClassName = arg;\n\n                        break;\n                    case 'object':\n                        // Change layout command\n\n                        h.extend(instruction.command, arg);\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since       3.0.0\n         * @param       {mixitup.QueueItem}         queueItem\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        queueMix: function(queueItem) {\n            var self            = this,\n                deferred        = null,\n                toggleSelector  = '';\n\n            self.callActions('beforeQueueMix', arguments);\n\n            deferred = h.defer(mixitup.libraries);\n\n            if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {\n                queueItem.deferred = deferred;\n\n                self.queue.push(queueItem);\n\n                // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.\n\n                if (self.config.controls.enable) {\n                    if (self.isToggling) {\n                        self.buildToggleArray(queueItem.instruction.command);\n\n                        toggleSelector = self.getToggleSelector();\n\n                        self.updateControls({\n                            filter: {\n                                selector: toggleSelector\n                            }\n                        });\n                    } else {\n                        self.updateControls(queueItem.instruction.command);\n                    }\n                }\n            } else {\n                if (self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningMultimixInstanceQueueFull());\n                }\n\n                deferred.resolve(self.state);\n\n                mixitup.events.fire('mixBusy', self.dom.container, {\n                    state: self.state,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixBusy === 'function') {\n                    self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);\n                }\n            }\n\n            return self.callFilters('promiseQueueMix', deferred.promise, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array.<object>}    newDataset\n         * @return  {Operation}\n         */\n\n        getDataOperation: function(newDataset) {\n            var self                = this,\n                operation           = new mixitup.Operation(),\n                startDataset        = [];\n\n            operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);\n\n            if (self.dom.targets.length && !(startDataset = (self.state.activeDataset || [])).length) {\n                throw new Error(mixitup.messages.errorDatasetNotSet());\n            }\n\n            operation.id            = h.randomHex();\n            operation.startState    = self.state;\n            operation.startDataset  = startDataset;\n            operation.newDataset    = newDataset.slice();\n\n            self.diffDatasets(operation);\n\n            operation.startOrder = self.targets;\n            operation.newOrder = operation.show;\n\n            if (self.config.animation.enable) {\n                self.getStartMixData(operation);\n                self.setInter(operation);\n\n                operation.docState = h.getDocumentState(self.dom.document);\n\n                self.getInterMixData(operation);\n                self.setFinal(operation);\n                self.getFinalMixData(operation);\n\n                self.parseEffects();\n\n                operation.hasEffect = self.hasEffect();\n\n                self.getTweenData(operation);\n            }\n\n            self.targets = operation.show.slice();\n\n            operation.newState = self.buildState(operation);\n\n            // NB: Targets to be removed must be included in `self.targets` for removal during clean up,\n            // but are added after state is built so that state is accurate\n\n            Array.prototype.push.apply(self.targets, operation.toRemove);\n\n            operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);\n\n            return operation;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Operation} operation\n         * @return  {void}\n         */\n\n        diffDatasets: function(operation) {\n            var self                = this,\n                persistantStartIds  = [],\n                persistantNewIds    = [],\n                insertedTargets     = [],\n                data                = null,\n                target              = null,\n                el                  = null,\n                frag                = null,\n                nextEl              = null,\n                uids                = {},\n                id                  = '',\n                i                   = -1;\n\n            self.callActions('beforeDiffDatasets', arguments);\n\n            for (i = 0; data = operation.newDataset[i]; i++) {\n                if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                    throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                        uidKey: self.config.data.uidKey\n                    }));\n                }\n\n                if (!uids[id]) {\n                    uids[id] = true;\n                } else {\n                    throw new Error(mixitup.messages.errorDatasetDuplicateUid({\n                        uid: id\n                    }));\n                }\n\n                if ((target = self.cache[id]) instanceof mixitup.Target) {\n                    // Already in cache\n\n                    if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {\n                        // change detected\n\n                        el = target.render(data);\n\n                        target.data = data;\n\n                        if (el !== target.dom.el) {\n                            // Update target element reference\n\n                            if (target.isInDom) {\n                                target.unbindEvents();\n\n                                self.dom.parent.replaceChild(el, target.dom.el);\n                            }\n\n                            if (!target.isShown) {\n                                el.style.display = 'none';\n                            }\n\n                            target.dom.el = el;\n\n                            if (target.isInDom) {\n                                target.bindEvents();\n                            }\n                        }\n                    }\n\n                    el = target.dom.el;\n                } else {\n                    // New target\n\n                    target = new mixitup.Target();\n\n                    target.init(null, self, data);\n\n                    target.hide();\n                }\n\n                if (!target.isInDom) {\n                    // Adding to DOM\n\n                    if (!frag) {\n                        // Open frag\n\n                        frag = self.dom.document.createDocumentFragment();\n                    }\n\n                    if (frag.lastElementChild) {\n                        frag.appendChild(self.dom.document.createTextNode(' '));\n                    }\n\n                    frag.appendChild(target.dom.el);\n\n                    target.isInDom = true;\n\n                    target.unbindEvents();\n                    target.bindEvents();\n                    target.hide();\n\n                    operation.toShow.push(target);\n\n                    insertedTargets.push(target);\n                } else {\n                    // Already in DOM\n\n                    nextEl = target.dom.el.nextElementSibling;\n\n                    persistantNewIds.push(id);\n\n                    if (frag) {\n                        // Close and insert previously opened frag\n\n                        if (frag.lastElementChild) {\n                            frag.appendChild(self.dom.document.createTextNode(' '));\n                        }\n\n                        self.insertDatasetFrag(frag, target.dom.el, insertedTargets);\n\n                        frag = null;\n                    }\n                }\n\n                operation.show.push(target);\n            }\n\n            if (frag) {\n                // Unclosed frag remaining\n\n                nextEl = nextEl || self.config.layout.siblingAfter;\n\n                if (nextEl) {\n                    frag.appendChild(self.dom.document.createTextNode(' '));\n                }\n\n                self.insertDatasetFrag(frag, nextEl, insertedTargets);\n            }\n\n            for (i = 0; data = operation.startDataset[i]; i++) {\n                id = data[self.config.data.uidKey];\n\n                target = self.cache[id];\n\n                if (operation.show.indexOf(target) < 0) {\n                    // Previously shown but now absent\n\n                    operation.hide.push(target);\n                    operation.toHide.push(target);\n                    operation.toRemove.push(target);\n                } else {\n                    persistantStartIds.push(id);\n                }\n            }\n\n            if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {\n                operation.willSort = true;\n            }\n\n            self.callActions('afterDiffDatasets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.1.5\n         * @param   {DocumentFragment}          frag\n         * @param   {(HTMLElement|null)}        nextEl\n         * @param   {Array.<mixitup.Target>}    targets\n         * @return  {void}\n         */\n\n        insertDatasetFrag: function(frag, nextEl, targets) {\n            var self = this;\n            var insertAt = nextEl ? h.arrayFromList(self.dom.parent.children).indexOf(nextEl) : self.targets.length;\n\n            self.dom.parent.insertBefore(frag, nextEl);\n\n            while (targets.length) {\n                self.targets.splice(insertAt, 0, targets.shift());\n\n                insertAt++;\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.CommandSort} sortCommandA\n         * @param   {mixitup.CommandSort} sortCommandB\n         * @return  {boolean}\n         */\n\n        willSort: function(sortCommandA, sortCommandB) {\n            var self    = this,\n                result  = false;\n\n            if (\n                self.config.behavior.liveSort ||\n                sortCommandA.order       === 'random' ||\n                sortCommandA.attribute   !== sortCommandB.attribute ||\n                sortCommandA.order       !== sortCommandB.order ||\n                sortCommandA.collection  !== sortCommandB.collection ||\n                (sortCommandA.next === null && sortCommandB.next) ||\n                (sortCommandA.next && sortCommandB.next === null)\n            ) {\n                result = true;\n            } else if (sortCommandA.next && sortCommandB.next) {\n                result = self.willSort(sortCommandA.next, sortCommandB.next);\n            } else {\n                result = false;\n            }\n\n            return self.callFilters('resultWillSort', result, arguments);\n        },\n\n        /**\n         * A shorthand method for `.filter('all')`. Shows all targets in the container.\n         *\n         * @example\n         *\n         * .show()\n         *\n         * @example <caption>Example: Showing all targets</caption>\n         *\n         * mixer.show()\n         *     .then(function(state) {\n         *         console.log(state.totalShow === state.totalTargets); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        show: function() {\n            var self = this;\n\n            return self.filter('all');\n        },\n\n        /**\n         * A shorthand method for `.filter('none')`. Hides all targets in the container.\n         *\n         * @example\n         *\n         * .hide()\n         *\n         * @example <caption>Example: Hiding all targets</caption>\n         *\n         * mixer.hide()\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 0); // true\n         *         console.log(state.totalHide === state.totalTargets); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        hide: function() {\n            var self = this;\n\n            return self.filter('none');\n        },\n\n        /**\n         * Returns a boolean indicating whether or not a MixItUp operation is\n         * currently in progress.\n         *\n         * @example\n         *\n         * .isMixing()\n         *\n         * @example <caption>Example: Checking the status of a mixer</caption>\n         *\n         * mixer.sort('random', function() {\n         *     console.log(mixer.isMixing()) // false\n         * });\n         *\n         * console.log(mixer.isMixing()) // true\n         *\n         * @public\n         * @instance\n         * @since   2.0.0\n         * @return  {boolean}\n         */\n\n        isMixing: function() {\n            var self = this;\n\n            return self.isBusy;\n        },\n\n        /**\n         * Filters all targets in the container by a provided selector string, or the values `'all'`\n         * or `'none'`. Only targets matching the selector will be shown.\n         *\n         * @example\n         *\n         * .filter(selector [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Filtering targets by a class selector</caption>\n         *\n         * mixer.filter('.category-a')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true\n         *     });\n         *\n         * @example <caption>Example 2: Filtering targets by an attribute selector</caption>\n         *\n         * mixer.filter('[data-category~=\"a\"]')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~=\"a\"]').length); // true\n         *     });\n         *\n         * @example <caption>Example 3: Filtering targets by a compound selector</caption>\n         *\n         * // Show only those targets with the classes 'category-a' AND 'category-b'\n         *\n         * mixer.filter('.category-a.category-c')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true\n         *     });\n         *\n         * @example <caption>Example 4: Filtering via an element collection</caption>\n         *\n         * var collection = Array.from(container.querySelectorAll('.mix'));\n         *\n         * console.log(collection.length); // 34\n         *\n         * // Filter the collection manually using Array.prototype.filter\n         *\n         * var filtered = collection.filter(function(target) {\n         *    return parseInt(target.getAttribute('data-price')) > 10;\n         * });\n         *\n         * console.log(filtered.length); // 22\n         *\n         * // Pass the filtered collection to MixItUp\n         *\n         * mixer.filter(filtered)\n         *    .then(function(state) {\n         *        console.log(state.activeFilter.collection.length === 22); // true\n         *    });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector\n         *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        filter: function() {\n            var self        = this,\n                instruction = self.parseFilterArgs(arguments);\n\n            return self.multimix({\n                filter: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Adds an additional selector to the currently active filter selector, concatenating\n         * as per the logic defined in `controls.toggleLogic`.\n         *\n         * @example\n         *\n         * .toggleOn(selector [, animate] [, callback])\n         *\n         * @example <caption>Example: Toggling on a filter selector</caption>\n         *\n         * console.log(mixer.getState().activeFilter.selector); // '.category-a'\n         *\n         * mixer.toggleOn('.category-b')\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector); // '.category-a, .category-b'\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}    selector\n         *      Any valid CSS selector (i.e. `'.category-a'`)\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        toggleOn: function() {\n            var self            = this,\n                instruction     = self.parseFilterArgs(arguments),\n                selector        = instruction.command.selector,\n                toggleSelector  = '';\n\n            self.isToggling = true;\n\n            if (self.toggleArray.indexOf(selector) < 0) {\n                self.toggleArray.push(selector);\n            }\n\n            toggleSelector = self.getToggleSelector();\n\n            return self.multimix({\n                filter: toggleSelector\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Removes a selector from the active filter selector.\n         *\n         * @example\n         *\n         * .toggleOff(selector [, animate] [, callback])\n         *\n         * @example <caption>Example: Toggling off a filter selector</caption>\n         *\n         * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'\n         *\n         * mixer.toggleOff('.category-b')\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector); // '.category-a'\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}    selector\n         *      Any valid CSS selector (i.e. `'.category-a'`)\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        toggleOff: function() {\n            var self            = this,\n                instruction     = self.parseFilterArgs(arguments),\n                selector        = instruction.command.selector,\n                selectorIndex   = self.toggleArray.indexOf(selector),\n                toggleSelector  = '';\n\n            self.isToggling = true;\n\n            if (selectorIndex > -1) {\n                self.toggleArray.splice(selectorIndex, 1);\n            }\n\n            toggleSelector = self.getToggleSelector();\n\n            return self.multimix({\n                filter: toggleSelector\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Sorts all targets in the container according to a provided sort string.\n         *\n         * @example\n         *\n         * .sort(sortString [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Sorting by the default DOM order</caption>\n         *\n         * // Reverse the default order of the targets\n         *\n         * mixer.sort('default:desc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'default'); // true\n         *         console.log(state.activeSort.order === 'desc'); // true\n         *     });\n         *\n         * @example <caption>Example 2: Sorting by a custom data-attribute</caption>\n         *\n         * // Sort the targets by the value of a `data-published-date` attribute\n         *\n         * mixer.sort('published-date:asc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.activeSort.order === 'asc'); // true\n         *     });\n         *\n         * @example <caption>Example 3: Sorting by multiple attributes</caption>\n         *\n         * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`\n         *\n         * mixer.sort('published-date:desc data-title:asc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.activeSort.order === 'desc'); // true\n         *\n         *         console.log(state.activeSort.next.attribute === 'title'); // true\n         *         console.log(state.activeSort.next.order === 'asc'); // true\n         *     });\n         *\n         * @example <caption>Example 4: Sorting by random</caption>\n         *\n         * mixer.sort('random')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.order === 'random') // true\n         *     });\n         *\n         * @example <caption>Example 5: Sorting via an element collection</caption>\n         *\n         * var collection = Array.from(container.querySelectorAll('.mix'));\n         *\n         * // Swap the position of two elements in the collection:\n         *\n         * var temp = collection[1];\n         *\n         * collection[1] = collection[0];\n         * collection[0] = temp;\n         *\n         * // Pass the sorted collection to MixItUp\n         *\n         * mixer.sort(collection)\n         *     .then(function(state) {\n         *         console.log(state.targets[0] === collection[0]); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(string|Array.<HTMLElement>)}    sortString\n         *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        sort: function() {\n            var self        = this,\n                instruction = self.parseSortArgs(arguments);\n\n            return self.multimix({\n                sort: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Changes the layout of the container by adding, removing or updating a\n         * layout-specific class name. If `animation.animateResizetargets` is\n         * enabled, MixItUp will attempt to gracefully animate the width, height,\n         * and position of targets between layout states.\n         *\n         * @example\n         *\n         * .changeLayout(containerClassName [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Adding a new class name to the container</caption>\n         *\n         * mixer.changeLayout('container-list')\n         *      .then(function(state) {\n         *          console.log(state.activeContainerClass === 'container-list'); // true\n         *      });\n         *\n         * @example <caption>Example 2: Removing a previously added class name from the container</caption>\n         *\n         * mixer.changeLayout('')\n         *      .then(function(state) {\n         *          console.log(state.activeContainerClass === ''); // true\n         *      });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    containerClassName\n         *      A layout-specific class name to add to the container.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        changeLayout: function() {\n            var self        = this,\n                instruction = self.parseChangeLayoutArgs(arguments);\n\n            return self.multimix({\n                changeLayout: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Updates the contents and order of the container to reflect the provided dataset,\n         * if the dataset API is in use.\n         *\n         * The dataset API is designed for use in API-driven JavaScript applications, and\n         * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,\n         * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be\n         * achieved purely via changes to your data model, without the uglyness of having\n         * to interact with or query the DOM directly.\n         *\n         * @example\n         *\n         * .dataset(dataset [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Rendering a dataset</caption>\n         *\n         * var myDataset = [\n         *     {id: 1, ...},\n         *     {id: 2, ...},\n         *     {id: 3, ...}\n         * ];\n         *\n         * mixer.dataset(myDataset)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 3); // true\n         *     });\n         *\n         * @example <caption>Example 2: Sorting a dataset</caption>\n         *\n         * // Create a new dataset in reverse order\n         *\n         * var newDataset = myDataset.slice().reverse();\n         *\n         * mixer.dataset(newDataset)\n         *     .then(function(state) {\n         *         console.log(state.activeDataset[0] === myDataset[2]); // true\n         *     });\n         *\n         * @example <caption>Example 3: Removing an item from the dataset</caption>\n         *\n         * console.log(myDataset.length); // 3\n         *\n         * // Create a new dataset with the last item removed.\n         *\n         * var newDataset = myDataset.slice().pop();\n         *\n         * mixer.dataset(newDataset)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 2); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {Array.<object>}    dataset\n         *      An array of objects, each one representing the underlying data model of a target to be rendered.\n         * @param       {boolean}           [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}          [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        dataset: function() {\n            var self        = this,\n                instruction = self.parseDatasetArgs(arguments),\n                operation   = null,\n                queueItem   = null,\n                animate     = false;\n\n            self.callActions('beforeDataset', arguments);\n\n            if (!self.isBusy) {\n                if (instruction.callback) self.userCallback = instruction.callback;\n\n                animate = (instruction.animate ^ self.config.animation.enable) ? instruction.animate : self.config.animation.enable;\n\n                operation = self.getDataOperation(instruction.command.dataset);\n\n                return self.goMix(animate, operation);\n            } else {\n                queueItem = new mixitup.QueueItem();\n\n                queueItem.args          = arguments;\n                queueItem.instruction   = instruction;\n\n                return self.queueMix(queueItem);\n            }\n        },\n\n        /**\n         * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`\n         * operations as requested.\n         *\n         * @example\n         *\n         * .multimix(multimixCommand [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>\n         *\n         * mixer.multimix({\n         *     filter: '.category-b',\n         *     sort: 'published-date:desc'\n         * })\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector === '.category-b'); // true\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *     });\n         *\n         * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 6\n         *\n         * // NB: When inserting via `multimix()`, an object should be provided as the value\n         * // for the `insert` portion of the command, allowing for a collection of elements\n         * // and an insertion index to be specified.\n         *\n         * mixer.multimix({\n         *     sort: 'published-date:desc', // Sort the container, including any new elements\n         *     insert: {\n         *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5\n         *         index: 5\n         *     },\n         *     remove: existingElementReference // Remove 1 existing element\n         * })\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.totalShow === 7); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {object}    multimixCommand\n         *      An object containing one or more things to do\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        multimix: function() {\n            var self        = this,\n                operation   = null,\n                animate     = false,\n                queueItem   = null,\n                instruction = self.parseMultimixArgs(arguments);\n\n            self.callActions('beforeMultimix', arguments);\n\n            if (!self.isBusy) {\n                operation = self.getOperation(instruction.command);\n\n                if (self.config.controls.enable) {\n                    // Update controls for API calls\n\n                    if (instruction.command.filter && !self.isToggling) {\n                        // As we are not toggling, reset the toggle array\n                        // so new filter overrides existing toggles\n\n                        self.toggleArray.length = 0;\n                        self.buildToggleArray(operation.command);\n                    }\n\n                    if (self.queue.length < 1) {\n                        self.updateControls(operation.command);\n                    }\n                }\n\n                if (instruction.callback) self.userCallback = instruction.callback;\n\n                // Always allow the instruction to override the instance setting\n\n                animate = (instruction.animate ^ self.config.animation.enable) ?\n                    instruction.animate :\n                    self.config.animation.enable;\n\n                self.callFilters('operationMultimix', operation, arguments);\n\n                return self.goMix(animate, operation);\n            } else {\n                queueItem = new mixitup.QueueItem();\n\n                queueItem.args           = arguments;\n                queueItem.instruction    = instruction;\n                queueItem.triggerElement = self.lastClicked;\n                queueItem.isToggling     = self.isToggling;\n\n                return self.queueMix(queueItem);\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}            multimixCommand\n         * @param   {boolean}           [isPreFetch]\n         *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.\n         * @return  {Operation|null}\n         */\n\n        getOperation: function(multimixCommand) {\n            var self                = this,\n                sortCommand         = multimixCommand.sort,\n                filterCommand       = multimixCommand.filter,\n                changeLayoutCommand = multimixCommand.changeLayout,\n                removeCommand       = multimixCommand.remove,\n                insertCommand       = multimixCommand.insert,\n                operation           = new mixitup.Operation();\n\n            operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);\n\n            operation.id                = h.randomHex();\n            operation.command           = multimixCommand;\n            operation.startState        = self.state;\n            operation.triggerElement    = self.lastClicked;\n\n            if (self.isBusy) {\n                if (self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningGetOperationInstanceBusy());\n                }\n\n                return null;\n            }\n\n            if (insertCommand) {\n                self.insertTargets(insertCommand, operation);\n            }\n\n            if (removeCommand) {\n                operation.toRemove = removeCommand.targets;\n            }\n\n            operation.startSort = operation.newSort = operation.startState.activeSort;\n            operation.startOrder = operation.newOrder = self.targets;\n\n            if (sortCommand) {\n                operation.startSort = operation.startState.activeSort;\n                operation.newSort   = sortCommand;\n\n                operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);\n\n                if (operation.willSort) {\n                    self.sortOperation(operation);\n                }\n            }\n\n            operation.startFilter = operation.startState.activeFilter;\n\n            if (filterCommand) {\n                operation.newFilter = filterCommand;\n            } else {\n                operation.newFilter = h.extend(new mixitup.CommandFilter(), operation.startFilter);\n            }\n\n            if (operation.newFilter.selector === 'all') {\n                operation.newFilter.selector = self.config.selectors.target;\n            } else if (operation.newFilter.selector === 'none') {\n                operation.newFilter.selector = '';\n            }\n\n            self.filterOperation(operation);\n\n            operation.startContainerClassName = operation.startState.activeContainerClassName;\n\n            if (changeLayoutCommand) {\n                operation.newContainerClassName = changeLayoutCommand.containerClassName;\n\n                if (operation.newContainerClassName !== operation.startContainerClassName) {\n                    operation.willChangeLayout = true;\n                }\n            } else {\n                operation.newContainerClassName = operation.startContainerClassName;\n            }\n\n            if (self.config.animation.enable) {\n                // Populate the operation's position data\n\n                self.getStartMixData(operation);\n                self.setInter(operation);\n\n                operation.docState = h.getDocumentState(self.dom.document);\n\n                self.getInterMixData(operation);\n                self.setFinal(operation);\n                self.getFinalMixData(operation);\n\n                self.parseEffects();\n\n                operation.hasEffect = self.hasEffect();\n\n                self.getTweenData(operation);\n            }\n\n            if (operation.willSort) {\n                self.targets = operation.newOrder;\n            }\n\n            operation.newState = self.buildState(operation);\n\n            return self.callFilters('operationMappedGetOperation', operation, arguments);\n        },\n\n        /**\n         * Renders a previously created operation at a specific point in its path, as\n         * determined by a multiplier between 0 and 1.\n         *\n         * @example\n         * .tween(operation, multiplier)\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Operation}     operation\n         *      An operation object created via the `getOperation` method\n         *\n         * @param   {Float}                 multiplier\n         *      Any number between 0 and 1 representing the percentage complete of the operation\n         * @return  {void}\n         */\n\n        tween: function(operation, multiplier) {\n            var target          = null,\n                posData         = null,\n                toHideIndex     = -1,\n                i               = -1;\n\n            multiplier = Math.min(multiplier, 1);\n            multiplier = Math.max(multiplier, 0);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                posData = operation.showPosData[i];\n\n                target.applyTween(posData, multiplier);\n            }\n\n            for (i = 0; target = operation.hide[i]; i++) {\n                if (target.isShown) {\n                    target.hide();\n                }\n\n                if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {\n                    posData = operation.toHidePosData[toHideIndex];\n\n                    if (!target.isShown) {\n                        target.show();\n                    }\n\n                    target.applyTween(posData, multiplier);\n                }\n            }\n        },\n\n        /**\n         * Inserts one or more new target elements into the container at a specified\n         * index.\n         *\n         * To be indexed as targets, new elements must match the `selectors.target`\n         * selector (`'.mix'` by default).\n         *\n         * @example\n         *\n         * .insert(newElements [, index] [, animate], [, callback])\n         *\n         * @example <caption>Example 1: Inserting a single element via reference</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 0\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insert(newElement)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 1); // true\n         *     });\n         *\n         * @example <caption>Example 2: Inserting a single element via HTML string</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 1\n         *\n         * // Create a new element via reference\n         *\n         * var newElementHtml = '&lt;div class=\"mix\"&gt;&lt;/div&gt;';\n         *\n         * // Create and insert the new element at index 1\n         *\n         * mixer.insert(newElementHtml, 1)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 2); // true\n         *         console.log(state.show[1].outerHTML === newElementHtml); // true\n         *     });\n         *\n         * @example <caption>Example 3: Inserting multiple elements via reference</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 2\n         *\n         * // Create an array of new elements to insert.\n         *\n         * var newElement1 = document.createElement('div');\n         * var newElement2 = document.createElement('div');\n         *\n         * newElement1.classList.add('mix');\n         * newElement2.classList.add('mix');\n         *\n         * var newElementsCollection = [newElement1, newElement2];\n         *\n         * // Insert the new elements starting at index 1\n         *\n         * mixer.insert(newElementsCollection, 1)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 4); // true\n         *         console.log(state.show[1] === newElement1); // true\n         *         console.log(state.show[2] === newElement2); // true\n         *     });\n         *\n         * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 4\n         *\n         * var $newElement = $('&lt;div class=\"mix\"&gt;&lt;/div&gt;');\n         *\n         * // Insert the new elements starting at index 3\n         *\n         * mixer.insert($newElement, 3)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 5); // true\n         *         console.log(state.show[3] === $newElement[0]); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {number}    index=0\n         *      The index at which to insert the new element(s). `0` by default.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insert: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.multimix({\n                insert: args.command\n            }, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements before a provided reference element.\n         *\n         * @example\n         *\n         * .insertBefore(newElements, referenceElement [, animate] [, callback])\n         *\n         * @example <caption>Example: Inserting a new element before a reference element</caption>\n         *\n         * // An existing reference element is chosen at index 2\n         *\n         * var referenceElement = mixer.getState().show[2];\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insertBefore(newElement, referenceElement)\n         *     .then(function(state) {\n         *         // The new element is inserted into the container at index 2, before the reference element\n         *\n         *         console.log(state.show[2] === newElement); // true\n         *\n         *         // The reference element is now at index 3\n         *\n         *         console.log(state.show[3] === referenceElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {HTMLElement}    referenceElement\n         *      A reference to an existing element in the container to insert new elements before.\n         *@param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insertBefore: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements after a provided reference element.\n         *\n         * @example\n         *\n         * .insertAfter(newElements, referenceElement [, animate] [, callback])\n         *\n         * @example <caption>Example: Inserting a new element after a reference element</caption>\n         *\n         * // An existing reference element is chosen at index 2\n         *\n         * var referenceElement = mixer.getState().show[2];\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insertAfter(newElement, referenceElement)\n         *     .then(function(state) {\n         *         // The new element is inserted into the container at index 3, after the reference element\n         *\n         *         console.log(state.show[3] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {HTMLElement}    referenceElement\n         *      A reference to an existing element in the container to insert new elements after.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insertAfter: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements into the container before all existing targets.\n         *\n         * @example\n         *\n         * .prepend(newElements [,animate] [,callback])\n         *\n         * @example <caption>Example: Prepending a new element</caption>\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * // Insert the element into the container\n         *\n         * mixer.prepend(newElement)\n         *     .then(function(state) {\n         *         console.log(state.show[0] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        prepend: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(0, args.command.collection, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements into the container after all existing targets.\n         *\n         * @example\n         *\n         * .append(newElements [,animate] [,callback])\n         *\n         * @example <caption>Example: Appending a new element</caption>\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * // Insert the element into the container\n         *\n         * mixer.append(newElement)\n         *     .then(function(state) {\n         *         console.log(state.show[state.show.length - 1] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        append: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);\n        },\n\n        /**\n         * Removes one or more existing target elements from the container.\n         *\n         * @example\n         *\n         * .remove(elements [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Removing an element by reference</caption>\n         *\n         * var elementToRemove = containerEl.firstElementChild;\n         *\n         * mixer.remove(elementToRemove)\n         *      .then(function(state) {\n         *          console.log(state.targets.indexOf(elementToRemove) === -1); // true\n         *      });\n         *\n         * @example <caption>Example 2: Removing a collection of elements by reference</caption>\n         *\n         * var elementsToRemove = containerEl.querySelectorAll('.category-a');\n         *\n         * console.log(elementsToRemove.length) // 3\n         *\n         * mixer.remove(elementsToRemove)\n         *      .then(function() {\n         *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n         *      });\n         *\n         * @example <caption>Example 3: Removing one or more elements by selector</caption>\n         *\n         * mixer.remove('.category-a')\n         *      .then(function() {\n         *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n         *      });\n         *\n         * @example <caption>Example 4: Removing an element by index</caption>\n         *\n         * console.log(mixer.getState.totalShow); // 4\n         *\n         * // Remove the element at index 3\n         *\n         * mixer.remove(3)\n         *      .then(function(state) {\n         *          console.log(state.totalShow); // 3\n         *          console.log(state.show[3]); // undefined\n         *      });\n         *\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements\n         *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        remove: function() {\n            var self = this,\n                args = self.parseRemoveArgs(arguments);\n\n            return self.multimix({\n                remove: args.command\n            }, args.animate, args.callback);\n        },\n\n        /**\n         * Retrieves the the value of any property or sub-object within the current\n         * mixitup configuration, or the whole configuration object.\n         *\n         * @example\n         *\n         * .getConfig([stringKey])\n         *\n         * @example <caption>Example 1: retrieve the entire configuration object</caption>\n         *\n         * var config = mixer.getConfig(); // Config { ... }\n         *\n         * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>\n         *\n         * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }\n         *\n         * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>\n         *\n         * var effects = mixer.getConfig('animation.effects'); // 'fade scale'\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    [stringKey]    A \"dot-notation\" string key\n         * @return      {*}\n         */\n\n        getConfig: function(stringKey) {\n            var self    = this,\n                value   = null;\n\n            if (!stringKey) {\n                value = self.config;\n            } else {\n                value = h.getProperty(self.config, stringKey);\n            }\n\n            return self.callFilters('valueGetConfig', value, arguments);\n        },\n\n        /**\n         * Updates the configuration of the mixer, after it has been instantiated.\n         *\n         * See the Configuration Object documentation for a full list of avilable\n         * configuration options.\n         *\n         * @example\n         *\n         * .configure(config)\n         *\n         * @example <caption>Example 1: Updating animation options</caption>\n         *\n         * mixer.configure({\n         *     animation: {\n         *         effects: 'fade translateX(-100%)',\n         *         duration: 300\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Removing a callback after it has been set</caption>\n         *\n         * var mixer;\n         *\n         * function handleMixEndOnce() {\n         *     // Do something ..\n         *\n         *     // Then nullify the callback\n         *\n         *     mixer.configure({\n         *         callbacks: {\n         *             onMixEnd: null\n         *         }\n         *     });\n         * };\n         *\n         * // Instantiate a mixer with a callback defined\n         *\n         * mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixEnd: handleMixEndOnce\n         *     }\n         * });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {object}    config\n         *      An object containing one of more configuration options.\n         * @return      {void}\n         */\n\n        configure: function(config) {\n            var self = this;\n\n            self.callActions('beforeConfigure', arguments);\n\n            h.extend(self.config, config, true, true);\n\n            self.callActions('afterConfigure', arguments);\n        },\n\n        /**\n         * Returns an object containing information about the current state of the\n         * mixer. See the State Object documentation for more information.\n         *\n         * NB: State objects are immutable and should therefore be regenerated\n         * after any operation.\n         *\n         * @example\n         *\n         * .getState();\n         *\n         * @example <caption>Example: Retrieving a state object</caption>\n         *\n         * var state = mixer.getState();\n         *\n         * console.log(state.totalShow + 'targets are currently shown');\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @return      {mixitup.State} An object reflecting the current state of the mixer.\n         */\n\n        getState: function() {\n            var self    = this,\n                state   = null;\n\n            state = new mixitup.State();\n\n            h.extend(state, self.state);\n\n            h.freeze(state);\n\n            return self.callFilters('stateGetState', state, arguments);\n        },\n\n        /**\n         * Forces the re-indexing all targets within the container.\n         *\n         * This should only be used if some other piece of code in your application\n         * has manipulated the contents of your container, which should be avoided.\n         *\n         * If you need to add or remove target elements from the container, use\n         * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep\n         * itself up to date.\n         *\n         * @example\n         *\n         * .forceRefresh()\n         *\n         * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 3\n         *\n         * // An element is removed from the container via some external DOM manipulation code:\n         *\n         * containerEl.removeChild(containerEl.firstElementChild);\n         *\n         * // The mixer does not know that the number of targets has changed:\n         *\n         * console.log(mixer.getState().totalShow); // 3\n         *\n         * mixer.forceRefresh();\n         *\n         * // After forceRefresh, the mixer is in sync again:\n         *\n         * console.log(mixer.getState().totalShow); // 2\n         *\n         * @public\n         * @instance\n         * @since 2.1.2\n         * @return {void}\n         */\n\n        forceRefresh: function() {\n            var self = this;\n\n            self.indexTargets();\n        },\n\n        /**\n         * Forces the re-rendering of all targets when using the Dataset API.\n         *\n         * By default, targets are only re-rendered when `data.dirtyCheck` is\n         * enabled, and an item's data has changed when `dataset()` is called.\n         *\n         * The `forceRender()` method allows for the re-rendering of all targets\n         * in response to some arbitrary event, such as the changing of the target\n         * render function.\n         *\n         * Targets are rendered against their existing data.\n         *\n         * @example\n         *\n         * .forceRender()\n         *\n         * @example <caption>Example: Force render targets after changing the target render function</caption>\n         *\n         * console.log(container.innerHTML); // ... &lt;span class=\"mix\"&gt;Foo&lt;/span&gt; ...\n         *\n         * mixer.configure({\n         *     render: {\n         *         target: (item) => `&lt;a href=\"/${item.slug}/\" class=\"mix\"&gt;${item.title}&lt;/a&gt;`\n         *     }\n         * });\n         *\n         * mixer.forceRender();\n         *\n         * console.log(container.innerHTML); // ... &lt;a href=\"/foo/\" class=\"mix\"&gt;Foo&lt;/a&gt; ...\n         *\n         * @public\n         * @instance\n         * @since 3.2.1\n         * @return {void}\n         */\n\n        forceRender: function() {\n            var self    = this,\n                target  = null,\n                el      = null,\n                id      = '';\n\n            for (id in self.cache) {\n                target = self.cache[id];\n\n                el = target.render(target.data);\n\n                if (el !== target.dom.el) {\n                    // Update target element reference\n\n                    if (target.isInDom) {\n                        target.unbindEvents();\n\n                        self.dom.parent.replaceChild(el, target.dom.el);\n                    }\n\n                    if (!target.isShown) {\n                        el.style.display = 'none';\n                    }\n\n                    target.dom.el = el;\n\n                    if (target.isInDom) {\n                        target.bindEvents();\n                    }\n                }\n            }\n\n            self.state = self.buildState(self.lastOperation);\n        },\n\n        /**\n         * Removes mixitup functionality from the container, unbinds all control\n         * event handlers, and deletes the mixer instance from MixItUp's internal\n         * cache.\n         *\n         * This should be performed whenever a mixer's container is removed from\n         * the DOM, such as during a page change in a single page application,\n         * or React's `componentWillUnmount()`.\n         *\n         * @example\n         *\n         * .destroy([cleanUp])\n         *\n         * @example <caption>Example: Destroying the mixer before removing its container element</caption>\n         *\n         * mixer.destroy();\n         *\n         * containerEl.parentElement.removeChild(containerEl);\n         *\n         * @public\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   [cleanUp=false]\n         *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.\n         * @return  {void}\n         */\n\n        destroy: function(cleanUp) {\n            var self    = this,\n                control = null,\n                target  = null,\n                i       = 0;\n\n            self.callActions('beforeDestroy', arguments);\n\n            for (i = 0; control = self.controls[i]; i++) {\n                control.removeBinding(self);\n            }\n\n            for (i = 0; target = self.targets[i]; i++) {\n                if (cleanUp) {\n                    target.show();\n                }\n\n                target.unbindEvents();\n            }\n\n            if (self.dom.container.id.match(/^MixItUp/)) {\n                self.dom.container.removeAttribute('id');\n            }\n\n            delete mixitup.instances[self.id];\n\n            self.callActions('afterDestroy', arguments);\n        }\n    });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.IMoveData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.posIn          = null;\n        this.posOut         = null;\n        this.operation      = null;\n        this.callback       = null;\n        this.statusChange   = '';\n        this.duration       = -1;\n        this.staggerIndex   = -1;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.IMoveData);\n\n    mixitup.IMoveData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.IMoveData.prototype.constructor = mixitup.IMoveData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TargetDom = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TargetDom);\n\n    mixitup.TargetDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TargetDom.prototype.constructor = mixitup.TargetDom;\n\n    /**\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Target = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id         = '';\n        this.sortString = '';\n        this.mixer      = null;\n        this.callback   = null;\n        this.isShown    = false;\n        this.isBound    = false;\n        this.isExcluded = false;\n        this.isInDom    = false;\n        this.handler    = null;\n        this.operation  = null;\n        this.data       = null;\n        this.dom        = new mixitup.TargetDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Target);\n\n    mixitup.Target.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Target.prototype, {\n        constructor: mixitup.Target,\n\n        /**\n         * Initialises a newly instantiated Target.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {(Element|null)}    el\n         * @param   {object}            mixer\n         * @param   {object}            [data]\n         * @return  {void}\n         */\n\n        init: function(el, mixer, data) {\n            var self = this,\n                id   = '';\n\n            self.callActions('beforeInit', arguments);\n\n            self.mixer = mixer;\n\n            if (!el) {\n                // If no element is provided, render it\n\n                el = self.render(data);\n            }\n\n            self.cacheDom(el);\n\n            self.bindEvents();\n\n            if (self.dom.el.style.display !== 'none') {\n                self.isShown = true;\n            }\n\n            if (data && mixer.config.data.uidKey) {\n                if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                    throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                        uidKey: mixer.config.data.uidKey\n                    }));\n                }\n\n                self.id     = id;\n                self.data   = data;\n\n                mixer.cache[id] = self;\n            }\n\n            self.callActions('afterInit', arguments);\n        },\n\n        /**\n         * Renders the target element using a user-defined renderer function.\n         *\n         * @private\n         * @instance\n         * @since   3.1.4\n         * @param   {object} data\n         * @return  {void}\n         */\n\n        render: function(data) {\n            var self    = this,\n                render  = null,\n                el      = null,\n                temp    = null,\n                output  = '';\n\n            self.callActions('beforeRender', arguments);\n\n            render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);\n\n            if (typeof render !== 'function') {\n                throw new TypeError(mixitup.messages.errorDatasetRendererNotSet());\n            }\n\n            output = render(data);\n\n            if (output && typeof output === 'object' && h.isElement(output)) {\n                el = output;\n            } else if (typeof output === 'string') {\n                temp = document.createElement('div');\n                temp.innerHTML = output;\n\n                el = temp.firstElementChild;\n            }\n\n            return self.callFilters('elRender', el, arguments);\n        },\n\n        /**\n         * Caches references of DOM elements neccessary for the target's functionality.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Element} el\n         * @return  {void}\n         */\n\n        cacheDom: function(el) {\n            var self = this;\n\n            self.callActions('beforeCacheDom', arguments);\n\n            self.dom.el = el;\n\n            self.callActions('afterCacheDom', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    attributeName\n         * @return  {void}\n         */\n\n        getSortString: function(attributeName) {\n            var self    = this,\n                value   = self.dom.el.getAttribute('data-' + attributeName) || '';\n\n            self.callActions('beforeGetSortString', arguments);\n\n            value = isNaN(value * 1) ?\n                value.toLowerCase() :\n                value * 1;\n\n            self.sortString = value;\n\n            self.callActions('afterGetSortString', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        show: function() {\n            var self = this;\n\n            self.callActions('beforeShow', arguments);\n\n            if (!self.isShown) {\n                self.dom.el.style.display = '';\n\n                self.isShown = true;\n            }\n\n            self.callActions('afterShow', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        hide: function() {\n            var self = this;\n\n            self.callActions('beforeHide', arguments);\n\n            if (self.isShown) {\n                self.dom.el.style.display = 'none';\n\n                self.isShown = false;\n            }\n\n            self.callActions('afterHide', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        move: function(moveData) {\n            var self = this;\n\n            self.callActions('beforeMove', arguments);\n\n            if (!self.isExcluded) {\n                self.mixer.targetsMoved++;\n            }\n\n            self.applyStylesIn(moveData);\n\n            requestAnimationFrame(function() {\n                self.applyStylesOut(moveData);\n            });\n\n            self.callActions('afterMove', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}    posData\n         * @param   {number}    multiplier\n         * @return  {void}\n         */\n\n        applyTween: function(posData, multiplier) {\n            var self                    = this,\n                propertyName            = '',\n                tweenData               = null,\n                posIn                   = posData.posIn,\n                currentTransformValues  = [],\n                currentValues           = new mixitup.StyleData(),\n                i                       = -1;\n\n            self.callActions('beforeApplyTween', arguments);\n\n            currentValues.x     = posIn.x;\n            currentValues.y     = posIn.y;\n\n            if (multiplier === 0) {\n                self.hide();\n            } else if (!self.isShown) {\n                self.show();\n            }\n\n            for (i = 0; propertyName = mixitup.features.TWEENABLE[i]; i++) {\n                tweenData = posData.tweenData[propertyName];\n\n                if (propertyName === 'x') {\n                    if (!tweenData) continue;\n\n                    currentValues.x = posIn.x + (tweenData * multiplier);\n                } else if (propertyName === 'y') {\n                    if (!tweenData) continue;\n\n                    currentValues.y = posIn.y + (tweenData * multiplier);\n                } else if (tweenData instanceof mixitup.TransformData) {\n                    if (!tweenData.value) continue;\n\n                    currentValues[propertyName].value =\n                        posIn[propertyName].value + (tweenData.value * multiplier);\n\n                    currentValues[propertyName].unit  = tweenData.unit;\n\n                    currentTransformValues.push(\n                        propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')'\n                    );\n                } else {\n                    if (!tweenData) continue;\n\n                    currentValues[propertyName] = posIn[propertyName] + (tweenData * multiplier);\n\n                    self.dom.el.style[propertyName] = currentValues[propertyName];\n                }\n            }\n\n            if (currentValues.x || currentValues.y) {\n                currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');\n            }\n\n            if (currentTransformValues.length) {\n                self.dom.el.style[mixitup.features.transformProp] = currentTransformValues.join(' ');\n            }\n\n            self.callActions('afterApplyTween', arguments);\n        },\n\n        /**\n         * Applies the initial styling to a target element before any transition\n         * is applied.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesIn: function(moveData) {\n            var self            = this,\n                posIn           = moveData.posIn,\n                isFading        = self.mixer.effectsIn.opacity !== 1,\n                transformValues = [];\n\n            self.callActions('beforeApplyStylesIn', arguments);\n\n            transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                if (moveData.statusChange !== 'show') {\n                    // Don't apply posIn width or height or showing, as will be 0\n\n                    self.dom.el.style.width  = posIn.width + 'px';\n                    self.dom.el.style.height = posIn.height + 'px';\n                }\n\n                self.dom.el.style.marginRight  = posIn.marginRight + 'px';\n                self.dom.el.style.marginBottom = posIn.marginBottom + 'px';\n            }\n\n            isFading && (self.dom.el.style.opacity = posIn.opacity);\n\n            if (moveData.statusChange === 'show') {\n                transformValues = transformValues.concat(self.mixer.transformIn);\n            }\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesIn', arguments);\n        },\n\n        /**\n         * Applies a transition followed by the final styles for the element to\n         * transition towards.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesOut: function(moveData) {\n            var self            = this,\n                transitionRules = [],\n                transformValues = [],\n                isResizing      = self.mixer.config.animation.animateResizeTargets,\n                isFading        = typeof self.mixer.effectsIn.opacity !== 'undefined';\n\n            self.callActions('beforeApplyStylesOut', arguments);\n\n            // Build the transition rules\n\n            transitionRules.push(self.writeTransitionRule(\n                mixitup.features.transformRule,\n                moveData.staggerIndex\n            ));\n\n            if (moveData.statusChange !== 'none') {\n                transitionRules.push(self.writeTransitionRule(\n                    'opacity',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            if (isResizing) {\n                transitionRules.push(self.writeTransitionRule(\n                    'width',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'height',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'margin',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            // If no callback was provided, the element will\n            // not transition in any way so tag it as \"immovable\"\n\n            if (!moveData.callback) {\n                self.mixer.targetsImmovable++;\n\n                if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {\n                    // If the total targets moved is equal to the\n                    // number of immovable targets, the operation\n                    // should be considered finished\n\n                    self.mixer.cleanUp(moveData.operation);\n                }\n\n                return;\n            }\n\n            // If the target will transition in some fasion,\n            // assign a callback function\n\n            self.operation = moveData.operation;\n            self.callback = moveData.callback;\n\n            // As long as the target is not excluded, increment\n            // the total number of targets bound\n\n            !self.isExcluded && self.mixer.targetsBound++;\n\n            // Tag the target as bound to differentiate from transitionEnd\n            // events that may come from stylesheet driven effects\n\n            self.isBound = true;\n\n            // Apply the transition\n\n            self.applyTransition(transitionRules);\n\n            // Apply width, height and margin negation\n\n            if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {\n                self.dom.el.style.width        = moveData.posOut.width + 'px';\n                self.dom.el.style.height       = moveData.posOut.height + 'px';\n                self.dom.el.style.marginRight  = moveData.posOut.marginRight + 'px';\n                self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';\n            }\n\n            if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {\n                // If we're not nudging, the translation should be\n                // applied before any other transforms to prevent\n                // lateral movement\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply fade\n\n            switch (moveData.statusChange) {\n                case 'hide':\n                    isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);\n\n                    transformValues = transformValues.concat(self.mixer.transformOut);\n\n                    break;\n                case 'show':\n                    isFading && (self.dom.el.style.opacity = 1);\n            }\n\n            if (\n                self.mixer.config.animation.nudge ||\n                (!self.mixer.config.animation.nudge && moveData.statusChange !== 'hide')\n            ) {\n                // Opposite of above - apply translate after\n                // other transform\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply transforms\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesOut', arguments);\n        },\n\n        /**\n         * Combines the name of a CSS property with the appropriate duration and delay\n         * values to created a valid transition rule.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    property\n         * @param   {number}    staggerIndex\n         * @param   {number}    duration\n         * @return  {string}\n         */\n\n        writeTransitionRule: function(property, staggerIndex, duration) {\n            var self  = this,\n                delay = self.getDelay(staggerIndex),\n                rule  = '';\n\n            rule = property + ' ' +\n                (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' +\n                delay + 'ms ' +\n                (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);\n\n            return self.callFilters('ruleWriteTransitionRule', rule, arguments);\n        },\n\n        /**\n         * Calculates the transition delay for each target element based on its index, if\n         * staggering is applied. If defined, A custom `animation.staggerSeqeuence`\n         * function can be used to manipulate the order of indices to produce custom\n         * stagger effects (e.g. for use in a grid with irregular row lengths).\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {number}    index\n         * @return  {number}\n         */\n\n        getDelay: function(index) {\n            var self    = this,\n                delay   = -1;\n\n            if (typeof self.mixer.config.animation.staggerSequence === 'function') {\n                index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);\n            }\n\n            delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;\n\n            return self.callFilters('delayGetDelay', delay, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string[]}  rules\n         * @return  {void}\n         */\n\n        applyTransition: function(rules) {\n            var self                = this,\n                transitionString    = rules.join(', ');\n\n            self.callActions('beforeApplyTransition', arguments);\n\n            self.dom.el.style[mixitup.features.transitionProp] = transitionString;\n\n            self.callActions('afterApplyTransition', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event} e\n         * @return  {void}\n         */\n\n        handleTransitionEnd: function(e) {\n            var self        = this,\n                propName    = e.propertyName,\n                canResize   = self.mixer.config.animation.animateResizeTargets;\n\n            self.callActions('beforeHandleTransitionEnd', arguments);\n\n            if (\n                self.isBound &&\n                e.target.matches(self.mixer.config.selectors.target) &&\n                (\n                    propName.indexOf('transform') > -1 ||\n                    propName.indexOf('opacity') > -1 ||\n                    canResize && propName.indexOf('height') > -1 ||\n                    canResize && propName.indexOf('width') > -1 ||\n                    canResize && propName.indexOf('margin') > -1\n                )\n            ) {\n                self.callback.call(self, self.operation);\n\n                self.isBound = false;\n                self.callback = null;\n                self.operation = null;\n            }\n\n            self.callActions('afterHandleTransitionEnd', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event}     e\n         * @return  {void}\n         */\n\n        eventBus: function(e) {\n            var self = this;\n\n            self.callActions('beforeEventBus', arguments);\n\n            switch (e.type) {\n                case 'webkitTransitionEnd':\n                case 'transitionend':\n                    self.handleTransitionEnd(e);\n            }\n\n            self.callActions('afterEventBus', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        unbindEvents: function() {\n            var self = this;\n\n            self.callActions('beforeUnbindEvents', arguments);\n\n            h.off(self.dom.el, 'webkitTransitionEnd', self.handler);\n            h.off(self.dom.el, 'transitionend', self.handler);\n\n            self.callActions('afterUnbindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        bindEvents: function() {\n            var self                = this,\n                transitionEndEvent  = '';\n\n            self.callActions('beforeBindEvents', arguments);\n\n            transitionEndEvent = mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';\n\n            self.handler = function(e) {\n                return self.eventBus(e);\n            };\n\n            h.on(self.dom.el, transitionEndEvent, self.handler);\n\n            self.callActions('afterBindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {boolean}   [getBox]\n         * @return  {PosData}\n         */\n\n        getPosData: function(getBox) {\n            var self    = this,\n                styles  = {},\n                rect    = null,\n                posData = new mixitup.StyleData();\n\n            self.callActions('beforeGetPosData', arguments);\n\n            posData.x = self.dom.el.offsetLeft;\n            posData.y = self.dom.el.offsetTop;\n\n            if (self.mixer.config.animation.animateResizeTargets || getBox) {\n                rect = self.dom.el.getBoundingClientRect();\n\n                posData.top     = rect.top;\n                posData.right   = rect.right;\n                posData.bottom  = rect.bottom;\n                posData.left    = rect.left;\n\n                posData.width  = rect.width;\n                posData.height = rect.height;\n            }\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                styles = window.getComputedStyle(self.dom.el);\n\n                posData.marginBottom = parseFloat(styles.marginBottom);\n                posData.marginRight  = parseFloat(styles.marginRight);\n            }\n\n            return self.callFilters('posDataGetPosData', posData, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since       3.0.0\n         * @return      {void}\n         */\n\n        cleanUp: function() {\n            var self = this;\n\n            self.callActions('beforeCleanUp', arguments);\n\n            self.dom.el.style[mixitup.features.transformProp]  = '';\n            self.dom.el.style[mixitup.features.transitionProp] = '';\n            self.dom.el.style.opacity                          = '';\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                self.dom.el.style.width        = '';\n                self.dom.el.style.height       = '';\n                self.dom.el.style.marginRight  = '';\n                self.dom.el.style.marginBottom = '';\n            }\n\n            self.callActions('afterCleanUp', arguments);\n        }\n    });\n\n    /**\n     * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances\n     * allowing simultaneous control of said instances similar to the MixItUp 2 API.\n     *\n     * @example\n     * new mixitup.Collection(instances)\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer[]}   instances\n     */\n\n    mixitup.Collection = function(instances) {\n        var instance    = null,\n            i           = -1;\n\n        this.callActions('beforeConstruct');\n\n        for (i = 0; instance = instances[i]; i++) {\n            this[i] = instance;\n        }\n\n        this.length = instances.length;\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Collection);\n\n    mixitup.Collection.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Collection.prototype,\n    /** @lends mixitup.Collection */\n    {\n        constructor: mixitup.Collection,\n\n        /**\n         * Calls a method on all instances in the collection by passing the method\n         * name as a string followed by any applicable parameters to be curried into\n         * to the method.\n         *\n         * @example\n         * .mixitup(methodName[,arg1][,arg2..]);\n         *\n         * @example\n         * var collection = new Collection([mixer1, mixer2]);\n         *\n         * return collection.mixitup('filter', '.category-a')\n         *     .then(function(states) {\n         *         state.forEach(function(state) {\n         *             console.log(state.activeFilter.selector); // .category-a\n         *         });\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}  methodName\n         * @return      {Promise<Array<mixitup.State>>}\n         */\n\n        mixitup: function(methodName) {\n            var self        = this,\n                instance    = null,\n                args        = Array.prototype.slice.call(arguments),\n                tasks       = [],\n                i           = -1;\n\n            this.callActions('beforeMixitup');\n\n            args.shift();\n\n            for (i = 0; instance = self[i]; i++) {\n                tasks.push(instance[methodName].apply(instance, args));\n            }\n\n            return self.callFilters('promiseMixitup', h.all(tasks, mixitup.libraries), arguments);\n        }\n    });\n\n    /**\n     * `mixitup.Operation` objects contain all data neccessary to describe the full\n     * lifecycle of any MixItUp operation. They can be used to compute and store an\n     * operation for use at a later time (e.g. programmatic tweening).\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Operation = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id                      = '';\n\n        this.args                    = [];\n        this.command                 = null;\n        this.showPosData             = [];\n        this.toHidePosData           = [];\n\n        this.startState              = null;\n        this.newState                = null;\n        this.docState                = null;\n\n        this.willSort                = false;\n        this.willChangeLayout        = false;\n        this.hasEffect               = false;\n        this.hasFailed               = false;\n\n        this.triggerElement          = null;\n\n        this.show                    = [];\n        this.hide                    = [];\n        this.matching                = [];\n        this.toShow                  = [];\n        this.toHide                  = [];\n        this.toMove                  = [];\n        this.toRemove                = [];\n        this.startOrder              = [];\n        this.newOrder                = [];\n        this.startSort               = null;\n        this.newSort                 = null;\n        this.startFilter             = null;\n        this.newFilter               = null;\n        this.startDataset            = null;\n        this.newDataset              = null;\n        this.viewportDeltaX          = 0;\n        this.viewportDeltaY          = 0;\n        this.startX                  = 0;\n        this.startY                  = 0;\n        this.startHeight             = 0;\n        this.startWidth              = 0;\n        this.newX                    = 0;\n        this.newY                    = 0;\n        this.newHeight               = 0;\n        this.newWidth                = 0;\n        this.startContainerClassName = '';\n        this.startDisplay            = '';\n        this.newContainerClassName   = '';\n        this.newDisplay              = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Operation);\n\n    mixitup.Operation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Operation.prototype.constructor = mixitup.Operation;\n\n    /**\n     * `mixitup.State` objects expose various pieces of data detailing the state of\n     * a MixItUp instance. They are provided at the start and end of any operation via\n     * callbacks and events, with the most recent state stored between operations\n     * for retrieval at any time via the API.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.State = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The ID of the mixer instance.\n         *\n         * @name        id\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.id = '';\n\n        /**\n         * The currently active filter command as set by a control click or API call.\n         *\n         * @name        activeFilter\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandFilter}\n         * @default     null\n         */\n\n        this.activeFilter = null;\n\n        /**\n         * The currently active sort command as set by a control click or API call.\n         *\n         * @name        activeSort\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandSort}\n         * @default     null\n         */\n\n        this.activeSort = null;\n\n        /**\n         * The current layout-specific container class name, if applied.\n         *\n         * @name        activeContainerClassName\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.activeContainerClassName = '';\n\n        /**\n         * A reference to the container element that the mixer is instantiated on.\n         *\n         * @name        container\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element}\n         * @default     null\n         */\n\n        this.container = null;\n\n        /**\n         * An array of all target elements indexed by the mixer.\n         *\n         * @name        targets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.targets = [];\n\n        /**\n         * An array of all target elements not matching the current filter.\n         *\n         * @name        hide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.hide = [];\n\n        /**\n         * An array of all target elements matching the current filter and any additional\n         * limits applied such as pagination.\n         *\n         * @name        show\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.show = [];\n\n        /**\n         * An array of all target elements matching the current filter irrespective of\n         * any additional limits applied such as pagination.\n         *\n         * @name        matching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.matching = [];\n\n        /**\n         * An integer representing the total number of target elements indexed by the\n         * mixer. Equivalent to `state.targets.length`.\n         *\n         * @name        totalTargets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalTargets = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter and any additional limits applied such as pagination.\n         * Equivalent to `state.show.length`.\n         *\n         * @name        totalShow\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalShow = -1;\n\n        /**\n         * An integer representing the total number of target elements not matching\n         * the current filter. Equivalent to `state.hide.length`.\n         *\n         * @name        totalHide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalHide = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter irrespective of any other limits applied such as pagination.\n         * Equivalent to `state.matching.length`.\n         *\n         * @name        totalMatching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalMatching = -1;\n\n        /**\n         * A boolean indicating whether the last operation \"failed\", i.e. no targets\n         * could be found matching the filter.\n         *\n         * @name        hasFailed\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.hasFailed = false;\n\n        /**\n         * The DOM element that was clicked if the last operation was triggered by the\n         * clicking of a control and not an API call.\n         *\n         * @name        triggerElement\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element|null}\n         * @default     null\n         */\n\n        this.triggerElement = null;\n\n        /**\n         * The currently active dataset underlying the rendered targets, if the\n         * dataset API is in use.\n         *\n         * @name        activeDataset\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.activeDataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.State);\n\n    mixitup.State.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.State.prototype.constructor = mixitup.State;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UserInstruction = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.command    = {};\n        this.animate    = false;\n        this.callback   = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UserInstruction);\n\n    mixitup.UserInstruction.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UserInstruction.prototype.constructor = mixitup.UserInstruction;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Messages = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /* Errors\n        ----------------------------------------------------------------------------- */\n\n        this.ERROR_FACTORY_INVALID_CONTAINER =\n            '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';\n\n        this.ERROR_FACTORY_CONTAINER_NOT_FOUND =\n            '[MixItUp] The provided selector yielded no container element';\n\n        this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS =\n            '[MixItUp] Invalid value for `animation.effects`';\n\n        this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE =\n            '[MixItUp] Invalid value for `controls.scope`';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY =\n            '[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION =\n            '. Did you mean \"${probableMatch}\"?';\n\n        this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET =\n            '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';\n\n        this.ERROR_DATASET_INVALID_UID_KEY =\n            '[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items';\n\n        this.ERROR_DATASET_DUPLICATE_UID =\n            '[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.';\n\n        this.ERROR_INSERT_INVALID_ARGUMENTS =\n            '[MixItUp] Please provider either an index or a sibling and position to insert, not both';\n\n        this.ERROR_INSERT_PREEXISTING_ELEMENT =\n            '[MixItUp] An element to be inserted already exists in the container';\n\n        this.ERROR_FILTER_INVALID_ARGUMENTS =\n            '[MixItUp] Please provide either a selector or collection `.filter()`, not both';\n\n        this.ERROR_DATASET_NOT_SET =\n            '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';\n\n        this.ERROR_DATASET_PRERENDERED_MISMATCH =\n            '[MixItUp] `load.dataset` does not match pre-rendered targets';\n\n        this.ERROR_DATASET_RENDERER_NOT_SET =\n            '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';\n\n        this.ERROR_SORT_NON_EXISTENT_ELEMENT =\n            '[MixItUp] An element to be sorted does not already exist in the container';\n\n        /* Warnings\n        ----------------------------------------------------------------------------- */\n\n        this.WARNING_FACTORY_PREEXISTING_INSTANCE =\n            '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' +\n            ' If you wish to perform additional methods on this instance, please create a reference.';\n\n        this.WARNING_INSERT_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.insert()`';\n\n        this.WARNING_REMOVE_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.remove()`';\n\n        this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL =\n            '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' +\n            'queue is full or queuing is disabled.';\n\n        this.WARNING_GET_OPERATION_INSTANCE_BUSY =\n            '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';\n\n        this.WARNING_NO_PROMISE_IMPLEMENTATION =\n            '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' +\n            ' an ES6 Promise polyfill.';\n\n        this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES =\n            '[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements' +\n            ' which may product unexpected sort output';\n\n        this.callActions('afterConstruct');\n\n        this.compileTemplates();\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Messages);\n\n    mixitup.Messages.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Messages.prototype.constructor = mixitup.Messages;\n\n    /**\n     * @return {void}\n     */\n\n    mixitup.Messages.prototype.compileTemplates = function() {\n        var errorKey        = '';\n        var errorMessage    = '';\n\n        for (errorKey in this) {\n            if (typeof (errorMessage = this[errorKey]) !== 'string') continue;\n\n            this[h.camelCase(errorKey)] = h.template(errorMessage);\n        }\n    };\n\n    mixitup.messages = new mixitup.Messages();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer} mixer\n     */\n\n    mixitup.Facade = function Mixer(mixer) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct', arguments);\n\n        this.configure          = mixer.configure.bind(mixer);\n        this.show               = mixer.show.bind(mixer);\n        this.hide               = mixer.hide.bind(mixer);\n        this.filter             = mixer.filter.bind(mixer);\n        this.toggleOn           = mixer.toggleOn.bind(mixer);\n        this.toggleOff          = mixer.toggleOff.bind(mixer);\n        this.sort               = mixer.sort.bind(mixer);\n        this.changeLayout       = mixer.changeLayout.bind(mixer);\n        this.multimix           = mixer.multimix.bind(mixer);\n        this.dataset            = mixer.dataset.bind(mixer);\n        this.tween              = mixer.tween.bind(mixer);\n        this.insert             = mixer.insert.bind(mixer);\n        this.insertBefore       = mixer.insertBefore.bind(mixer);\n        this.insertAfter        = mixer.insertAfter.bind(mixer);\n        this.prepend            = mixer.prepend.bind(mixer);\n        this.append             = mixer.append.bind(mixer);\n        this.remove             = mixer.remove.bind(mixer);\n        this.destroy            = mixer.destroy.bind(mixer);\n        this.forceRefresh       = mixer.forceRefresh.bind(mixer);\n        this.forceRender        = mixer.forceRender.bind(mixer);\n        this.isMixing           = mixer.isMixing.bind(mixer);\n        this.getOperation       = mixer.getOperation.bind(mixer);\n        this.getConfig          = mixer.getConfig.bind(mixer);\n        this.getState           = mixer.getState.bind(mixer);\n\n        this.callActions('afterConstruct', arguments);\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Facade);\n\n    mixitup.Facade.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Facade.prototype.constructor = mixitup.Facade;\n\n    if (typeof exports === 'object' && typeof module === 'object') {\n        module.exports = mixitup;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return mixitup;\n        });\n    } else if (typeof window.mixitup === 'undefined' || typeof window.mixitup !== 'function') {\n        window.mixitup = mixitup;\n    }\n    mixitup.BaseStatic.call(mixitup.constructor);\n\n    mixitup.NAME = 'mixitup';\n    mixitup.CORE_VERSION = '3.3.2';\n})(window);"],"mappings":"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,CAACU,WAAW,GAAM,KAAK;IAC3B,IAAI,CAAC5F,QAAQ,GAAS,KAAK;IAE3BvQ,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;;EAED;;EAEA1S,OAAO,CAACsQ,QAAQ,GAAG,IAAItQ,OAAO,CAACiV,QAAQ,CAAC,CAAC;EAEzCjV,OAAO,CAACsQ,QAAQ,CAAC2F,IAAI,CAAC,CAAC;;EAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIjW,OAAO,CAACsW,eAAe,GAAG,YAAW;IACjCtW,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACL,MAAM,GAAG,IAAI;;IAElB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC6P,OAAO,GAAG,YAAY;;IAE3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,SAAS,GAAG,EAAE;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,EAAE;;IAEpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,QAAQ,GAAG,GAAG;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,MAAM,GAAG,MAAM;;IAEpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,mBAAmB,GAAG,QAAQ;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,iBAAiB,GAAG,SAAS;;IAElC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,CAAC;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,sBAAsB,GAAG,IAAI;;IAElC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,oBAAoB,GAAG,KAAK;;IAEjC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,KAAK;;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,WAAW,GAAG,IAAI;;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,IAAI;IAEtB,IAAI,CAACxQ,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACsW,eAAe,CAAC;EAEhDtW,OAAO,CAACsW,eAAe,CAACzV,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAEzEb,OAAO,CAACsW,eAAe,CAACzV,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACsW,eAAe;;EAEvE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEItW,OAAO,CAACwX,cAAc,GAAG,YAAW;IAChCxX,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC0Q,QAAQ,GAAG,KAAK;IAErB,IAAI,CAAC1Q,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACwX,cAAc,CAAC;EAE/CxX,OAAO,CAACwX,cAAc,CAAC3W,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAExEb,OAAO,CAACwX,cAAc,CAAC3W,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACwX,cAAc;;EAErE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIxX,OAAO,CAAC0X,eAAe,GAAG,YAAW;IACjC1X,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC4Q,UAAU,GAAG,IAAI;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,SAAS,GAAI,IAAI;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,QAAQ,GAAK,IAAI;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,SAAS,GAAI,IAAI;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,IAAI;IAEtB,IAAI,CAAChR,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAAC0X,eAAe,CAAC;EAEhD1X,OAAO,CAAC0X,eAAe,CAAC7W,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAEzEb,OAAO,CAAC0X,eAAe,CAAC7W,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAAC0X,eAAe;;EAEvE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI1X,OAAO,CAACgY,cAAc,GAAG,YAAW;IAChChY,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACL,MAAM,GAAG,IAAI;;IAElB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACuR,IAAI,GAAG,KAAK;;IAEjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,KAAK,GAAG,QAAQ,CAAC,CAAC;;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,WAAW,GAAG,IAAI,CAAC,CAAC;;IAEzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,aAAa,GAAG,KAAK,CAAC,CAAC;;IAE5B,IAAI,CAACrR,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACgY,cAAc,CAAC;EAE/ChY,OAAO,CAACgY,cAAc,CAACnX,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAExEb,OAAO,CAACgY,cAAc,CAACnX,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACgY,cAAc;;EAErE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIhY,OAAO,CAACqY,gBAAgB,GAAG,YAAW;IAClCrY,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC4M,KAAK,GAAG,SAAS;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC2E,gBAAgB,GAAG,WAAW;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,aAAa,GAAG,SAAS;;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,WAAW,GAAG,SAAS;;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,eAAe,GAAG,SAAS;;IAEhC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,aAAa,GAAG,SAAS;;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,cAAc,GAAG,QAAQ;;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,gBAAgB,GAAG,UAAU;;IAElC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,cAAc,GAAG,QAAQ;;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACjF,iBAAiB,GAAG,GAAG;;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,kBAAkB,GAAG,GAAG;IAE7B,IAAI,CAAC9M,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACqY,gBAAgB,CAAC;EAEjDrY,OAAO,CAACqY,gBAAgB,CAACxX,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAE1Eb,OAAO,CAACqY,gBAAgB,CAACxX,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACqY,gBAAgB;;EAEzE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIrY,OAAO,CAAC8Y,UAAU,GAAG,YAAW;IAC5B9Y,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACgS,MAAM,GAAG,EAAE;;IAEhB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,KAAK;IAEvB,IAAI,CAACjS,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAAC8Y,UAAU,CAAC;EAE3C9Y,OAAO,CAAC8Y,UAAU,CAACjY,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAEpEb,OAAO,CAAC8Y,UAAU,CAACjY,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAAC8Y,UAAU;;EAE7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI9Y,OAAO,CAACiZ,WAAW,GAAG,YAAW;IAC7BjZ,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACL,MAAM,GAAG,KAAK;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACN,YAAY,GAAG,IAAI;;IAExB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC8S,SAAS,GAAG,KAAK;IAEtB,IAAI,CAACnS,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACiZ,WAAW,CAAC;EAE5CjZ,OAAO,CAACiZ,WAAW,CAACpY,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAErEb,OAAO,CAACiZ,WAAW,CAACpY,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACiZ,WAAW;;EAE/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIjZ,OAAO,CAACmZ,YAAY,GAAG,YAAW;IAC9BnZ,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACqS,kBAAkB,GAAG,IAAI;;IAE9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,kBAAkB,GAAG,EAAE;;IAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,YAAY,GAAG,IAAI;IAExB,IAAI,CAACxS,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,IAAI,CAAC5B,OAAO,CAACmZ,YAAY,CAAC;EAE7CnZ,OAAO,CAACmZ,YAAY,CAACtY,SAAS,GAAGH,MAAM,CAACmC,MAAM,CAAC7C,OAAO,CAAC8G,IAAI,CAACjG,SAAS,CAAC;EAEtEb,OAAO,CAACmZ,YAAY,CAACtY,SAAS,CAACsT,WAAW,GAAGnU,OAAO,CAACmZ,YAAY;;EAEjE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEInZ,OAAO,CAACwZ,UAAU,GAAG,YAAW;IAC5BxZ,OAAO,CAAC8G,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACmF,WAAW,CAAC,iBAAiB,CAAC;;IAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC0S,MAAM,GAAG,KAAK;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,IAAI,GAAG,aAAa;;IAEzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,OAAO,GAAG,IAAI;IAEnB,IAAI,CAAC5S,WAAW,CAAC,gBAAgB,CAAC;IAElC9G,CAAC,CAACyS,IAAI,CAAC,IAAI,CAAC;EAChB,CAAC;EAED1S,OAAO,CAAC6U,UAAU,CAACjT,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;AACA;AACA;;IAEQif,IAAI,EAAE,SAAAA,CAAA,EAAW;MACb,IAAIte,IAAI,GAAG,IAAI;MAEf,OAAOA,IAAI,CAACmV,MAAM,CAAC,KAAK,CAAC;IAC7B,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQmI,IAAI,EAAE,SAAAA,CAAA,EAAW;MACb,IAAItd,IAAI,GAAG,IAAI;MAEf,OAAOA,IAAI,CAACmV,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQwU,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACjB,IAAI3pB,IAAI,GAAG,IAAI;MAEf,OAAOA,IAAI,CAACmc,MAAM;IACtB,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQhH,MAAM,EAAE,SAAAA,CAAA,EAAW;MACf,IAAInV,IAAI,GAAU,IAAI;QAClBgc,WAAW,GAAGhc,IAAI,CAACue,eAAe,CAAClf,SAAS,CAAC;MAEjD,OAAOW,IAAI,CAAC4Z,QAAQ,CAAC;QACjBzE,MAAM,EAAE6G,WAAW,CAAC/C;MACxB,CAAC,EAAE+C,WAAW,CAAC4L,OAAO,EAAE5L,WAAW,CAACkL,QAAQ,CAAC;IACjD,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQvN,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACjB,IAAI3Z,IAAI,GAAc,IAAI;QACtBgc,WAAW,GAAOhc,IAAI,CAACue,eAAe,CAAClf,SAAS,CAAC;QACjDlC,QAAQ,GAAU6e,WAAW,CAAC/C,OAAO,CAAC9b,QAAQ;QAC9C6iB,cAAc,GAAI,EAAE;MAExBhgB,IAAI,CAACkc,UAAU,GAAG,IAAI;MAEtB,IAAIlc,IAAI,CAAC8Z,WAAW,CAACzc,OAAO,CAACF,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxC6C,IAAI,CAAC8Z,WAAW,CAAC1b,IAAI,CAACjB,QAAQ,CAAC;MACnC;MAEA6iB,cAAc,GAAGhgB,IAAI,CAAC8f,iBAAiB,CAAC,CAAC;MAEzC,OAAO9f,IAAI,CAAC4Z,QAAQ,CAAC;QACjBzE,MAAM,EAAE6K;MACZ,CAAC,EAAEhE,WAAW,CAAC4L,OAAO,EAAE5L,WAAW,CAACkL,QAAQ,CAAC;IACjD,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQxN,SAAS,EAAE,SAAAA,CAAA,EAAW;MAClB,IAAI1Z,IAAI,GAAc,IAAI;QACtBgc,WAAW,GAAOhc,IAAI,CAACue,eAAe,CAAClf,SAAS,CAAC;QACjDlC,QAAQ,GAAU6e,WAAW,CAAC/C,OAAO,CAAC9b,QAAQ;QAC9CysB,aAAa,GAAK5pB,IAAI,CAAC8Z,WAAW,CAACzc,OAAO,CAACF,QAAQ,CAAC;QACpD6iB,cAAc,GAAI,EAAE;MAExBhgB,IAAI,CAACkc,UAAU,GAAG,IAAI;MAEtB,IAAI0N,aAAa,GAAG,CAAC,CAAC,EAAE;QACpB5pB,IAAI,CAAC8Z,WAAW,CAACnB,MAAM,CAACiR,aAAa,EAAE,CAAC,CAAC;MAC7C;MAEA5J,cAAc,GAAGhgB,IAAI,CAAC8f,iBAAiB,CAAC,CAAC;MAEzC,OAAO9f,IAAI,CAAC4Z,QAAQ,CAAC;QACjBzE,MAAM,EAAE6K;MACZ,CAAC,EAAEhE,WAAW,CAAC4L,OAAO,EAAE5L,WAAW,CAACkL,QAAQ,CAAC;IACjD,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ9R,IAAI,EAAE,SAAAA,CAAA,EAAW;MACb,IAAIpV,IAAI,GAAU,IAAI;QAClBgc,WAAW,GAAGhc,IAAI,CAACwe,aAAa,CAACnf,SAAS,CAAC;MAE/C,OAAOW,IAAI,CAAC4Z,QAAQ,CAAC;QACjBxE,IAAI,EAAE4G,WAAW,CAAC/C;MACtB,CAAC,EAAE+C,WAAW,CAAC4L,OAAO,EAAE5L,WAAW,CAACkL,QAAQ,CAAC;IACjD,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQpQ,YAAY,EAAE,SAAAA,CAAA,EAAW;MACrB,IAAI9W,IAAI,GAAU,IAAI;QAClBgc,WAAW,GAAGhc,IAAI,CAAC+nB,qBAAqB,CAAC1oB,SAAS,CAAC;MAEvD,OAAOW,IAAI,CAAC4Z,QAAQ,CAAC;QACjB9C,YAAY,EAAEkF,WAAW,CAAC/C;MAC9B,CAAC,EAAE+C,WAAW,CAAC4L,OAAO,EAAE5L,WAAW,CAACkL,QAAQ,CAAC;IACj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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQpG,YAAY,EAAE,SAAAA,CAAA,EAAW;MACrB,IAAI9gB,IAAI,GAAG,IAAI;QACX4I,IAAI,GAAG5I,IAAI,CAAC6nB,eAAe,CAACxoB,SAAS,CAAC;MAE1C,OAAOW,IAAI,CAAC4W,MAAM,CAAChO,IAAI,CAACqQ,OAAO,CAACjC,UAAU,EAAE,QAAQ,EAAEpO,IAAI,CAACqQ,OAAO,CAACzB,OAAO,EAAE5O,IAAI,CAACgf,OAAO,EAAEhf,IAAI,CAACse,QAAQ,CAAC;IAC5G,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQuD,WAAW,EAAE,SAAAA,CAAA,EAAW;MACpB,IAAIzqB,IAAI,GAAG,IAAI;QACX4I,IAAI,GAAG5I,IAAI,CAAC6nB,eAAe,CAACxoB,SAAS,CAAC;MAE1C,OAAOW,IAAI,CAAC4W,MAAM,CAAChO,IAAI,CAACqQ,OAAO,CAACjC,UAAU,EAAE,OAAO,EAAEpO,IAAI,CAACqQ,OAAO,CAACzB,OAAO,EAAE5O,IAAI,CAACgf,OAAO,EAAEhf,IAAI,CAACse,QAAQ,CAAC;IAC3G,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQwD,OAAO,EAAE,SAAAA,CAAA,EAAW;MAChB,IAAI1qB,IAAI,GAAG,IAAI;QACX4I,IAAI,GAAG5I,IAAI,CAAC6nB,eAAe,CAACxoB,SAAS,CAAC;MAE1C,OAAOW,IAAI,CAAC4W,MAAM,CAAC,CAAC,EAAEhO,IAAI,CAACqQ,OAAO,CAACjC,UAAU,EAAEpO,IAAI,CAACgf,OAAO,EAAEhf,IAAI,CAACse,QAAQ,CAAC;IAC/E,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQyD,MAAM,EAAE,SAAAA,CAAA,EAAW;MACf,IAAI3qB,IAAI,GAAG,IAAI;QACX4I,IAAI,GAAG5I,IAAI,CAAC6nB,eAAe,CAACxoB,SAAS,CAAC;MAE1C,OAAOW,IAAI,CAAC4W,MAAM,CAAC5W,IAAI,CAACwZ,KAAK,CAACiF,YAAY,EAAE7V,IAAI,CAACqQ,OAAO,CAACjC,UAAU,EAAEpO,IAAI,CAACgf,OAAO,EAAEhf,IAAI,CAACse,QAAQ,CAAC;IACrG,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQrQ,MAAM,EAAE,SAAAA,CAAA,EAAW;MACf,IAAI7W,IAAI,GAAG,IAAI;QACX4I,IAAI,GAAG5I,IAAI,CAAC8nB,eAAe,CAACzoB,SAAS,CAAC;MAE1C,OAAOW,IAAI,CAAC4Z,QAAQ,CAAC;QACjB/C,MAAM,EAAEjO,IAAI,CAACqQ;MACjB,CAAC,EAAErQ,IAAI,CAACgf,OAAO,EAAEhf,IAAI,CAACse,QAAQ,CAAC;IACnC,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ0D,SAAS,EAAE,SAAAA,CAASnb,SAAS,EAAE;MAC3B,IAAIzP,IAAI,GAAM,IAAI;QACdib,KAAK,GAAK,IAAI;MAElB,IAAI,CAACxL,SAAS,EAAE;QACZwL,KAAK,GAAGjb,IAAI,CAACY,MAAM;MACvB,CAAC,MAAM;QACHqa,KAAK,GAAGtf,CAAC,CAAC6T,WAAW,CAACxP,IAAI,CAACY,MAAM,EAAE6O,SAAS,CAAC;MACjD;MAEA,OAAOzP,IAAI,CAACkQ,WAAW,CAAC,gBAAgB,EAAE+K,KAAK,EAAE5b,SAAS,CAAC;IAC/D,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQwrB,SAAS,EAAE,SAAAA,CAASjqB,MAAM,EAAE;MACxB,IAAIZ,IAAI,GAAG,IAAI;MAEfA,IAAI,CAACyC,WAAW,CAAC,iBAAiB,EAAEpD,SAAS,CAAC;MAE9C1D,CAAC,CAAC8H,MAAM,CAACzD,IAAI,CAACY,MAAM,EAAEA,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;MAEzCZ,IAAI,CAACyC,WAAW,CAAC,gBAAgB,EAAEpD,SAAS,CAAC;IACjD,CAAC;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQyrB,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACjB,IAAI9qB,IAAI,GAAM,IAAI;QACdwZ,KAAK,GAAK,IAAI;MAElBA,KAAK,GAAG,IAAI9d,OAAO,CAAC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ACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACI,wBAAwB,GAAG,EAAE;;IAElC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACpd,SAAS,GAAG,IAAI;;IAErB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC0V,OAAO,GAAG,EAAE;;IAEjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACiH,IAAI,GAAG,EAAE;;IAEd;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACgB,IAAI,GAAG,EAAE;;IAEd;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC6C,QAAQ,GAAG,EAAE;;IAElB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC1C,YAAY,GAAG,CAAC,CAAC;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAAC0E,SAAS,GAAG,CAAC,CAAC;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;;IAEnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACjC,SAAS,GAAG,KAAK;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACnF,cAAc,GAAG,IAAI;;IAE1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAI,CAACkC,aAAa,GAAG,IAAI;IAEzB,IAAI,CAAC1b,WAAW,CAAC,gBAAgB,CA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}